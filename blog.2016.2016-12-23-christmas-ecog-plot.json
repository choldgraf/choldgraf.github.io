{"version":1,"kind":"Notebook","sha256":"edcca07eae7bed2fdb7bfa9c14805d97edcf35b9c5b80116c829a3064d3778a4","slug":"blog.2016.2016-12-23-christmas-ecog-plot","location":"/blog/2016/2016-12-23-christmas_ecog_plot.ipynb","dependencies":[],"frontmatter":{"title":"Brainy Jingle Bells","tags":["python","open science","visualizations","brains","holidays"],"date":"2016-12-23","kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"authors":[{"id":"chris","nameParsed":{"literal":"Chris Holdgraf","given":"Chris","family":"Holdgraf"},"name":"Chris Holdgraf","orcid":"0000-0002-2391-0678","affiliations":["affiliations-myst-generated-uid-0","affiliations-myst-generated-uid-1"],"twitter":"choldgraf","github":"choldgraf","url":"https://chrisholdgraf.com"}],"github":"https://github.com/choldgraf/choldgraf.github.io","affiliations":[{"name":"2i2c","url":"https://2i2c.org","id":"affiliations-myst-generated-uid-0"},{"name":"Project Jupyter","url":"https://jupyter.org","id":"affiliations-myst-generated-uid-1"}],"abbreviations":{"LF":"The Linux Foundation","JF":"The Jupyter Foundation","JEC":"Jupyter Executive Council","JFB":"The Jupyter Foundation Board","SSC":"Software Steering Council"},"numbering":{"title":{"offset":2}},"edit_url":"https://github.com/choldgraf/choldgraf.github.io/blob/main/blog/2016/2016-12-23-christmas_ecog_plot.ipynb","exports":[{"format":"ipynb","filename":"2016-12-23-christmas_ecog_plot.ipynb","url":"/build/2016-12-23-christmas-906d7253be08ff80f3f2a4f7910802a2.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"children":[{"type":"text","value":"This is a quick demo of how I created ","position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"key":"zAw3P3B9JG"},{"type":"link","url":"https://www.youtube.com/watch?v=lZS4uaTBrh8","position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"children":[{"type":"text","value":"this video","position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"key":"F05JdZ9yOj"}],"urlSource":"https://www.youtube.com/watch?v=lZS4uaTBrh8","key":"InWdorPSBW"},{"type":"text","value":". Check it out below, or read on to see the code that made it!","position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"key":"Q3u86o5s8s"}],"key":"RLXexkUb0C"}],"key":"pOpbfMJgyy"},{"type":"block","kind":"notebook-code","data":{"collapsed":false},"children":[{"type":"code","lang":"python","executable":true,"value":"from IPython.display import YouTubeVideo\nYouTubeVideo('lZS4uaTBrh8')","key":"y2eMdTTJ9D"},{"type":"output","id":"sbyGLlvSI0EGvMHkdalNp","data":[{"output_type":"execute_result","execution_count":1,"metadata":{},"data":{"image/jpeg":{"content_type":"image/jpeg","hash":"f8f2fae725e8f34b1a6fba6ac02fe546","path":"/build/f8f2fae725e8f34b1a6fba6ac02fe546.jpeg"},"text/html":{"content":"\n        <iframe\n            width=\"400\"\n            height=\"300\"\n            src=\"https://www.youtube.com/embed/lZS4uaTBrh8\"\n            frameborder=\"0\"\n            allowfullscreen\n        ></iframe>\n        ","content_type":"text/html"}}}],"key":"B3F38VOIz9"}],"key":"oJu0yMx5sh"},{"type":"block","kind":"notebook-code","data":{"collapsed":true},"children":[{"type":"code","lang":"python","executable":true,"value":"import pandas as pd\nimport mne\nimport numpy as np\nimport scipy.io.wavfile as wav\nimport matplotlib.pyplot as plt\nfrom moviepy.editor import VideoClip, ImageClip, AudioFileClip\nfrom moviepy.video.io.bindings import mplfig_to_npimage\nfrom sklearn.preprocessing import MinMaxScaler\nimport colorbabel as cb\n%matplotlib inline","key":"RGclnvzU2j"},{"type":"output","id":"7kNvatzGMZ6UKjDsJH3Wx","data":[],"key":"wLcQxHB9TN"}],"key":"j7XrFPX389"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Jingle Bells!","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"EE2UVhsJkB"}],"identifier":"jingle-bells","label":"Jingle Bells!","html_id":"jingle-bells","implicit":true,"key":"ZYHBaLvgnK"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Here’s a quick viz to show off some brainy holiday spirit.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"cLPA0316GZ"}],"key":"CkYqfBuGwT"},{"type":"paragraph","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"We’ll use ","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"nHCtCdzZSO"},{"type":"inlineCode","value":"matplotlib","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"F3CzhhGrdP"},{"type":"text","value":" and ","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"WhtapryiVV"},{"type":"inlineCode","value":"MoviePy","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"WIbMZRf8Ft"},{"type":"text","value":" to read in an audio file and generate a scatterplot that responds to the audio qualities.","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"Rxwn5KId8m"}],"key":"qhPZY5pAsd"}],"key":"FNgQu2cJ55"},{"type":"block","kind":"notebook-code","data":{"collapsed":false},"children":[{"type":"code","lang":"python","executable":true,"value":"# Load the audio clip with MoviePy to save to the movie later\npath_audio = '../../../../data/jinglebells.wav'\naudio_clip = AudioFileClip(path_audio)\n\n# Now load the sound as an array for manipulation\nsfreq, audio = wav.read(path_audio)\naudio = audio.T[0]\n\n# This is the amount of time the audio takes up\ntime_audio = audio.shape[-1] / float(sfreq)\nprint('Total time: {}'.format(time_audio))\n\n# Now read some brain info for plotting\n# NOTE: this is broken, but it's an old post so I'm going to just pretend it isn't broken :-)\n# melec = pd.read_csv('../../../../data/brain/meta_elec.csv')\n# im = plt.imread('../../../../data/brain/brain.png')","key":"JoraggovBw"},{"type":"output","id":"2VZ9Pct4Cl_3cqgFqc7-R","data":[],"key":"SFYIVkRinx"}],"key":"FFDPYtbJB9"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"We’ll use the spectral content in the audio to drive activity in the electrodes. Here’s what I’m talking about by spectral content:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ODtISntSVX"}],"key":"xGrlu0K89n"}],"key":"rDQ0FMErSO"},{"type":"block","kind":"notebook-code","data":{"collapsed":false},"children":[{"type":"code","lang":"python","executable":true,"value":"# A pretty spectrogram of audio\nfig, ax = plt.subplots()\n_ = ax.specgram(audio[100000:200000], Fs=sfreq, cmap=plt.cm.viridis)\nplt.autoscale(tight=True)\nax.set(ylim=[None, 8000])\n","key":"BpC8bfLb94"},{"type":"output","id":"-HEwTafDZGNFEWp5T8U71","data":[{"output_type":"execute_result","execution_count":32,"metadata":{},"data":{"text/plain":{"content":"[(0.0, 8000)]","content_type":"text/plain"}}},{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"2fbc19d2968367c1e8ed8c67c3837683","path":"/build/2fbc19d2968367c1e8ed8c67c3837683.png"}}}],"key":"FNYrc7hghL"}],"key":"mrkf0P2eWZ"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"We’ll extract this information again below so we can make the viz...","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"JSutcb2VHW"}],"key":"bPKV8y4lus"}],"key":"CAmVQk8wMI"},{"type":"block","kind":"notebook-code","data":{"collapsed":true},"children":[{"type":"code","lang":"python","executable":true,"value":"# Resample the audio so that it's not so long to process\nsfreq_new = 11025\naudio = mne.filter.resample(audio, sfreq_new, sfreq)","key":"lSX0Hcfrko"},{"type":"output","id":"7k273SWbS6uz2rCs0qNLF","data":[],"key":"Y2uhSdGCJK"}],"key":"skMWY8uUxe"},{"type":"block","kind":"notebook-code","data":{"collapsed":false},"children":[{"type":"code","lang":"python","executable":true,"value":"# Now extract a spectrogram of the audio\ndecim = 400\nsfreq_amp = sfreq_new / float(decim)\nfreqs = np.logspace(np.log10(400), np.log10(6000), 10)\nspec = mne.time_frequency.tfr._compute_tfr(\n    audio.reshape([1, 1, -1]), freqs, sfreq=sfreq_new, decim=decim)\nspec = np.abs(spec).squeeze()","key":"XkN8KS8Asx"},{"type":"output","id":"FqjHznai_gIbCCJUtJPTo","data":[],"key":"mBsgZFnZIl"}],"key":"BVAyxyzf35"},{"type":"block","kind":"notebook-code","data":{"collapsed":false},"children":[{"type":"code","lang":"python","executable":true,"value":"# Low-pass filter the spectrogram so it varies more smoothly\nspec = mne.filter.filter_data(spec, sfreq_amp, None, 5)","key":"pMRzKPNr44"},{"type":"output","id":"Er3BglqLMhpuPePH74f26","data":[],"key":"UMqhrfckjs"}],"key":"J7bfec8ACS"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Now, we’ll assign each electrode to a particular point on the y-axis of the spectrogram. We’ll assign based off of the height of each electrode.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"xjYIRSKqFB"}],"key":"Vi5vYxtwfu"}],"key":"TtQorvdTWQ"},{"type":"block","kind":"notebook-code","data":{"collapsed":false},"children":[{"type":"code","lang":"python","executable":true,"value":"# Now bin the y-point of each electrode and assign it to a specotrogram bin\ny_bins = np.linspace(melec['y_2d'].min(), melec['y_2d'].max(), len(freqs))\nbinned_elecs = np.digitize(melec['y_2d'].values, y_bins)\n\n# Scale the amplitude of each frequency band and assign them to electrodes\nscaler = MinMaxScaler(feature_range=(0, 1.6))\namplitudes = spec[binned_elecs - 1, :]\namplitudes_scaled = np.clip(scaler.fit_transform(amplitudes.T).T, None, 1)\n\n# Scaling etc for the scatterplot\namplitudes_sizes = np.clip(amplitudes_scaled, .01, None) * 100\namplitudes_sizes **= 2\namplitudes_sizes *= 1  # Set to 1 to not change size at all","key":"t9dZR7wMCJ"},{"type":"output","id":"M4Uiedlv_su4ZkBTvVmh9","data":[],"key":"ol19p6MEP5"}],"key":"hYbxEG4CtJ"},{"type":"block","kind":"notebook-code","data":{"collapsed":false},"children":[{"type":"code","lang":"python","executable":true,"value":"# Set the sampling frequency for the video so it fills up all the audio time\nn_frames = amplitudes.shape[-1]\nduration = time_audio\nsfreq_video = n_frames / duration\nprint(sfreq_video)","key":"N9JuOIhCCf"},{"type":"output","id":"Fj1KYbiASVsF21CE_4_5y","data":[{"name":"stdout","output_type":"stream","text":"27.5642161205%2525250A"}],"key":"JoTTA5kRuY"}],"key":"yNiVVjcEYu"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Making the movie","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"K0xedA25pT"}],"identifier":"making-the-movie","label":"Making the movie","html_id":"making-the-movie","implicit":true,"key":"DI637KC77r"}],"key":"qtIvvuIb6P"},{"type":"block","kind":"notebook-code","data":{"collapsed":false},"children":[{"type":"code","lang":"python","executable":true,"value":"# Here is our colorbar\ntrans = cb.ColorTranslator(['red', 'green'])\ncmap = trans.to_diverging(mid_spread=.8)\ncb.ColorTranslator(cmap).show_colors()","key":"xS5SOLVrGG"},{"type":"output","id":"QP4ytjQpTeL4yo0Re_zyZ","data":[{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"dd1019348bfecfe386d21a91fb0bbc46","path":"/build/dd1019348bfecfe386d21a91fb0bbc46.png"}}}],"key":"NHzz0ErC2o"}],"key":"u5ZzVPDqQF"},{"type":"block","kind":"notebook-code","data":{"collapsed":false},"children":[{"type":"code","lang":"python","executable":true,"value":"# Here's an example of what the plot looks like\nfig, ax = plt.subplots(figsize=(10, 10))\nax.imshow(im)\nax.set_axis_off()\nscat = ax.scatter(*melec[['x_2d', 'y_2d']].values.T, s=100)","key":"Jrwe1H62mt"},{"type":"output","id":"ziOIpRrCUVUZk-0SgD1oo","data":[{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"88f807debda17e6422805aee6cbe97e3","path":"/build/88f807debda17e6422805aee6cbe97e3.png"}}}],"key":"hiA82nqwzK"}],"key":"ElhfgA6iNg"},{"type":"block","kind":"notebook-code","data":{"collapsed":false},"children":[{"type":"code","lang":"python","executable":true,"value":"# This function maps a time (in seconds) onto an index\n# It sets the scatterplot sizes from that index\n# Then it returns the image of the figure.\ndef animate_scatterplot(t):\n    ix = int(np.round(t * sfreq_video)) - 1\n    sizes = amplitudes_sizes[:, ix]\n    colors = amplitudes_scaled[:, ix]\n    scat.set_sizes(sizes)\n    scat.set_color(cmap(colors))\n    return mplfig_to_npimage(fig)\n\n# Now we'll create our videoclip using this function, and give it audio\nclip = VideoClip(animate_scatterplot, duration=duration)\nclip.audio = audio_clip\n\n# Finally, write it to disk\nclip.write_videofile('../data/jinglebells.mp4', fps=sfreq_video, audio=True)","key":"Q5dBMszZhD"},{"type":"output","id":"g4uF3SZdKQWPTPEefY9Z2","data":[{"name":"stdout","output_type":"stream","text":"%2525255BMoviePy%2525255D%25252520%25252526gt%25252526gt%25252526gt%25252526gt%25252520Building%25252520video%25252520../data/jinglebells.mp4%2525250A%2525255BMoviePy%2525255D%25252520Writing%25252520audio%25252520in%25252520jinglebellsTEMP_MPY_wvf_snd.mp3%2525250A%2525255BMoviePy%2525255D%25252520Done.%2525250A%2525255BMoviePy%2525255D%25252520Writing%25252520video%25252520../data/jinglebells.mp4%2525250A%2525255BMoviePy%2525255D%25252520Done.%2525250A%2525255BMoviePy%2525255D%25252520%25252526gt%25252526gt%25252526gt%25252526gt%25252520Video%25252520ready%2525253A%25252520../data/jinglebells.mp4%25252520%2525250A%2525250A"}],"key":"dMmPn3Ml87"}],"key":"YvpUAIgcZv"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"And now you’ve got a great video!","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"HXdCuKOunf"}],"key":"PCQSGN4Ps3"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Credit for the nice brain image goes to the excellent ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"OppzmUoENs"},{"type":"link","url":"http://benedicterossi.com/","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Benedicte Rossi","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"z4mUpnsYPY"}],"urlSource":"http://benedicterossi.com/","key":"RZmNLXphJB"}],"key":"GzS69JgowR"}],"key":"ewD7duTSwO"}],"key":"k1dAQFCfyT"}],"key":"FJXWOWjapy"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"The bleeding edge of publishing, Scraping publication amounts at biorxiv","url":"/blog/2016/2016-12-19-biorxiv-neuro","group":"2016"},"next":{"title":"Coherence vs. Correlation - a simple simulation","url":"/blog/2015/2015-05-27-coherence-correlation","group":"2015"}}},"domain":"http://localhost:3000"}