{"kind":"Notebook","sha256":"a9fdcfeee99a906e860ee3c07a212181bd052b37c5af9658573326eef1f8e8e4","slug":"blog.2022.github-2022","location":"/blog/2022/github-2022.md","dependencies":[],"frontmatter":{"title":"GitHub year in review","kernelspec":{"name":"python3","display_name":"Python 3 (ipykernel)","language":"python"},"jupytext":{"formats":"md:myst"},"content_includes_title":false,"authors":[{"id":"chris","nameParsed":{"literal":"Chris Holdgraf","given":"Chris","family":"Holdgraf"},"name":"Chris Holdgraf","orcid":"0000-0002-2391-0678","affiliations":["affiliations-myst-generated-uid-0","affiliations-myst-generated-uid-1"],"twitter":"choldgraf","github":"choldgraf","url":"https://chrisholdgraf.com"}],"github":"https://github.com/choldgraf/choldgraf.github.io","affiliations":[{"name":"2i2c","url":"https://2i2c.org","id":"affiliations-myst-generated-uid-0"},{"name":"Project Jupyter","url":"https://jupyter.org","id":"affiliations-myst-generated-uid-1"}],"exports":[{"format":"md","filename":"github-2022.md","url":"/build/github-2022-d274ec2609d61cadbdeb268703b8250c.md"}]},"mdast":{"type":"root","children":[{"type":"block","children":[{"type":"comment","value":"TODO: Add a count of number of words written by month and total","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"thVErTxX1r"},{"type":"paragraph","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"link","url":"https://docs.github.com/en/graphql/overview/explorer","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"text","value":"https://​docs​.github​.com​/en​/graphql​/overview​/explorer","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"nADZTAQFGY"}],"urlSource":"https://docs.github.com/en/graphql/overview/explorer","key":"jaAMKJV6i4"}],"key":"t1Pj4jATnk"},{"type":"code","lang":"python","value":"from github_activity.graphql import GitHubGraphQlQuery\nimport os\nfrom rich import print\nfrom IPython.display import Markdown\nimport pandas as pd\nimport altair as alt\nfrom itertools import product","position":{"start":{"line":16,"column":1},"end":{"line":24,"column":1}},"key":"d8VLjPQQ3t"},{"type":"code","lang":"python","value":"dates = [\n    \"2022-01-01..2022-06-01\",\n    \"2022-06-01..2022-12-31\",\n]\nkinds = [\"author\", \"commenter\"]\nusername = \"choldgraf\"\ndata = []\nfor date, kind in product(dates, kinds):\n    query = f\"{kind}:{username} updated:{date} is:issue\"\n    resp = GitHubGraphQlQuery(query=query, auth=os.environ[\"GITHUB_TOKEN\"])\n    resp.request()\n    data.append(resp.data)","position":{"start":{"line":26,"column":1},"end":{"line":39,"column":1}},"key":"wKYtLaGTtl"},{"type":"code","lang":"python","value":"issues = pd.concat(data)\norig = issues.shape[0]\nissues = issues.drop_duplicates(subset=\"id\")\nnew = issues.shape[0]\nMarkdown(f\"Dropped **{orig-new}** duplicate issues...\")","position":{"start":{"line":41,"column":1},"end":{"line":47,"column":1}},"key":"YjBmoNwVqr"},{"type":"code","lang":"python","value":"# Extract comments into a standalone df\ncomments = []\nfor ix, row in issues.iterrows():\n    # Extract comments\n    for edge in row[\"comments\"][\"edges\"]:\n        comment = edge[\"node\"]\n        comment[\"issue_id\"] = row[\"id\"]\n        comment[\"repo\"] = row[\"repo\"]\n        comment[\"org\"] = row[\"org\"]\n        comments.append(comment)\ncomments = pd.DataFrame(comments)\n\n# Convert date fields into datetime objects\ndate_fields = [\"updatedAt\", \"createdAt\", \"closedAt\"]\nfor field in date_fields:\n    if field in comments.columns:\n        comments[field] = pd.to_datetime(comments[field])\n    if field in issues.columns:\n        issues[field] = pd.to_datetime(issues[field])\n    \n# Only include comments from this year\ncomments = comments[comments[\"updatedAt\"] > \"2022-01-01\"]","position":{"start":{"line":49,"column":1},"end":{"line":72,"column":1}},"key":"spEyUw1Qb7"},{"type":"heading","depth":2,"position":{"start":{"line":74,"column":1},"end":{"line":74,"column":1}},"children":[{"type":"text","value":"Issues created","position":{"start":{"line":74,"column":1},"end":{"line":74,"column":1}},"key":"NR6csQug8I"}],"identifier":"issues-created","label":"Issues created","html_id":"issues-created","implicit":true,"key":"lpjGXDFC3w"},{"type":"code","lang":"python","value":"opened = issues[issues[\"createdAt\"] > \"2022-01-01\"]\nclosed = issues[issues[\"closedAt\"] > \"2022-01-01\"]","position":{"start":{"line":76,"column":1},"end":{"line":79,"column":1}},"key":"u6iwMfSWhN"},{"type":"heading","depth":3,"position":{"start":{"line":81,"column":1},"end":{"line":81,"column":1}},"children":[{"type":"text","value":"Over time","position":{"start":{"line":81,"column":1},"end":{"line":81,"column":1}},"key":"vGW3j2URrz"}],"identifier":"over-time","label":"Over time","html_id":"over-time","implicit":true,"key":"fuqV4k70VT"},{"type":"code","lang":"python","value":"weekly = opened.groupby([\"org\"]).resample(\"M\", on=\"createdAt\").count()[\"state\"].reset_index()\ntop_orgs = weekly.groupby(\"org\").sum().sort_values(\"state\", ascending=False).head(10).index.values\nweekly = weekly.query(\"org in @top_orgs\")\nalt.Chart(weekly, width=500).mark_bar(width=25).encode(\n    x=\"createdAt\",\n    y=\"state\",\n    color=\"org\",\n    order=alt.Order('sum(state):Q', sort='descending'),\n    tooltip=[\"state\", \"org\"],\n).interactive()","position":{"start":{"line":83,"column":1},"end":{"line":94,"column":1}},"key":"IdJ9tIsNvT"},{"type":"heading","depth":3,"position":{"start":{"line":96,"column":1},"end":{"line":96,"column":1}},"children":[{"type":"text","value":"By repository","position":{"start":{"line":96,"column":1},"end":{"line":96,"column":1}},"key":"EskUnLAhny"}],"identifier":"by-repository","label":"By repository","html_id":"by-repository","implicit":true,"key":"hsbtcpLgM6"},{"type":"code","lang":"python","value":"charts = []\nfor kind, name in [(opened, \"opened\"), (closed, \"closed\")]:\n    counts = kind.groupby([\"org\", \"repo\"]).agg({\"state\": \"count\"}).rename(columns={\"state\": \"count\"})\n    plt_counts = counts.reset_index().sort_values(\"count\", ascending=False).head(20)\n    plt_counts[\"orgrepo\"] = plt_counts.apply(lambda a: f\"{a['org']}/{a['repo']}\", axis=1)\n    ch = alt.Chart(plt_counts, title=f\"{name} issues in 2022\").mark_bar().encode(\n        x=alt.X(\"orgrepo\", sort=alt.SortField(\"count\", order=\"descending\")),\n        y=\"count\",\n        tooltip=[\"org\", \"repo\", \"count\"],\n        color=\"org\",\n    ).interactive()\n    charts.append(ch)\ncharts[0] & charts[1]","position":{"start":{"line":98,"column":1},"end":{"line":112,"column":1}},"key":"HYCkMUWZ8x"},{"type":"heading","depth":3,"position":{"start":{"line":114,"column":1},"end":{"line":114,"column":1}},"children":[{"type":"text","value":"By activity","position":{"start":{"line":114,"column":1},"end":{"line":114,"column":1}},"key":"fuKa3Cy2Jp"}],"identifier":"by-activity","label":"By activity","html_id":"by-activity","implicit":true,"key":"KAUDmugvH4"},{"type":"paragraph","position":{"start":{"line":117,"column":1},"end":{"line":117,"column":1}},"children":[{"type":"text","value":"Most comments","position":{"start":{"line":117,"column":1},"end":{"line":117,"column":1}},"key":"LwnToumxpb"}],"key":"Gu42o9f3z7"},{"type":"code","lang":"python","value":"my_issues = opened.query(\"author=='choldgraf'\").copy()\nmy_issues[\"ncomments\"] = my_issues[\"comments\"].map(lambda a: len(a[\"edges\"]))\nmy_issues.sort_values(\"ncomments\", ascending=False).query(\"ncomments > 5\")","position":{"start":{"line":119,"column":1},"end":{"line":123,"column":1}},"key":"UZ5IQFX1jw"},{"type":"paragraph","position":{"start":{"line":125,"column":1},"end":{"line":125,"column":1}},"children":[{"type":"text","value":"Most thumbs up","position":{"start":{"line":125,"column":1},"end":{"line":125,"column":1}},"key":"v8QZojHvk3"}],"key":"Z3mqgAXRVl"},{"type":"code","lang":"python","value":"opened.query(\"author=='choldgraf'\").sort_values([\"thumbsup\"], ascending=False)","position":{"start":{"line":127,"column":1},"end":{"line":129,"column":1}},"key":"pg4O2UERB6"},{"type":"heading","depth":2,"position":{"start":{"line":131,"column":1},"end":{"line":131,"column":1}},"children":[{"type":"text","value":"GitHub Comments","position":{"start":{"line":131,"column":1},"end":{"line":131,"column":1}},"key":"JHT0WVTD1v"}],"identifier":"github-comments","label":"GitHub Comments","html_id":"github-comments","implicit":true,"key":"t3sVECFISi"},{"type":"code","lang":"python","value":"Markdown(f\"Total comments: **{comments.shape[0]}**\")","position":{"start":{"line":133,"column":1},"end":{"line":135,"column":1}},"key":"hktdEGnyR6"},{"type":"code","lang":"python","value":"counts = comments.groupby([\"org\", \"repo\"]).agg({\"url\": \"count\"}).rename(columns={\"url\": \"count\"}).reset_index()","position":{"start":{"line":137,"column":1},"end":{"line":139,"column":1}},"key":"zU98ZaWp47"},{"type":"code","lang":"python","value":"counts","position":{"start":{"line":141,"column":1},"end":{"line":143,"column":1}},"key":"SKv4x5WbAf"},{"type":"code","lang":"python","value":"top_orgs = counts.groupby(\"org\").sum().sort_values(\"count\", ascending=False).head(10).index.values\nplt_counts = counts.query(\"org in @top_orgs\")\nalt.Chart(plt_counts, width=500).mark_bar(width=25).encode(\n    x=alt.X(\"org\", sort=alt.SortField(\"count\")),\n    y=\"count\",\n    color=\"org\",\n    tooltip=[\"count\", \"org\"],\n).interactive()","position":{"start":{"line":145,"column":1},"end":{"line":154,"column":1}},"key":"UtuGW6Z1J2"}],"key":"CGXgIhAsl5"}],"key":"YbjUSJ4TKr"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Ask Twitter: Why don’t academic researchers use cloud services?","url":"/blog/2022/cloud-services-academia","group":"2022"},"next":{"title":"Install dependencies from GitHub with pyproject.toml or requirements.txt","url":"/blog/2022/install-github-from-pyproject","group":"2022"}}},"domain":"http://localhost:3000"}