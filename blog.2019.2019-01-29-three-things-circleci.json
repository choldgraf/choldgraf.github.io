{"version":1,"kind":"Article","sha256":"a3b82499f45d693a13f222adc719757acb273e4029a1c5401d46317f58125558","slug":"blog.2019.2019-01-29-three-things-circleci","location":"/blog/2019/2019-01-29-three-things-circleci.md","dependencies":[],"frontmatter":{"title":"Three things I love about CircleCI","tags":["CICD","dev ops","software development"],"date":"2019-01-29","content_includes_title":false,"authors":[{"id":"chris","nameParsed":{"literal":"Chris Holdgraf","given":"Chris","family":"Holdgraf"},"name":"Chris Holdgraf","orcid":"0000-0002-2391-0678","affiliations":["affiliations-myst-generated-uid-0","affiliations-myst-generated-uid-1"],"twitter":"choldgraf","github":"choldgraf","url":"https://chrisholdgraf.com"}],"github":"https://github.com/choldgraf/choldgraf.github.io","affiliations":[{"name":"2i2c","url":"https://2i2c.org","id":"affiliations-myst-generated-uid-0"},{"name":"Project Jupyter","url":"https://jupyter.org","id":"affiliations-myst-generated-uid-1"}],"abbreviations":{"LF":"The Linux Foundation","JF":"The Jupyter Foundation","JEC":"Jupyter Executive Council","JFB":"The Jupyter Foundation Board","SSC":"Software Steering Council"},"numbering":{"title":{"offset":2}},"edit_url":"https://github.com/choldgraf/choldgraf.github.io/blob/main/blog/2019/2019-01-29-three-things-circleci.md","exports":[{"format":"md","filename":"2019-01-29-three-things-circleci.md","url":"/build/2019-01-29-three-thi-1a749af3562875af2b1a5132a8b8b69f.md"}]},"mdast":{"type":"root","children":[{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":13,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"text","value":"I recently had to beef up the continuous deployment of Jupyter Book, and used\nit as an opportunity to learn a bit more about CircleCI’s features. It turns out,\nthey’re pretty cool! Here are a few of the things that I learned this time around.","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"KZHDpIpksb"}],"key":"L4yMj3PiIy"},{"type":"paragraph","position":{"start":{"line":17,"column":1},"end":{"line":20,"column":1}},"children":[{"type":"text","value":"For those who aren’t familiar with CircleCI, it is a service that runs Continuous\nIntegration and Continuous Deployment (CI/CD) workflows for projects. This basically\nmeans that they manage many kinds of infrastructure that can launch jobs that run\ntest suites, deploy applications, and test on many different environments.","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"key":"P48yFp2vvT"}],"key":"CA4pvy5JLY"},{"type":"paragraph","position":{"start":{"line":22,"column":1},"end":{"line":22,"column":1}},"children":[{"type":"text","value":"Here are some cool things that I now have a much better appreciation for:","position":{"start":{"line":22,"column":1},"end":{"line":22,"column":1}},"key":"PkJTPInd3k"}],"key":"SUk8awXF4D"},{"type":"heading","depth":2,"position":{"start":{"line":24,"column":1},"end":{"line":24,"column":1}},"children":[{"type":"text","value":"Re-run a job with SSH access","position":{"start":{"line":24,"column":1},"end":{"line":24,"column":1}},"key":"iIasfRZfl6"}],"identifier":"re-run-a-job-with-ssh-access","label":"Re-run a job with SSH access","html_id":"re-run-a-job-with-ssh-access","implicit":true,"key":"GWXcwkd1FC"},{"type":"paragraph","position":{"start":{"line":26,"column":1},"end":{"line":32,"column":1}},"children":[{"type":"text","value":"Often when tests don’t pass or a build otherwise fails, it’s really helpful to be\nable to get into the machine itself and just start poking around. It turns out that\nCircleCI makes this really easy! If a build has failed, then you can use the drop-down\nmenu next to the “Restart Job” button to select “Restart Job with SSH”. The next time\nthe job fails (which it probably will, since you’ve just restarted a job that already\nfailed once), CircleCI will print the IP address and SSH command to connect to that\nmachine remotely.","position":{"start":{"line":26,"column":1},"end":{"line":26,"column":1}},"key":"vaacEktIhZ"}],"key":"XtzzVnqAFw"},{"type":"heading","depth":2,"position":{"start":{"line":34,"column":1},"end":{"line":34,"column":1}},"children":[{"type":"text","value":"Persisting files between jobs with Workspaces","position":{"start":{"line":34,"column":1},"end":{"line":34,"column":1}},"key":"U0sTVRAufI"}],"identifier":"persisting-files-between-jobs-with-workspaces","label":"Persisting files between jobs with Workspaces","html_id":"persisting-files-between-jobs-with-workspaces","implicit":true,"key":"PtXyTWVQoW"},{"type":"paragraph","position":{"start":{"line":36,"column":1},"end":{"line":41,"column":1}},"children":[{"type":"text","value":"Everything CircleCI does is based around containers - each job has a Docker image\nenvironment specified (and CircleCI curates a large list of containers for testing).\nOne challenge this introduces is that it can be more complex to use jobs that have\n","position":{"start":{"line":36,"column":1},"end":{"line":36,"column":1}},"key":"cqi233FSBz"},{"type":"emphasis","position":{"start":{"line":36,"column":1},"end":{"line":36,"column":1}},"children":[{"type":"text","value":"multiple","position":{"start":{"line":36,"column":1},"end":{"line":36,"column":1}},"key":"oIxvG9BJqo"}],"key":"Mi5GsiZqTB"},{"type":"text","value":" languages or tools installed. You can always manually configure this, but\nI’ve found that another easy solution is to split your task across multiple jobs,\nand persist some of the files between them with CircleCI workspaces.","position":{"start":{"line":36,"column":1},"end":{"line":36,"column":1}},"key":"v2gKLHPt4C"}],"key":"vHJ4gLE0A6"},{"type":"paragraph","position":{"start":{"line":43,"column":1},"end":{"line":43,"column":1}},"children":[{"type":"text","value":"To set up a CircleCI workspace, you first need two jobs, then","position":{"start":{"line":43,"column":1},"end":{"line":43,"column":1}},"key":"X4rhTXiN6J"}],"key":"JgQAevJeZB"},{"type":"code","lang":"yaml","value":"jobs:\n  build_files:\n    docker:\n      # We use a Python image to test our files and run the test suite\n      - image: circleci/python:3.6-stretch\n    steps:\n      # Some steps to build files we need in another job\n      # Assume it places the built files into a folder called `_build/`\n      - run: build_stuff_with_python\n\n      # Persist the specified paths (see https://circleci.com/docs/2.0/workflows/#using-workspaces-to-share-data-among-jobs)\n      - persist_to_workspace:\n          # The root of the workspace, here just the CWD\n          root: .\n          # The sub-paths of the workspace to persist\n          paths:\n            - _build/\n\n  deploy_files:\n    docker:\n      # We'll use a Ruby image to deploy our files\n      - image: circleci/ruby:2.6\n    steps:\n      # Connect the files from the last job to this job\n      - attach_workspace:\n          # Must be absolute path or relative path from working_directory\n          at: /tmp/workspace\n\n      # Our final deployment steps\n      - run: deploy_files_with_ruby","position":{"start":{"line":45,"column":1},"end":{"line":76,"column":1}},"key":"apk8f2q09z"},{"type":"paragraph","position":{"start":{"line":78,"column":1},"end":{"line":80,"column":1}},"children":[{"type":"text","value":"Finally, we’ll set up a CircleCI workflow that runs the deployment job only after the\nbuild job as finished, since the deploy job depends on files that are created by the\nbuild job.","position":{"start":{"line":78,"column":1},"end":{"line":78,"column":1}},"key":"GCXYvYqq36"}],"key":"F2ip1DZHQW"},{"type":"code","lang":"yaml","value":"workflows:\n  version: 2\n  default:\n    jobs:\n      - build_files\n      #\n      - deploy_files:\n          requires:\n            - build_files","position":{"start":{"line":82,"column":1},"end":{"line":92,"column":1}},"key":"rpZ9gsyr4b"},{"type":"paragraph","position":{"start":{"line":94,"column":1},"end":{"line":96,"column":1}},"children":[{"type":"text","value":"In this way, we’ve split our task (build a bunch of files, then deploy them online)\ninto two different jobs. One that builds files with a Python container, and another that\ndeploys them with a Ruby container.","position":{"start":{"line":94,"column":1},"end":{"line":94,"column":1}},"key":"GZ3g9V8tOv"}],"key":"ivTGse2ZmP"},{"type":"heading","depth":2,"position":{"start":{"line":98,"column":1},"end":{"line":98,"column":1}},"children":[{"type":"text","value":"Re-use code snippets with Commands","position":{"start":{"line":98,"column":1},"end":{"line":98,"column":1}},"key":"qd8DKpIB6O"}],"identifier":"re-use-code-snippets-with-commands","label":"Re-use code snippets with Commands","html_id":"re-use-code-snippets-with-commands","implicit":true,"key":"pOlRHGNwwI"},{"type":"paragraph","position":{"start":{"line":100,"column":1},"end":{"line":105,"column":1}},"children":[{"type":"text","value":"Finally, many times you’d like to re-use the same set of snippets across multiple\npoints of your CircleCI jobs. In 2.1, CircleCI added a new feature called Commands\nthat does this fairly simply. Commands are kind of like functions in that they\nwrap up a collection of steps that can be re-used and parameterized. This means you\ncan define a “template” of a collection of steps, then fill-in missing fields in that\ntemplate in order to modify its behavior.","position":{"start":{"line":100,"column":1},"end":{"line":100,"column":1}},"key":"Buu6lwcofy"}],"key":"FkAbAoHnTp"},{"type":"paragraph","position":{"start":{"line":107,"column":1},"end":{"line":107,"column":1}},"children":[{"type":"text","value":"For example, here’s a Command template to build a site with Jekyll:","position":{"start":{"line":107,"column":1},"end":{"line":107,"column":1}},"key":"bNt33DupoR"}],"key":"t0DX6OEkjJ"},{"type":"code","lang":"yaml","value":"commands:\n  build_site:\n    description: \"Build the site with Jekyll\"\n    parameters:\n      # We'll define one parameter that lets us pass build arguments to Jekyll build\n      build_args:\n        type: string\n        default: \"\"\n    steps:\n      - run:\n          name: Build the website\n          # Note the << parameters.param >> syntax that lets you define your own inputs\n          command: bundle exec jekyll build << parameters.build_args >>","position":{"start":{"line":109,"column":1},"end":{"line":123,"column":1}},"key":"H4ZnCpBx8n"},{"type":"paragraph","position":{"start":{"line":125,"column":1},"end":{"line":126,"column":1}},"children":[{"type":"text","value":"Now, we can re-use this command throughout our build steps. Here are two jobs that use\nthis command in different ways:","position":{"start":{"line":125,"column":1},"end":{"line":125,"column":1}},"key":"zc14qNoYaz"}],"key":"DsL4fNlFwz"},{"type":"code","lang":"yaml","value":"jobs:\n  # Build the site to store artifacts\n  build_with_params:\n    steps:\n      # Build the site's HTML w/ the base_url for CircleCI artifacts\n      - build_site:\n          build_args: --baseurl /0/html/\n  # Build the site to store artifacts\n  build_without_params:\n    steps:\n      # Build the site's HTML w/ defaults for Jekyll\n      - build_site:\n          build_args: \"\"","position":{"start":{"line":128,"column":1},"end":{"line":142,"column":1}},"key":"YZlv23SZXc"},{"type":"paragraph","position":{"start":{"line":144,"column":1},"end":{"line":145,"column":1}},"children":[{"type":"text","value":"Each of these jobs uses the command specified above in ","position":{"start":{"line":144,"column":1},"end":{"line":144,"column":1}},"key":"ktMD1eMdPF"},{"type":"inlineCode","value":"build_site","position":{"start":{"line":144,"column":1},"end":{"line":144,"column":1}},"key":"Mu0TNm9rTm"},{"type":"text","value":", but\nthey use the ","position":{"start":{"line":144,"column":1},"end":{"line":144,"column":1}},"key":"jLEeBny81o"},{"type":"inlineCode","value":"build_args","position":{"start":{"line":144,"column":1},"end":{"line":144,"column":1}},"key":"e2r2sNlmuw"},{"type":"text","value":" parameter to modify its behavior each time.","position":{"start":{"line":144,"column":1},"end":{"line":144,"column":1}},"key":"LizKaeNEbx"}],"key":"gp2PKJUeAe"}],"key":"jGu65Cx4Op"}],"key":"KV8LSrh4n1"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Build a simple timeline with sphinx-design","url":"/blog/2020/sphinx-design-timeline","group":"2020"},"next":{"title":"Thoughts from the Jupyter team meeting 2019","url":"/blog/2019/2019-03-16-jupyter-dev","group":"2019"}}},"domain":"http://localhost:3000"}