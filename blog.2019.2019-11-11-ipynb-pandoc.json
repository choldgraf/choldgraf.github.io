{"version":1,"kind":"Notebook","sha256":"8b954d7efa9bc575d0d861eb799eb1d2f57756730fd322585ebd5d15232f4380","slug":"blog.2019.2019-11-11-ipynb-pandoc","location":"/blog/2019/2019-11-11-ipynb_pandoc.ipynb","dependencies":[],"frontmatter":{"title":"Testing Pandoc and Jupyter Notebooks","tags":["documentation","pandoc","nbconvert"],"date":"2019-11-11","kernelspec":{"name":"python3","display_name":"Python 3 (ipykernel)","language":"python"},"authors":[{"id":"chris","nameParsed":{"literal":"Chris Holdgraf","given":"Chris","family":"Holdgraf"},"name":"Chris Holdgraf","orcid":"0000-0002-2391-0678","affiliations":["affiliations-myst-generated-uid-0","affiliations-myst-generated-uid-1"],"twitter":"choldgraf","github":"choldgraf","url":"https://chrisholdgraf.com"}],"github":"https://github.com/choldgraf/choldgraf.github.io","affiliations":[{"name":"2i2c","url":"https://2i2c.org","id":"affiliations-myst-generated-uid-0"},{"name":"Project Jupyter","url":"https://jupyter.org","id":"affiliations-myst-generated-uid-1"}],"abbreviations":{"LF":"The Linux Foundation","JF":"The Jupyter Foundation","JEC":"Jupyter Executive Council","JFB":"The Jupyter Foundation Board","SSC":"Software Steering Council"},"numbering":{"title":{"offset":2}},"edit_url":"https://github.com/choldgraf/choldgraf.github.io/blob/main/blog/2019/2019-11-11-ipynb_pandoc.ipynb","exports":[{"format":"ipynb","filename":"2019-11-11-ipynb_pandoc.ipynb","url":"/build/2019-11-11-ipynb_pan-1eb4b34cb93e0c653bd6cd3b3fbc0163.ipynb"}]},"widgets":{"application/vnd.jupyter.widget-state+json":{"state":{},"version_major":2,"version_minor":0}},"mdast":{"type":"root","children":[{"type":"block","children":[{"type":"heading","depth":2,"position":{"start":{"line":36,"column":1},"end":{"line":36,"column":1}},"children":[{"type":"text","value":"Jupyter Notebooks to markdown and html with Pandoc","position":{"start":{"line":36,"column":1},"end":{"line":36,"column":1}},"key":"dQjkElWejP"}],"identifier":"jupyter-notebooks-to-markdown-and-html-with-pandoc","label":"Jupyter Notebooks to markdown and html with Pandoc","html_id":"jupyter-notebooks-to-markdown-and-html-with-pandoc","implicit":true,"key":"nQRYQhlk6k"},{"type":"paragraph","position":{"start":{"line":38,"column":1},"end":{"line":42,"column":1}},"children":[{"type":"text","value":"For several months now, the universal ","position":{"start":{"line":38,"column":1},"end":{"line":38,"column":1}},"key":"EXX5T24A13"},{"type":"link","url":"https://pandoc.org/","position":{"start":{"line":38,"column":1},"end":{"line":38,"column":1}},"children":[{"type":"text","value":"document converter pandoc","position":{"start":{"line":38,"column":1},"end":{"line":38,"column":1}},"key":"f7E1q7JokA"}],"urlSource":"https://pandoc.org/","key":"J0fMZvDbDR"},{"type":"text","value":" has\nhad ","position":{"start":{"line":38,"column":1},"end":{"line":38,"column":1}},"key":"hKHXLqZcjC"},{"type":"link","url":"https://pandoc.org/MANUAL.html#creating-jupyter-notebooks-with-pandoc","position":{"start":{"line":38,"column":1},"end":{"line":38,"column":1}},"children":[{"type":"text","value":"support for Jupyter Notebooks","position":{"start":{"line":38,"column":1},"end":{"line":38,"column":1}},"key":"AyTRTp8xtT"}],"urlSource":"https://pandoc.org/MANUAL.html#creating-jupyter-notebooks-with-pandoc","key":"Yx4dw4hFyn"},{"type":"text","value":". This means that with a single call,\nyou can convert ","position":{"start":{"line":38,"column":1},"end":{"line":38,"column":1}},"key":"jy6cuyIeEu"},{"type":"inlineCode","value":".ipynb","position":{"start":{"line":38,"column":1},"end":{"line":38,"column":1}},"key":"epr4LaG8oQ"},{"type":"text","value":" files to any of the output formats that Pandoc\nsupports (and vice-versa!). This post is a quick exploration of what this\nlooks like.","position":{"start":{"line":38,"column":1},"end":{"line":38,"column":1}},"key":"m4p3UmkW5y"}],"key":"OtvxVle4M8"}],"key":"mkPQ2TOhjj"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Note that for this post, we’re using Pandoc version 2.7.3","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"S0s7PCA750"}],"key":"zKCfYrq5SL"},{"type":"text","value":". Also, some of what’s below is hard\nto interpret without actually opening the files that are created by Pandoc. For the sake\nof this blog post, I’m going to stick with the raw text output here, though you can expand the\noutputs if you wish, I recommend copy/pasting some of these commands on your own if you’d like to try.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ggANc6kPNP"}],"key":"FfSbXwHhnt"}],"key":"TMtSOP9QXD"},{"type":"block","kind":"notebook-code","data":{"tags":["hide_input"]},"children":[{"type":"code","lang":"python","executable":true,"value":"from subprocess import run as sbrun\nfrom subprocess import PIPE, CalledProcessError\nfrom pathlib import Path\nfrom IPython.display import HTML, Markdown\n\n# A helper function to capture errors and outputs\ndef run(cmd, *args, **kwargs):\n    try:\n        out = sbrun(cmd.split(), stderr=PIPE, stdout=PIPE, check=True, *args, **kwargs)\n        out = out.stdout.decode()\n        if len(out) > 1:\n            print(out)\n    except CalledProcessError as e:\n        print(e.stderr.decode())","visibility":"show","key":"PpAT8T8t9m"},{"type":"output","id":"o9SPD9A4NjwsLCnlLKee6","data":[],"visibility":"show","key":"orE0tSSick"}],"visibility":"show","key":"aVTHSHQ8MQ"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Our base notebook","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"eBUQ6LrxI1"}],"identifier":"our-base-notebook","label":"Our base notebook","html_id":"our-base-notebook","implicit":true,"key":"N6H9XDZ3BX"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"First off, let’s take a look at our base notebook. We’ll convert this document\nto both Markdown and HTML using Pandoc.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"X0Ka9VzNjP"}],"key":"AWXw7w0C2i"},{"type":"paragraph","position":{"start":{"line":6,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"The notebook will be fairly minimal\nin order to make it easier to inspect its contents. It has a collection\nof markdown with mixed content, as well as code cells with various outputs.","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"sWBbGERIou"}],"key":"HE8wjn65Yt"},{"type":"paragraph","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"link","url":"/build/notebooks-2f9744ed493410d53f3e7e9db1b3d37c.ipynb","static":true,"children":[{"type":"text","value":"See this link","key":"Ja1hYrdokx"}],"urlSource":"pandoc_ipynb/inputs/notebooks.ipynb","protocol":"file","key":"LuaWlbg0iC"},{"type":"text","value":" for the notebook we’ll use.","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"z49Pe7f5vA"}],"key":"ULehxNxeXu"}],"key":"jENltErmOw"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"inlineCode","value":".ipynb","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"pC3MaBxd5Z"},{"type":"text","value":" to markdown","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"AWIKDauK1W"}],"identifier":"id-ipynb-to-markdown","label":".ipynb to markdown","html_id":"id-ipynb-to-markdown","implicit":true,"key":"DaIXfQ7Sz0"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Let’s try converting this notebook to markdown. This should preserve as much\ninformation as possible about the input Jupyter notebook. This should include\nall markdown cells, cell metadata, and outputs with code cells.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"ttoNrGImnu"}],"key":"tfXCoc0R25"},{"type":"heading","depth":3,"position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"A few pandoc options","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"cU37kifKBB"}],"identifier":"a-few-pandoc-options","label":"A few pandoc options","html_id":"a-few-pandoc-options","implicit":true,"key":"iXR2kxv1C2"},{"type":"paragraph","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"Here are a few pandoc options that are relevant to our use-case:","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"JrRIbpHANH"}],"key":"XspwYDei1g"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":11,"column":1},"end":{"line":18,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":11,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"inlineCode","value":"--resource-path","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"z51yQxDDnQ"},{"type":"text","value":" defines the path where Pandoc will look for resources that are linked in the notebook.\nThis allows us to discover images etc that are in a different folder from where we are invocing ","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"T4PMcEVexa"},{"type":"inlineCode","value":"pandoc","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"dzu5ZUzSkn"},{"type":"text","value":".","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"u60D92t6Vo"}],"key":"onGdzAnGQi"},{"type":"listItem","spread":true,"position":{"start":{"line":13,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"inlineCode","value":"--extract-media","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"jFRUaP4zHA"},{"type":"text","value":" is a path where images and other media will be ","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"BMJBvZvyn1"},{"type":"emphasis","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"text","value":"extracted","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"ZsevqT4SQa"}],"key":"pueGybQ6jr"},{"type":"text","value":" at conversion time. Any links\nto images etc should point to files at this path in the output format.","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"EqW8cmAItI"}],"key":"raTrIqS1E2"},{"type":"listItem","spread":true,"position":{"start":{"line":15,"column":1},"end":{"line":16,"column":1}},"children":[{"type":"inlineCode","value":"-s","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"f6yHxYDjRR"},{"type":"text","value":" (or ","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"bbsXPdfnNH"},{"type":"inlineCode","value":"--standalone","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"muEX6lmuxy"},{"type":"text","value":") tells Pandoc that the output should be a “standalone” format. This does different\nthings depending on the output, such as adding a header if converting to HTML.","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"AH3z3dFHxY"}],"key":"sznzH9Jkrv"},{"type":"listItem","spread":true,"position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"children":[{"type":"inlineCode","value":"-o","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"key":"XJTVxMsEKG"},{"type":"text","value":" the output file, and implicitly the output file type (e.g., markdown)","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"key":"cEy9nfnwGa"}],"key":"yEFcIPyhJb"},{"type":"listItem","spread":true,"position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"children":[{"type":"inlineCode","value":"-t","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"GHT8ZRI0DE"},{"type":"text","value":" the ","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"LAiEicu5hX"},{"type":"emphasis","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"children":[{"type":"text","value":"type","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"votj0fDOoV"}],"key":"NUqBBY0DMS"},{"type":"text","value":" of output file if we want to override the default (e.g., GitHub-flavored markdown vs. Pandoc markdown).","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"J8tJMzEtDV"}],"key":"YvoZ17vaHm"}],"key":"wIPHGa6IK9"}],"key":"QK2DbnvHhW"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Converting to GitHub-flavored markdown","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"RMmUneEJAA"}],"identifier":"converting-to-github-flavored-markdown","label":"Converting to GitHub-flavored markdown","html_id":"converting-to-github-flavored-markdown","implicit":true,"key":"zrpLo870KX"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"Let’s start by converting to GitHub-flavored markdown. By not specifying an output file\nwith ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"F6M7WCJwrR"},{"type":"inlineCode","value":"-o","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"NDxa0ggRL6"},{"type":"text","value":", we’ll cause Pandoc to print the result to the screen, which we’ll display here.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"YI2h4i0WxV"}],"key":"s8Z6W6MKvf"}],"key":"C8SIGFVd7q"},{"type":"block","kind":"notebook-code","data":{"collapsed":true,"jupyter":{"outputs_hidden":true},"tags":["hide_output"]},"children":[{"type":"code","lang":"python","executable":true,"value":"# ipynb -> gfmd\nrun(f'pandoc pandoc_ipynb/inputs/notebooks.ipynb --resource-path=inputs -s --extract-media=outputs/images -t gfm')","visibility":"show","key":"KDmsymPSO6"},{"type":"output","id":"pRbNzx1V0dUSZn7Ci2Cdb","data":[{"name":"stdout","output_type":"stream","text":"<div class=\"cell markdown\">\n\n# Here's a demo notebook\n\nThis is a demo notebook to play around with the pandoc ipynb support\n\n## Markdown\n\nAs it is markdown, you can embed images, HTML, etc into your posts\\!\n\n![](outputs/images/ca17e56d65946db885db7f8f50a9605a6a94e6a7.jpg)\n\nHere's one \\(inline_{math}\\) and\n\n\\[\nmath^{blocks}\n\\]\n\n``` python\ndef my_functino():\n    mystring = \"you can also include python cells\"\n    return mystring\n```\n\n</div>\n\n<div class=\"cell markdown\" data-tags=\"[&quot;heresatag&quot;]\">\n\n# Code cells\n\n## Matplotlib output with metadata\n\nThe below code cell has some metadata attached to it. It also outputs a\nfigure. Both should be included in the output format.\n\n</div>\n\n<div class=\"cell code\" data-execution_count=\"7\" data-slideshow=\"{&quot;slide_type&quot;:&quot;subslide&quot;}\" data-tags=\"[&quot;mytag&quot;,&quot;parameters&quot;]\">\n\n``` python\nfrom matplotlib import rcParams, cycler\nimport matplotlib.pyplot as plt\nimport numpy as np\nplt.ion()\n\ndata = np.random.rand(2, 1000) * 100\nfig, ax = plt.subplots()\nax.scatter(*data, s=data[1], c=data[0])\n```\n\n<div class=\"output execute_result\" data-execution_count=\"7\">\n\n    <matplotlib.collections.PathCollection at 0x7f6e8d6269e8>\n\n</div>\n\n<div class=\"output display_data\">\n\n![](outputs/images/e843a737607d119ec5b2750a2bb737c915f1b6e8.png)\n\n</div>\n\n</div>\n\n<div class=\"cell markdown\">\n\n## DataFrames\n\n</div>\n\n<div class=\"cell code\" data-execution_count=\"8\">\n\n``` python\nimport pandas as pd\npd.DataFrame([['hi', 'there'], ['this', 'is'], ['a', 'DataFrame']], columns=['Word A', 'Word B'])\n```\n\n<div class=\"output execute_result\" data-execution_count=\"8\">\n\n``` \n  Word A     Word B\n0     hi      there\n1   this         is\n2      a  DataFrame\n```\n\n</div>\n\n</div>\n\n<div class=\"cell markdown\">\n\n# Bibliography\n\nLet's test the bibliography here\n\nTesting this \\[bibliography @holdgraf\\_rapid\\_2016\\]\n\n@holdgraf\\_evidence\\_2014\n\n</div>\n\n<div class=\"cell markdown\">\n\n### The actual bibliography\n\nThe bibliography will be placed at the end of the file\n\n</div>\n\n"}],"visibility":"show","key":"WLMzEY8Wxg"}],"visibility":"show","key":"jZEVq0nPfp"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Note that cells are divided by hard-coded ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"OZnGvmkSKG"},{"type":"inlineCode","value":"<div>","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"WGoslEHO2i"},{"type":"text","value":"s, and cell-level metadata (such as tags)\nare encoded within the HTML (e.g. ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"k9nb4vNQun"},{"type":"inlineCode","value":"data-tags","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"uFLUzxvDMM"},{"type":"text","value":"). Also note that we haven’t gotten the bibliography\nto render, probably because we didn’t enable the ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"TRDiX9k8r6"},{"type":"inlineCode","value":"citeproc","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"WWCLCr3cIR"},{"type":"text","value":" processor on pandoc (we’ll try that later).\nFinally, note that there’s no notebook-level metadata in this output because GFM doesn’t support\na YAML header.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ee1pqB4z1P"}],"key":"nEuWhDRovt"}],"key":"cEQaJWcdZt"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"To pandoc-flavored markdown","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"wrUw86SYrQ"}],"identifier":"to-pandoc-flavored-markdown","label":"To pandoc-flavored markdown","html_id":"to-pandoc-flavored-markdown","implicit":true,"key":"XF7EQAOoBM"}],"key":"Uxz4cAcfRO"},{"type":"block","kind":"notebook-code","data":{"collapsed":true,"jupyter":{"outputs_hidden":true},"tags":["hide_output"]},"children":[{"type":"code","lang":"python","executable":true,"value":"# ipynb -> pandoc md\nrun(f'pandoc pandoc_ipynb/inputs/notebooks.ipynb --resource-path=inputs -s --extract-media=outputs/images')","visibility":"show","key":"hN58GGmXjp"},{"type":"output","id":"-z4nRqz1qy2I71H26PMm_","data":[{"name":"stdout","output_type":"stream","text":"<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"\" xml:lang=\"\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"generator\" content=\"pandoc\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" />\n  <title>notebooks</title>\n  <style>\n      code{white-space: pre-wrap;}\n      span.smallcaps{font-variant: small-caps;}\n      span.underline{text-decoration: underline;}\n      div.column{display: inline-block; vertical-align: top; width: 50%;}\n  </style>\n  <style>\ncode.sourceCode > span { display: inline-block; line-height: 1.25; }\ncode.sourceCode > span { color: inherit; text-decoration: inherit; }\ncode.sourceCode > span:empty { height: 1.2em; }\n.sourceCode { overflow: visible; }\ncode.sourceCode { white-space: pre; position: relative; }\ndiv.sourceCode { margin: 1em 0; }\npre.sourceCode { margin: 0; }\n@media screen {\ndiv.sourceCode { overflow: auto; }\n}\n@media print {\ncode.sourceCode { white-space: pre-wrap; }\ncode.sourceCode > span { text-indent: -5em; padding-left: 5em; }\n}\npre.numberSource code\n  { counter-reset: source-line 0; }\npre.numberSource code > span\n  { position: relative; left: -4em; counter-increment: source-line; }\npre.numberSource code > span > a:first-child::before\n  { content: counter(source-line);\n    position: relative; left: -1em; text-align: right; vertical-align: baseline;\n    border: none; display: inline-block;\n    -webkit-touch-callout: none; -webkit-user-select: none;\n    -khtml-user-select: none; -moz-user-select: none;\n    -ms-user-select: none; user-select: none;\n    padding: 0 4px; width: 4em;\n    color: #aaaaaa;\n  }\npre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }\ndiv.sourceCode\n  {   }\n@media screen {\ncode.sourceCode > span > a:first-child::before { text-decoration: underline; }\n}\ncode span.al { color: #ff0000; font-weight: bold; } /* Alert */\ncode span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */\ncode span.at { color: #7d9029; } /* Attribute */\ncode span.bn { color: #40a070; } /* BaseN */\ncode span.bu { } /* BuiltIn */\ncode span.cf { color: #007020; font-weight: bold; } /* ControlFlow */\ncode span.ch { color: #4070a0; } /* Char */\ncode span.cn { color: #880000; } /* Constant */\ncode span.co { color: #60a0b0; font-style: italic; } /* Comment */\ncode span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */\ncode span.do { color: #ba2121; font-style: italic; } /* Documentation */\ncode span.dt { color: #902000; } /* DataType */\ncode span.dv { color: #40a070; } /* DecVal */\ncode span.er { color: #ff0000; font-weight: bold; } /* Error */\ncode span.ex { } /* Extension */\ncode span.fl { color: #40a070; } /* Float */\ncode span.fu { color: #06287e; } /* Function */\ncode span.im { } /* Import */\ncode span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */\ncode span.kw { color: #007020; font-weight: bold; } /* Keyword */\ncode span.op { color: #666666; } /* Operator */\ncode span.ot { color: #007020; } /* Other */\ncode span.pp { color: #bc7a00; } /* Preprocessor */\ncode span.sc { color: #4070a0; } /* SpecialChar */\ncode span.ss { color: #bb6688; } /* SpecialString */\ncode span.st { color: #4070a0; } /* String */\ncode span.va { color: #19177c; } /* Variable */\ncode span.vs { color: #4070a0; } /* VerbatimString */\ncode span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */\n  </style>\n  <!--[if lt IE 9]>\n    <script src=\"//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js\"></script>\n  <![endif]-->\n</head>\n<body>\n<div class=\"cell markdown\">\n<h1 id=\"heres-a-demo-notebook\">Here's a demo notebook</h1>\n<p>This is a demo notebook to play around with the pandoc ipynb support</p>\n<h2 id=\"markdown\">Markdown</h2>\n<p>As it is markdown, you can embed images, HTML, etc into your posts!</p>\n<p><img src=\"outputs/images/ca17e56d65946db885db7f8f50a9605a6a94e6a7.jpg\" /></p>\n<p>Here's one <span class=\"math inline\"><em>i</em><em>n</em><em>l</em><em>i</em><em>n</em><em>e</em><sub><em>m</em><em>a</em><em>t</em><em>h</em></sub></span> and</p>\n<p><br /><span class=\"math display\"><em>m</em><em>a</em><em>t</em><em>h</em><sup><em>b</em><em>l</em><em>o</em><em>c</em><em>k</em><em>s</em></sup></span><br /></p>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb1-1\"><a href=\"#cb1-1\"></a><span class=\"kw\">def</span> my_functino():</span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\"></a>    mystring <span class=\"op\">=</span> <span class=\"st\">&quot;you can also include python cells&quot;</span></span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\"></a>    <span class=\"cf\">return</span> mystring</span></code></pre></div>\n</div>\n<div class=\"cell markdown\" data-tags=\"[&quot;heresatag&quot;]\">\n<h1 id=\"code-cells\">Code cells</h1>\n<h2 id=\"matplotlib-output-with-metadata\">Matplotlib output with metadata</h2>\n<p>The below code cell has some metadata attached to it. It also outputs a figure. Both should be included in the output format.</p>\n</div>\n<div class=\"cell code\" data-execution_count=\"7\" data-slideshow=\"{&quot;slide_type&quot;:&quot;subslide&quot;}\" data-tags=\"[&quot;mytag&quot;,&quot;parameters&quot;]\">\n<div class=\"sourceCode\" id=\"cb2\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb2-1\"><a href=\"#cb2-1\"></a><span class=\"im\">from</span> matplotlib <span class=\"im\">import</span> rcParams, cycler</span>\n<span id=\"cb2-2\"><a href=\"#cb2-2\"></a><span class=\"im\">import</span> matplotlib.pyplot <span class=\"im\">as</span> plt</span>\n<span id=\"cb2-3\"><a href=\"#cb2-3\"></a><span class=\"im\">import</span> numpy <span class=\"im\">as</span> np</span>\n<span id=\"cb2-4\"><a href=\"#cb2-4\"></a>plt.ion()</span>\n<span id=\"cb2-5\"><a href=\"#cb2-5\"></a></span>\n<span id=\"cb2-6\"><a href=\"#cb2-6\"></a>data <span class=\"op\">=</span> np.random.rand(<span class=\"dv\">2</span>, <span class=\"dv\">1000</span>) <span class=\"op\">*</span> <span class=\"dv\">100</span></span>\n<span id=\"cb2-7\"><a href=\"#cb2-7\"></a>fig, ax <span class=\"op\">=</span> plt.subplots()</span>\n<span id=\"cb2-8\"><a href=\"#cb2-8\"></a>ax.scatter(<span class=\"op\">*</span>data, s<span class=\"op\">=</span>data[<span class=\"dv\">1</span>], c<span class=\"op\">=</span>data[<span class=\"dv\">0</span>])</span></code></pre></div>\n<div class=\"output execute_result\" data-execution_count=\"7\">\n<pre><code>&lt;matplotlib.collections.PathCollection at 0x7f6e8d6269e8&gt;</code></pre>\n</div>\n<div class=\"output display_data\">\n<p><img src=\"outputs/images/e843a737607d119ec5b2750a2bb737c915f1b6e8.png\" /></p>\n</div>\n</div>\n<div class=\"cell markdown\">\n<h2 id=\"dataframes\">DataFrames</h2>\n</div>\n<div class=\"cell code\" data-execution_count=\"8\">\n<div class=\"sourceCode\" id=\"cb4\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb4-1\"><a href=\"#cb4-1\"></a><span class=\"im\">import</span> pandas <span class=\"im\">as</span> pd</span>\n<span id=\"cb4-2\"><a href=\"#cb4-2\"></a>pd.DataFrame([[<span class=\"st\">&#39;hi&#39;</span>, <span class=\"st\">&#39;there&#39;</span>], [<span class=\"st\">&#39;this&#39;</span>, <span class=\"st\">&#39;is&#39;</span>], [<span class=\"st\">&#39;a&#39;</span>, <span class=\"st\">&#39;DataFrame&#39;</span>]], columns<span class=\"op\">=</span>[<span class=\"st\">&#39;Word A&#39;</span>, <span class=\"st\">&#39;Word B&#39;</span>])</span></code></pre></div>\n<div class=\"output execute_result\" data-execution_count=\"8\">\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Word A</th>\n      <th>Word B</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>hi</td>\n      <td>there</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>this</td>\n      <td>is</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>a</td>\n      <td>DataFrame</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n</div>\n</div>\n<div class=\"cell markdown\">\n<h1 id=\"bibliography\">Bibliography</h1>\n<p>Let's test the bibliography here</p>\n<p>Testing this [bibliography @holdgraf_rapid_2016]</p>\n<p>@holdgraf_evidence_2014</p>\n</div>\n<div class=\"cell markdown\">\n<h3 id=\"the-actual-bibliography\">The actual bibliography</h3>\n<p>The bibliography will be placed at the end of the file</p>\n</div>\n</body>\n</html>\n\n"}],"visibility":"show","key":"sFPCeLYaU7"}],"visibility":"show","key":"aEhidB6oDM"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Now we’ve got something a little bit cleaner without all the hard-coded HTML. The ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ZPC7p8fiaJ"},{"type":"inlineCode","value":":::","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"VlVdUbNcIm"},{"type":"text","value":" fences\nare how Pandoc-flavored markdown denote different divs, and cell-level metadata is encoded\nsimilar to how GFM worked.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"KbPTWXkSxt"}],"key":"jARV4MdAVI"},{"type":"heading","depth":2,"position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"inlineCode","value":".ipynb","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"VW2LPsoSpG"},{"type":"text","value":" to HTML","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"CdCZwP24xS"}],"identifier":"id-ipynb-to-html","label":".ipynb to HTML","html_id":"id-ipynb-to-html","implicit":true,"key":"zNIIhFuC21"},{"type":"paragraph","position":{"start":{"line":7,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"Next let’s try converting ","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"H9tXG4K4Yl"},{"type":"inlineCode","value":".ipynb","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"cMup4yllno"},{"type":"text","value":" to HTML. This should let us view the notebook as a web-page\nas well as include all of the extra metadata inside the HTML elements. We’ll start with\na vanilla HTML conversion. Note that the only thing we had to do was change the output\nfile extension to ","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"LO2IpZ12jn"},{"type":"inlineCode","value":".html","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"k21dON1kgw"},{"type":"text","value":" and Pandoc inferred the output type for us:","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"kYk4rS77Xv"}],"key":"iRBzJhVjkr"}],"key":"OEk4Z5ojNs"},{"type":"block","kind":"notebook-code","data":{"collapsed":true,"jupyter":{"outputs_hidden":true},"tags":["hide_output"]},"children":[{"type":"code","lang":"python","executable":true,"value":"# ipynb -> HTML\nrun(f'pandoc pandoc_ipynb/inputs/notebooks.ipynb --resource-path=inputs -s --extract-media=outputs/images')","visibility":"show","key":"KDvLyTLO9X"},{"type":"output","id":"azf6pw6N_0JSUE4GZhGqs","data":[{"name":"stdout","output_type":"stream","text":"<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"\" xml:lang=\"\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"generator\" content=\"pandoc\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" />\n  <title>notebooks</title>\n  <style>\n      code{white-space: pre-wrap;}\n      span.smallcaps{font-variant: small-caps;}\n      span.underline{text-decoration: underline;}\n      div.column{display: inline-block; vertical-align: top; width: 50%;}\n  </style>\n  <style>\ncode.sourceCode > span { display: inline-block; line-height: 1.25; }\ncode.sourceCode > span { color: inherit; text-decoration: inherit; }\ncode.sourceCode > span:empty { height: 1.2em; }\n.sourceCode { overflow: visible; }\ncode.sourceCode { white-space: pre; position: relative; }\ndiv.sourceCode { margin: 1em 0; }\npre.sourceCode { margin: 0; }\n@media screen {\ndiv.sourceCode { overflow: auto; }\n}\n@media print {\ncode.sourceCode { white-space: pre-wrap; }\ncode.sourceCode > span { text-indent: -5em; padding-left: 5em; }\n}\npre.numberSource code\n  { counter-reset: source-line 0; }\npre.numberSource code > span\n  { position: relative; left: -4em; counter-increment: source-line; }\npre.numberSource code > span > a:first-child::before\n  { content: counter(source-line);\n    position: relative; left: -1em; text-align: right; vertical-align: baseline;\n    border: none; display: inline-block;\n    -webkit-touch-callout: none; -webkit-user-select: none;\n    -khtml-user-select: none; -moz-user-select: none;\n    -ms-user-select: none; user-select: none;\n    padding: 0 4px; width: 4em;\n    color: #aaaaaa;\n  }\npre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }\ndiv.sourceCode\n  {   }\n@media screen {\ncode.sourceCode > span > a:first-child::before { text-decoration: underline; }\n}\ncode span.al { color: #ff0000; font-weight: bold; } /* Alert */\ncode span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */\ncode span.at { color: #7d9029; } /* Attribute */\ncode span.bn { color: #40a070; } /* BaseN */\ncode span.bu { } /* BuiltIn */\ncode span.cf { color: #007020; font-weight: bold; } /* ControlFlow */\ncode span.ch { color: #4070a0; } /* Char */\ncode span.cn { color: #880000; } /* Constant */\ncode span.co { color: #60a0b0; font-style: italic; } /* Comment */\ncode span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */\ncode span.do { color: #ba2121; font-style: italic; } /* Documentation */\ncode span.dt { color: #902000; } /* DataType */\ncode span.dv { color: #40a070; } /* DecVal */\ncode span.er { color: #ff0000; font-weight: bold; } /* Error */\ncode span.ex { } /* Extension */\ncode span.fl { color: #40a070; } /* Float */\ncode span.fu { color: #06287e; } /* Function */\ncode span.im { } /* Import */\ncode span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */\ncode span.kw { color: #007020; font-weight: bold; } /* Keyword */\ncode span.op { color: #666666; } /* Operator */\ncode span.ot { color: #007020; } /* Other */\ncode span.pp { color: #bc7a00; } /* Preprocessor */\ncode span.sc { color: #4070a0; } /* SpecialChar */\ncode span.ss { color: #bb6688; } /* SpecialString */\ncode span.st { color: #4070a0; } /* String */\ncode span.va { color: #19177c; } /* Variable */\ncode span.vs { color: #4070a0; } /* VerbatimString */\ncode span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */\n  </style>\n  <!--[if lt IE 9]>\n    <script src=\"//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js\"></script>\n  <![endif]-->\n</head>\n<body>\n<div class=\"cell markdown\">\n<h1 id=\"heres-a-demo-notebook\">Here's a demo notebook</h1>\n<p>This is a demo notebook to play around with the pandoc ipynb support</p>\n<h2 id=\"markdown\">Markdown</h2>\n<p>As it is markdown, you can embed images, HTML, etc into your posts!</p>\n<p><img src=\"outputs/images/ca17e56d65946db885db7f8f50a9605a6a94e6a7.jpg\" /></p>\n<p>Here's one <span class=\"math inline\"><em>i</em><em>n</em><em>l</em><em>i</em><em>n</em><em>e</em><sub><em>m</em><em>a</em><em>t</em><em>h</em></sub></span> and</p>\n<p><br /><span class=\"math display\"><em>m</em><em>a</em><em>t</em><em>h</em><sup><em>b</em><em>l</em><em>o</em><em>c</em><em>k</em><em>s</em></sup></span><br /></p>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb1-1\"><a href=\"#cb1-1\"></a><span class=\"kw\">def</span> my_functino():</span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\"></a>    mystring <span class=\"op\">=</span> <span class=\"st\">&quot;you can also include python cells&quot;</span></span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\"></a>    <span class=\"cf\">return</span> mystring</span></code></pre></div>\n</div>\n<div class=\"cell markdown\" data-tags=\"[&quot;heresatag&quot;]\">\n<h1 id=\"code-cells\">Code cells</h1>\n<h2 id=\"matplotlib-output-with-metadata\">Matplotlib output with metadata</h2>\n<p>The below code cell has some metadata attached to it. It also outputs a figure. Both should be included in the output format.</p>\n</div>\n<div class=\"cell code\" data-execution_count=\"7\" data-slideshow=\"{&quot;slide_type&quot;:&quot;subslide&quot;}\" data-tags=\"[&quot;mytag&quot;,&quot;parameters&quot;]\">\n<div class=\"sourceCode\" id=\"cb2\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb2-1\"><a href=\"#cb2-1\"></a><span class=\"im\">from</span> matplotlib <span class=\"im\">import</span> rcParams, cycler</span>\n<span id=\"cb2-2\"><a href=\"#cb2-2\"></a><span class=\"im\">import</span> matplotlib.pyplot <span class=\"im\">as</span> plt</span>\n<span id=\"cb2-3\"><a href=\"#cb2-3\"></a><span class=\"im\">import</span> numpy <span class=\"im\">as</span> np</span>\n<span id=\"cb2-4\"><a href=\"#cb2-4\"></a>plt.ion()</span>\n<span id=\"cb2-5\"><a href=\"#cb2-5\"></a></span>\n<span id=\"cb2-6\"><a href=\"#cb2-6\"></a>data <span class=\"op\">=</span> np.random.rand(<span class=\"dv\">2</span>, <span class=\"dv\">1000</span>) <span class=\"op\">*</span> <span class=\"dv\">100</span></span>\n<span id=\"cb2-7\"><a href=\"#cb2-7\"></a>fig, ax <span class=\"op\">=</span> plt.subplots()</span>\n<span id=\"cb2-8\"><a href=\"#cb2-8\"></a>ax.scatter(<span class=\"op\">*</span>data, s<span class=\"op\">=</span>data[<span class=\"dv\">1</span>], c<span class=\"op\">=</span>data[<span class=\"dv\">0</span>])</span></code></pre></div>\n<div class=\"output execute_result\" data-execution_count=\"7\">\n<pre><code>&lt;matplotlib.collections.PathCollection at 0x7f6e8d6269e8&gt;</code></pre>\n</div>\n<div class=\"output display_data\">\n<p><img src=\"outputs/images/e843a737607d119ec5b2750a2bb737c915f1b6e8.png\" /></p>\n</div>\n</div>\n<div class=\"cell markdown\">\n<h2 id=\"dataframes\">DataFrames</h2>\n</div>\n<div class=\"cell code\" data-execution_count=\"8\">\n<div class=\"sourceCode\" id=\"cb4\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb4-1\"><a href=\"#cb4-1\"></a><span class=\"im\">import</span> pandas <span class=\"im\">as</span> pd</span>\n<span id=\"cb4-2\"><a href=\"#cb4-2\"></a>pd.DataFrame([[<span class=\"st\">&#39;hi&#39;</span>, <span class=\"st\">&#39;there&#39;</span>], [<span class=\"st\">&#39;this&#39;</span>, <span class=\"st\">&#39;is&#39;</span>], [<span class=\"st\">&#39;a&#39;</span>, <span class=\"st\">&#39;DataFrame&#39;</span>]], columns<span class=\"op\">=</span>[<span class=\"st\">&#39;Word A&#39;</span>, <span class=\"st\">&#39;Word B&#39;</span>])</span></code></pre></div>\n<div class=\"output execute_result\" data-execution_count=\"8\">\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Word A</th>\n      <th>Word B</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>hi</td>\n      <td>there</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>this</td>\n      <td>is</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>a</td>\n      <td>DataFrame</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n</div>\n</div>\n<div class=\"cell markdown\">\n<h1 id=\"bibliography\">Bibliography</h1>\n<p>Let's test the bibliography here</p>\n<p>Testing this [bibliography @holdgraf_rapid_2016]</p>\n<p>@holdgraf_evidence_2014</p>\n</div>\n<div class=\"cell markdown\">\n<h3 id=\"the-actual-bibliography\">The actual bibliography</h3>\n<p>The bibliography will be placed at the end of the file</p>\n</div>\n</body>\n</html>\n\n"}],"visibility":"show","key":"uR7SEs8j52"}],"visibility":"show","key":"kNunLKtJEA"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"This time our math rendered properly, along with everything else except for the\nbibliography. Let’s get that working now.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"cvLWosL08D"}],"key":"zUq2M9ncPR"},{"type":"paragraph","position":{"start":{"line":4,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"We’ve included a bibliography with our input file. With this (and using the\n","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"sCmgy8CZqf"},{"type":"link","url":"https://pandoc.org/demo/example19/Extension-citations.html","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"citeproc citation style","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"eEzy2GavyL"}],"urlSource":"https://pandoc.org/demo/example19/Extension-citations.html","key":"G1kmU5798z"},{"type":"text","value":", we can use ","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"n5yorvS72T"},{"type":"inlineCode","value":"pandoc-citeproc","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"LTBVLPLjLr"},{"type":"text","value":" to automatically render a\nbibliography within each page. To do so, we’ve used the following extra options:","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"W7MjMTKG96"}],"key":"ZxcdJ60NpO"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":8,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"inlineCode","value":"--bibliography","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"kjzhXBCb4J"},{"type":"text","value":" specifies the path to a BibTex file","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"Uslhgk2PP5"}],"key":"sG9J2R7Z4b"},{"type":"listItem","spread":true,"position":{"start":{"line":9,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"inlineCode","value":"-f ipynb+citations","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"DE3tlgSasZ"},{"type":"text","value":" tells Pandoc that our ","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"AcOek8gTNf"},{"type":"emphasis","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"input","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"qIa0Q7BOk0"}],"key":"VDjrnqMWub"},{"type":"text","value":" format has citations in it. Before, the ","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"kpqixFPPJi"},{"type":"inlineCode","value":"ipynb","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"vEft61kaGK"},{"type":"text","value":" was\ninferred from the input extension. Now we’ve made it explicit as well.","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"vHvWMnhifS"}],"key":"wNDsu47AyY"}],"key":"vzBBO6425l"}],"key":"No2sfpJfkB"},{"type":"block","kind":"notebook-code","data":{"collapsed":true,"jupyter":{"outputs_hidden":true},"tags":["hide_output"]},"children":[{"type":"code","lang":"python","executable":true,"value":"# ipynb -> HTML with citations\nrun(f'pandoc pandoc_ipynb/inputs/notebooks.ipynb -f ipynb+citations --bibliography pandoc_ipynb/inputsreferences.bib --resource-path=inputs -s --extract-media=outputs/images')","visibility":"show","key":"CvGMbxFu4T"},{"type":"output","id":"6XLchEYwdXdS0p4TW9bYi","data":[{"name":"stdout","output_type":"stream","text":"<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"\" xml:lang=\"\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"generator\" content=\"pandoc\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" />\n  <title>notebooks</title>\n  <style>\n      code{white-space: pre-wrap;}\n      span.smallcaps{font-variant: small-caps;}\n      span.underline{text-decoration: underline;}\n      div.column{display: inline-block; vertical-align: top; width: 50%;}\n  </style>\n  <style>\ncode.sourceCode > span { display: inline-block; line-height: 1.25; }\ncode.sourceCode > span { color: inherit; text-decoration: inherit; }\ncode.sourceCode > span:empty { height: 1.2em; }\n.sourceCode { overflow: visible; }\ncode.sourceCode { white-space: pre; position: relative; }\ndiv.sourceCode { margin: 1em 0; }\npre.sourceCode { margin: 0; }\n@media screen {\ndiv.sourceCode { overflow: auto; }\n}\n@media print {\ncode.sourceCode { white-space: pre-wrap; }\ncode.sourceCode > span { text-indent: -5em; padding-left: 5em; }\n}\npre.numberSource code\n  { counter-reset: source-line 0; }\npre.numberSource code > span\n  { position: relative; left: -4em; counter-increment: source-line; }\npre.numberSource code > span > a:first-child::before\n  { content: counter(source-line);\n    position: relative; left: -1em; text-align: right; vertical-align: baseline;\n    border: none; display: inline-block;\n    -webkit-touch-callout: none; -webkit-user-select: none;\n    -khtml-user-select: none; -moz-user-select: none;\n    -ms-user-select: none; user-select: none;\n    padding: 0 4px; width: 4em;\n    color: #aaaaaa;\n  }\npre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }\ndiv.sourceCode\n  {   }\n@media screen {\ncode.sourceCode > span > a:first-child::before { text-decoration: underline; }\n}\ncode span.al { color: #ff0000; font-weight: bold; } /* Alert */\ncode span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */\ncode span.at { color: #7d9029; } /* Attribute */\ncode span.bn { color: #40a070; } /* BaseN */\ncode span.bu { } /* BuiltIn */\ncode span.cf { color: #007020; font-weight: bold; } /* ControlFlow */\ncode span.ch { color: #4070a0; } /* Char */\ncode span.cn { color: #880000; } /* Constant */\ncode span.co { color: #60a0b0; font-style: italic; } /* Comment */\ncode span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */\ncode span.do { color: #ba2121; font-style: italic; } /* Documentation */\ncode span.dt { color: #902000; } /* DataType */\ncode span.dv { color: #40a070; } /* DecVal */\ncode span.er { color: #ff0000; font-weight: bold; } /* Error */\ncode span.ex { } /* Extension */\ncode span.fl { color: #40a070; } /* Float */\ncode span.fu { color: #06287e; } /* Function */\ncode span.im { } /* Import */\ncode span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */\ncode span.kw { color: #007020; font-weight: bold; } /* Keyword */\ncode span.op { color: #666666; } /* Operator */\ncode span.ot { color: #007020; } /* Other */\ncode span.pp { color: #bc7a00; } /* Preprocessor */\ncode span.sc { color: #4070a0; } /* SpecialChar */\ncode span.ss { color: #bb6688; } /* SpecialString */\ncode span.st { color: #4070a0; } /* String */\ncode span.va { color: #19177c; } /* Variable */\ncode span.vs { color: #4070a0; } /* VerbatimString */\ncode span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */\n  </style>\n  <!--[if lt IE 9]>\n    <script src=\"//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js\"></script>\n  <![endif]-->\n</head>\n<body>\n<div class=\"cell markdown\">\n<h1 id=\"heres-a-demo-notebook\">Here's a demo notebook</h1>\n<p>This is a demo notebook to play around with the pandoc ipynb support</p>\n<h2 id=\"markdown\">Markdown</h2>\n<p>As it is markdown, you can embed images, HTML, etc into your posts!</p>\n<p><img src=\"outputs/images/ca17e56d65946db885db7f8f50a9605a6a94e6a7.jpg\" /></p>\n<p>Here's one <span class=\"math inline\"><em>i</em><em>n</em><em>l</em><em>i</em><em>n</em><em>e</em><sub><em>m</em><em>a</em><em>t</em><em>h</em></sub></span> and</p>\n<p><br /><span class=\"math display\"><em>m</em><em>a</em><em>t</em><em>h</em><sup><em>b</em><em>l</em><em>o</em><em>c</em><em>k</em><em>s</em></sup></span><br /></p>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb1-1\"><a href=\"#cb1-1\"></a><span class=\"kw\">def</span> my_functino():</span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\"></a>    mystring <span class=\"op\">=</span> <span class=\"st\">&quot;you can also include python cells&quot;</span></span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\"></a>    <span class=\"cf\">return</span> mystring</span></code></pre></div>\n</div>\n<div class=\"cell markdown\" data-tags=\"[&quot;heresatag&quot;]\">\n<h1 id=\"code-cells\">Code cells</h1>\n<h2 id=\"matplotlib-output-with-metadata\">Matplotlib output with metadata</h2>\n<p>The below code cell has some metadata attached to it. It also outputs a figure. Both should be included in the output format.</p>\n</div>\n<div class=\"cell code\" data-execution_count=\"7\" data-slideshow=\"{&quot;slide_type&quot;:&quot;subslide&quot;}\" data-tags=\"[&quot;mytag&quot;,&quot;parameters&quot;]\">\n<div class=\"sourceCode\" id=\"cb2\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb2-1\"><a href=\"#cb2-1\"></a><span class=\"im\">from</span> matplotlib <span class=\"im\">import</span> rcParams, cycler</span>\n<span id=\"cb2-2\"><a href=\"#cb2-2\"></a><span class=\"im\">import</span> matplotlib.pyplot <span class=\"im\">as</span> plt</span>\n<span id=\"cb2-3\"><a href=\"#cb2-3\"></a><span class=\"im\">import</span> numpy <span class=\"im\">as</span> np</span>\n<span id=\"cb2-4\"><a href=\"#cb2-4\"></a>plt.ion()</span>\n<span id=\"cb2-5\"><a href=\"#cb2-5\"></a></span>\n<span id=\"cb2-6\"><a href=\"#cb2-6\"></a>data <span class=\"op\">=</span> np.random.rand(<span class=\"dv\">2</span>, <span class=\"dv\">1000</span>) <span class=\"op\">*</span> <span class=\"dv\">100</span></span>\n<span id=\"cb2-7\"><a href=\"#cb2-7\"></a>fig, ax <span class=\"op\">=</span> plt.subplots()</span>\n<span id=\"cb2-8\"><a href=\"#cb2-8\"></a>ax.scatter(<span class=\"op\">*</span>data, s<span class=\"op\">=</span>data[<span class=\"dv\">1</span>], c<span class=\"op\">=</span>data[<span class=\"dv\">0</span>])</span></code></pre></div>\n<div class=\"output execute_result\" data-execution_count=\"7\">\n<pre><code>&lt;matplotlib.collections.PathCollection at 0x7f6e8d6269e8&gt;</code></pre>\n</div>\n<div class=\"output display_data\">\n<p><img src=\"outputs/images/e843a737607d119ec5b2750a2bb737c915f1b6e8.png\" /></p>\n</div>\n</div>\n<div class=\"cell markdown\">\n<h2 id=\"dataframes\">DataFrames</h2>\n</div>\n<div class=\"cell code\" data-execution_count=\"8\">\n<div class=\"sourceCode\" id=\"cb4\"><pre class=\"sourceCode python\"><code class=\"sourceCode python\"><span id=\"cb4-1\"><a href=\"#cb4-1\"></a><span class=\"im\">import</span> pandas <span class=\"im\">as</span> pd</span>\n<span id=\"cb4-2\"><a href=\"#cb4-2\"></a>pd.DataFrame([[<span class=\"st\">&#39;hi&#39;</span>, <span class=\"st\">&#39;there&#39;</span>], [<span class=\"st\">&#39;this&#39;</span>, <span class=\"st\">&#39;is&#39;</span>], [<span class=\"st\">&#39;a&#39;</span>, <span class=\"st\">&#39;DataFrame&#39;</span>]], columns<span class=\"op\">=</span>[<span class=\"st\">&#39;Word A&#39;</span>, <span class=\"st\">&#39;Word B&#39;</span>])</span></code></pre></div>\n<div class=\"output execute_result\" data-execution_count=\"8\">\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Word A</th>\n      <th>Word B</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>hi</td>\n      <td>there</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>this</td>\n      <td>is</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>a</td>\n      <td>DataFrame</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n</div>\n</div>\n<div class=\"cell markdown\">\n<h1 id=\"bibliography\">Bibliography</h1>\n<p>Let's test the bibliography here</p>\n<p>Testing this <span class=\"citation\" data-cites=\"holdgraf_rapid_2016\">(bibliography Holdgraf et al. 2016)</span></p>\n<p><span class=\"citation\" data-cites=\"holdgraf_evidence_2014\">Holdgraf et al. (2014)</span></p>\n</div>\n<div class=\"cell markdown\">\n<h3 id=\"the-actual-bibliography\">The actual bibliography</h3>\n<p>The bibliography will be placed at the end of the file</p>\n</div>\n<div id=\"refs\" class=\"references\" role=\"doc-bibliography\">\n<div id=\"ref-holdgraf_evidence_2014\">\n<p>Holdgraf, Christopher Ramsay, Wendy de Heer, Brian N. Pasley, and Robert T. Knight. 2014. “Evidence for Predictive Coding in Human Auditory Cortex.” In <em>International Conference on Cognitive Neuroscience</em>. Brisbane, Australia, Australia: Frontiers in Neuroscience.</p>\n</div>\n<div id=\"ref-holdgraf_rapid_2016\">\n<p>Holdgraf, Christopher Ramsay, Wendy de Heer, Brian N. Pasley, Jochem W. Rieger, Nathan Crone, Jack J. Lin, Robert T. Knight, and Frédéric E. Theunissen. 2016. “Rapid Tuning Shifts in Human Auditory Cortex Enhance Speech Intelligibility.” <em>Nature Communications</em> 7 (May): 13654. <a href=\"https://doi.org/10.1038/ncomms13654\">https://doi.org/10.1038/ncomms13654</a>.</p>\n</div>\n</div>\n</body>\n</html>\n\n"}],"visibility":"show","key":"GmSxRo8ujR"}],"visibility":"show","key":"bGdcA14Zml"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Now we’ve got citations at the bottom of the page, and in-line references interspersed\nin the text. Pretty cool!","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"wJUresgRaV"}],"key":"Zec9PdC2OD"}],"key":"SWbVwme9WX"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Wrapping up","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"BbOKaiq8Z5"}],"identifier":"wrapping-up","label":"Wrapping up","html_id":"wrapping-up","implicit":true,"key":"ZGn5P05kpo"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"It seems like we can get pretty far with converting ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"SGaCgH2ndi"},{"type":"inlineCode","value":".ipynb","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"oR1G1T8nby"},{"type":"text","value":" files into\nvarious flavors of markdown or HTML. My guess is that things will get a bit\ntrickier if we tried to do this with more complex cell outputs or metdata,\nbut it’s a good start. Using Pandoc also means that it would be relatively\nstraightforward to convert notebooks into ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"qgzJfYAVk6"},{"type":"strong","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"latex","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"Fg5Kcyqtkx"}],"key":"c6oz6AtedY"},{"type":"text","value":", ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"HaSlfby7Hm"},{"type":"strong","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"pdf","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"Z7Zv2bOxD0"}],"key":"dpjl91SU26"},{"type":"text","value":", or even ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"oa1OEaglQX"},{"type":"strong","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Microsoft Word","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"Ufc3K3vAfw"}],"key":"MmVrnBd9Z4"},{"type":"text","value":"\nformat. I’ll try to dig into this more in the future.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"iMGzqfIW0I"}],"key":"Yrm7hodn1w"}],"key":"b040cKk5ev"}],"key":"nlAMy4bvhr"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"What would Python-style governance look like in Jupyter?","url":"/blog/2019/2019-10-27-jupyter-governance-python","group":"2019"},"next":{"title":"Automatically mirror a github repository with CircleCI","url":"/blog/2018/circlci-github","group":"2018"}}},"domain":"http://localhost:3000"}