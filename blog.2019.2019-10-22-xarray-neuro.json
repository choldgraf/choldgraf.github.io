{"kind":"Notebook","sha256":"a87840b6b6f9d5b677027ab959b5f9f4f77873f0c340c5eb8c82d7587d065eee","slug":"blog.2019.2019-10-22-xarray-neuro","location":"/blog/2019/2019-10-22-xarray-neuro.ipynb","dependencies":[],"frontmatter":{"title":"Analyzing intracranial electrophysiology data with xarray","tags":["analysis","neuroscience","xarray","open source"],"date":"2019-10-22","kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"content_includes_title":false,"github":"https://github.com/choldgraf/choldgraf.github.io","exports":[{"format":"ipynb","filename":"2019-10-22-xarray-neuro.ipynb","url":"/build/2019-10-22-xarray-ne-5059d812aebc17da6c753a19e083531b.ipynb"}]},"widgets":{"application/vnd.jupyter.widget-state+json":{"state":{},"version_major":2,"version_minor":0},"date":"2019-10-22","redirect":"xarray-explore-ieeg","tags":["analysis","neuroscience","xarray","open source"]},"mdast":{"type":"root","children":[{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":29,"column":1},"end":{"line":32,"column":1}},"children":[{"type":"text","value":"Over the last few years, it has been exciting to see the xarray project evolve,\nadd new functionality, and mature. This post is an attempt at\ngiving xarray another visit to see how it could integrate into electrophysiology\nworkflows.","position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"key":"ylzvdwbzws"}],"key":"B5yjCiX9pY"},{"type":"heading","depth":3,"position":{"start":{"line":34,"column":1},"end":{"line":34,"column":1}},"children":[{"type":"text","value":"A quick background on our data","position":{"start":{"line":34,"column":1},"end":{"line":34,"column":1}},"key":"hfu6kL4lBK"}],"identifier":"a-quick-background-on-our-data","label":"A quick background on our data","html_id":"a-quick-background-on-our-data","implicit":true,"key":"EMU1WDT5Bn"},{"type":"paragraph","position":{"start":{"line":36,"column":1},"end":{"line":40,"column":1}},"children":[{"type":"text","value":"It is common in neuroscience to ask individuals to perform a task over and over again. You record\nthe activity in the brain each time they perform the task (called an “epoch” or a “trial”).\nTime is recorded relative to some ","position":{"start":{"line":36,"column":1},"end":{"line":36,"column":1}},"key":"Ocv3y77USo"},{"type":"emphasis","position":{"start":{"line":36,"column":1},"end":{"line":36,"column":1}},"children":[{"type":"text","value":"onset","position":{"start":{"line":36,"column":1},"end":{"line":36,"column":1}},"key":"Cey02ZdgQY"}],"key":"bwnRt98Oek"},{"type":"text","value":" when the task begins. That is ","position":{"start":{"line":36,"column":1},"end":{"line":36,"column":1}},"key":"afZwpN993o"},{"type":"inlineCode","value":"t==0","position":{"start":{"line":36,"column":1},"end":{"line":36,"column":1}},"key":"gx6tb8Jo8v"},{"type":"text","value":". The result\nis usually a matrix of ","position":{"start":{"line":36,"column":1},"end":{"line":36,"column":1}},"key":"Y1MlkZYL96"},{"type":"inlineCode","value":"epochs x channejupyls x time","position":{"start":{"line":36,"column":1},"end":{"line":36,"column":1}},"key":"tx55TBYSiX"},{"type":"text","value":". You can do a lot of stuff with this\ndata, but our task in this paper is to detect changes in neural activity at trial onset (","position":{"start":{"line":36,"column":1},"end":{"line":36,"column":1}},"key":"PbtxNh7kLj"},{"type":"inlineCode","value":"t==0","position":{"start":{"line":36,"column":1},"end":{"line":36,"column":1}},"key":"NDtLgDAzev"},{"type":"text","value":").","position":{"start":{"line":36,"column":1},"end":{"line":36,"column":1}},"key":"xklIXdjdsN"}],"key":"YYDSXRAkpl"},{"type":"paragraph","position":{"start":{"line":42,"column":1},"end":{"line":48,"column":1}},"children":[{"type":"text","value":"In our case, we’ve got a small dataset from ","position":{"start":{"line":42,"column":1},"end":{"line":42,"column":1}},"key":"mvbFguYH7T"},{"type":"cite","url":"https://www.frontiersin.org/articles/10.3389/fnsys.2017.00061/full","position":{"start":{"line":42,"column":1},"end":{"line":42,"column":1}},"children":[{"type":"text","value":"an old paper of mine","position":{"start":{"line":42,"column":1},"end":{"line":42,"column":1}},"key":"zZBDKa26Tk"}],"kind":"narrative","label":"Holdgraf_2017","identifier":"https://www.frontiersin.org/articles/10.3389/fnsys.2017.00061/full","enumerator":"1","key":"tkswE2aC7y"},{"type":"text","value":".\nThe repository contains\nseveral tutorial notebooks and sample data to describe predictive modeling\nin cognitive neuroscience. ","position":{"start":{"line":42,"column":1},"end":{"line":42,"column":1}},"key":"U5sDolrbXF"},{"type":"link","url":"https://github.com/choldgraf/paper-encoding_decoding_electrophysiology","position":{"start":{"line":42,"column":1},"end":{"line":42,"column":1}},"children":[{"type":"text","value":"You can find the repository here","position":{"start":{"line":42,"column":1},"end":{"line":42,"column":1}},"key":"q9JliIfKqL"}],"urlSource":"https://github.com/choldgraf/paper-encoding_decoding_electrophysiology","error":true,"key":"GXp35WNkzX"},{"type":"text","value":". The task that individuals were performing was passively\nlistening to spoken sentences through a speaker. While they did this, we recorded electrical\nactivity at the surface of their brain (these were surgical patients, and had implanted electrodes\nunder their scalp).","position":{"start":{"line":42,"column":1},"end":{"line":42,"column":1}},"key":"FHHYfAU2wE"}],"key":"RWfYUdHQU1"},{"type":"paragraph","position":{"start":{"line":50,"column":1},"end":{"line":53,"column":1}},"children":[{"type":"text","value":"In the ","position":{"start":{"line":50,"column":1},"end":{"line":50,"column":1}},"key":"XR88RYCIf8"},{"type":"link","url":"https://github.com/choldgraf/paper-encoding_decoding_electrophysiology/blob/master/notebooks/FeatureExtraction.ipynb","position":{"start":{"line":50,"column":1},"end":{"line":50,"column":1}},"children":[{"type":"text","value":"Feature Extraction","position":{"start":{"line":50,"column":1},"end":{"line":50,"column":1}},"key":"w5p41z8cUa"}],"urlSource":"https://github.com/choldgraf/paper-encoding_decoding_electrophysiology/blob/master/notebooks/FeatureExtraction.ipynb","data":{"kind":"file","org":"choldgraf","repo":"paper-encoding_decoding_electrophysiology","reference":"master","file":"notebooks/FeatureExtraction.ipynb","raw":"https://raw.githubusercontent.com/choldgraf/paper-encoding_decoding_electrophysiology/master/notebooks/FeatureExtraction.ipynb"},"internal":false,"protocol":"github","key":"beluNLEa3J"},{"type":"text","value":" notebook,\nI covered how to do some simple data manipulation and feature extraction with\ntimeseries analysis. Let’s try to re-create some of the main steps in that tutorial,\nbut now using xarray as an in-memory structure for our data.","position":{"start":{"line":50,"column":1},"end":{"line":50,"column":1}},"key":"Aoyr2jdlMe"}],"key":"Xap0MYv0DB"}],"key":"s7ESRXPVoJ"},{"type":"block","kind":"notebook-content","data":{"tags":["popout"]},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Note","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"QswoVNihCH"}],"key":"AdGtOjq2CC"},{"type":"text","value":": The goal here is to learn a bit about xarray moreso than to discuss\necog modeling, so I’ll spend more time talking about my thoughts on the various\nfunctions/methods/etc in Xarray than talking about neuroscience.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"JrdQ2CD6lo"}],"key":"CRbpcmu1mo"}],"visibility":"show","key":"f487PhHMf5"},{"type":"block","kind":"notebook-content","data":{"toc-hr-collapsed":false},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"In this post, we’ll perform a few common processing and extraction steps.\nThe goal is to do a few munging operations that require manipulating data\nand visualizing simple statistics.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Ndkf23IRO7"}],"key":"RzFL8g20uX"}],"key":"NLNEXQUMWm"},{"type":"block","kind":"notebook-code","data":{"tags":["hide_input"]},"children":[{"type":"code","lang":"python","executable":true,"value":"# Imports we'll use later\nimport mne\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom download import download\nimport os\nfrom sklearn.preprocessing import scale\nimport xarray as xr\nxr.set_options(display_style=\"html\")\n\nimport warnings\nwarnings.simplefilter('ignore')\n%matplotlib inline","visibility":"show","key":"fC9nJv4MO0"},{"type":"output","id":"A6Rt_OMUhbxLShrVLV-JJ","data":[],"visibility":"show","key":"H9uQhxnZns"}],"visibility":"show","key":"HF51xQXYLB"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"We’ll load the data from my GitHub repository (probably not the most efficient\nway to store or retrieve the data, but hey, this was 3 years ago :-) ).","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"LKcZQN2Rwn"}],"key":"mNH1by7Vxb"}],"key":"aOKz9U6k7X"},{"type":"block","kind":"notebook-code","data":{"tags":["remove_output"]},"children":[{"type":"code","lang":"python","executable":true,"value":"url_epochs = \"https://github.com/choldgraf/paper-encoding_decoding_electrophysiology/blob/master/raw_data/ecog-epo.fif?raw=true\"\n\npath_data = download(url_epochs, './ecog-epo.fif', replace=True)\necog = mne.read_epochs(path_data, preload=True)\nos.remove(path_data)","visibility":"show","key":"SvlpXIz7zr"},{"type":"output","id":"Ac9fUBMK8u1PfipwvhNHZ","data":[{"name":"stderr","output_type":"stream","text":"file_sizes:   0%|                                   | 0.00/8.36M [00:00<?, ?B/s]"},{"name":"stdout","output_type":"stream","text":"Downloading data from https://raw.githubusercontent.com/choldgraf/paper-encoding_decoding_electrophysiology/master/raw_data/ecog-epo.fif?raw=true (8.0 MB)\n\n"},{"name":"stderr","output_type":"stream","text":"file_sizes: 100%|██████████████████████████| 8.36M/8.36M [00:00<00:00, 12.5MB/s]"},{"name":"stdout","output_type":"stream","text":"Successfully downloaded file to ./ecog-epo.fif\nReading ./ecog-epo.fif ...\n"},{"name":"stderr","output_type":"stream","text":"\n"},{"name":"stdout","output_type":"stream","text":"Isotrak not found\n    Found the data of interest:\n        t =   -1500.00 ...    5996.67 ms\n        0 CTF compensation matrices available\n29 matching events found\nNo baseline correction applied\nNot setting metadata\n0 projection items activated\n"}],"visibility":"show","key":"pfnYboWuRT"}],"visibility":"show","key":"bUiXzFV4s5"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"Here’s what the raw data looks like - each horizontal line is electrical activity\nin a channel over time. The faint vertical green lines show the onset of\neach trial (they are concatenated together, but in reality there’s a bit of time\nbetween trials). This will be one of the last times we use MNE hopefully.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"TjeznY5BNR"}],"key":"jyMUw0THHI"}],"key":"FcmFMsuqXU"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"_ = ecog.plot(scalings='auto', n_epochs=5, n_channels=10)","key":"b5lFW4Q8zl"},{"type":"output","id":"A2SuuNn8WZp5GHa7z1FL8","data":[{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"fc24837c97da2d130f181274745e4ae0","path":"/build/fc24837c97da2d130f181274745e4ae0.png"},"text/plain":{"content":"<Figure size 480x320 with 5 Axes>","content_type":"text/plain"}}}],"key":"JyYGgux6S4"}],"key":"P04nm9oMg3"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Converting to xarray","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"eJJ63fimog"}],"identifier":"converting-to-xarray","label":"Converting to xarray","html_id":"converting-to-xarray","implicit":true,"key":"ong0Uf09NI"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"First off, we’ll define a helper function that\nconverts the MNE Epochs object into an xarray DataArray object.\nDataArrays provide an N-Dimensional representation of data, but with\nthe option to include a lot of extra metadata.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"Xwk7jBMdm9"}],"key":"jaWPv5ftyB"},{"type":"paragraph","position":{"start":{"line":8,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"DataArrays are useful because you can include information\n","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"tnpIn1gwqa"},{"type":"emphasis","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"about each dimension","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"ovZY439iUQ"}],"key":"cM0m0Sm5tD"},{"type":"text","value":" of the data. For example, we can tell our\nDataArray the name, values, and units of each dimension. In this case,\nin our case one dimension is “time” so we can label it as such.","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"IhAQRQU548"}],"key":"VxW4BgvWbJ"}],"key":"a0XOQflhtQ"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"def epochs_to_dataarray(epochs):\n    \"\"\"A simple function to convert an Epochs object to DataArray\"\"\"\n    da = xr.DataArray(\n    epochs._data,\n    dims=['epoch', 'channel', 'time'],\n    coords={\n        'time': ecog.times,\n        'channel': ecog.ch_names,\n        'epoch': range(ecog._data.shape[0])\n    },\n    name='Sample dataset',\n    attrs=dict(ecog.info)\n    )\n    return da","key":"sWNCFvHFM6"},{"type":"output","id":"6HyHWT_dSH4Bkpwn07afZ","data":[],"key":"pxymdgWwaV"}],"key":"HGsbCdhgJm"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Just look at all the metadata that we were able to pack into the DataArray.\nAlmost all of MNE’s metadata fit nicely into ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"fryOWB6uQD"},{"type":"inlineCode","value":".attrs","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Ca0ve1DLlB"},{"type":"text","value":".","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"m6RAvP20p4"}],"key":"mVpzVlijwv"}],"key":"ueY3Z3Pyt2"},{"type":"block","kind":"notebook-code","data":{"tags":["hide_output"]},"children":[{"type":"code","lang":"python","executable":true,"value":"# There's quite a lot of output, so keep scrolling down!\nda = epochs_to_dataarray(ecog)\nda","visibility":"show","key":"hqcPWdnNmb"},{"type":"output","id":"VCmGo0uyqgGAEs1wGMXtt","data":[{"output_type":"execute_result","execution_count":22,"metadata":{},"data":{"text/html":{"content_type":"text/html","hash":"a760fe95ea5bfe6bf4775eed437092ce","path":"/build/a760fe95ea5bfe6bf4775eed437092ce.html"},"text/plain":{"content":"<xarray.DataArray 'Sample dataset' (epoch: 29, channel: 32, time: 2250)>\narray([[[-118.10999298, -121.30046844, -117.64116669, ...,\n           20.78869057,   11.38018703,    8.12319088],\n        [-126.95540619, -120.84265137, -105.75999451, ...,\n           25.57149315,   28.6223793 ,   24.82316971],\n        [ -28.1061306 ,  -16.39686775,  -21.64873505, ...,\n          -31.78049469,  -24.28160286,  -25.21776772],\n        ...,\n        [  18.55451965,   22.87419701,   25.66038895, ...,\n           25.84903336,   19.71798515,   14.92882633],\n        [ -44.79590607,  -49.5848465 ,  -52.08906555, ...,\n          -48.92469025,  -54.11177826,  -60.23026276],\n        [-105.09076691, -108.88887024, -113.57571411, ...,\n           -3.28264022,    5.5660615 ,   13.18798733]],\n\n       [[  20.84839821,   18.30262566,   20.12442017, ...,\n          -19.40711594,  -18.51371574,  -20.21596718],\n        [  18.0386982 ,    5.35804272,   -6.45382166, ...,\n          -42.1801033 ,  -44.59093857,  -47.80654144],\n        [  76.62892914,   73.66176605,   64.21563721, ...,\n          -12.31007576,  -21.26686478,  -26.83379555],\n        ...,\n        [  58.06867599,   53.49727631,   51.89107895, ...,\n           42.84626007,   52.36317062,   55.75439453],\n        [ -24.79452324,  -18.58691406,   -8.12459183, ...,\n          -45.95447159,  -42.66623306,  -41.06335449],\n        [-110.1750946 , -101.40830994,  -88.24209595, ...,\n          -26.7741375 ,  -32.31249619,  -37.07465744]],\n\n       [[  44.85819626,   57.10462952,   68.87900543, ...,\n           13.73396015,   28.33650208,   40.76254654],\n        [  10.10721684,   19.94246101,   31.81379509, ...,\n          120.01114655,  119.50100708,  128.0358429 ],\n        [ -96.35434723,  -89.9883194 ,  -72.41400909, ...,\n          140.28143311,  131.52635193,  133.30158997],\n        ...,\n        [   1.81244755,   -1.55214143,   -2.54425907, ...,\n          -30.9526062 ,  -31.50832367,  -32.25312042],\n        [  44.95462799,   38.7992363 ,   33.4192009 , ...,\n           64.5262146 ,   62.74245834,   61.11261368],\n        [ -37.66891861,  -37.9514122 ,  -40.97248077, ...,\n           61.204319  ,   58.57411194,   56.27007675]],\n\n       ...,\n\n       [[  88.75709534,   83.42398071,   76.10377502, ...,\n          -23.7650528 ,  -23.43914986,  -19.55894852],\n        [  63.89505005,   63.79450226,   61.43893433, ...,\n          -54.35200119,  -59.907547  ,  -69.36830139],\n        [  39.31270599,   46.15828705,   51.12403107, ...,\n          -30.19447899,  -27.1382637 ,  -19.75760651],\n        ...,\n        [  -2.09485602,  -13.05238819,  -19.73264503, ...,\n          150.31195068,  129.28895569,  114.28322601],\n        [-142.40054321, -142.72599792, -140.20773315, ...,\n           90.81705475,   82.73035431,   77.06429291],\n        [-161.34713745, -160.04364014, -151.092453  , ...,\n          238.87109375,  230.41633606,  222.64045715]],\n\n       [[  67.85353088,   72.97834778,   70.99682617, ...,\n           99.13801575,   95.14775085,   86.59616089],\n        [ 169.86994934,  172.12055969,  173.22143555, ...,\n          132.95147705,  135.66346741,  141.64862061],\n        [  80.4973526 ,   77.63601685,   73.43898773, ...,\n           91.37036896,   84.76886749,   82.48825836],\n        ...,\n        [ -13.24606895,   -8.65564728,    6.53395557, ...,\n         -105.62326813, -104.58720398, -107.99065399],\n        [  22.20972443,   49.33536148,   85.349823  , ...,\n         -103.54721069, -102.84375   , -104.26371002],\n        [ -33.03855133,   -9.5574255 ,   10.97984695, ...,\n         -148.20103455, -148.95999146, -154.4241333 ]],\n\n       [[ -98.52385712,  -99.22042847,  -99.56749725, ...,\n           49.72173309,   41.6667099 ,   31.01161194],\n        [ -70.90259552,  -66.83739471,  -68.66448975, ...,\n           35.73180008,   33.55708694,   28.1260643 ],\n        [ -29.78354645,  -34.5358963 ,  -40.23687363, ...,\n          -39.39603043,  -42.75005341,  -50.70994186],\n        ...,\n        [ 110.57292175,  103.35498047,   95.09171295, ...,\n         -162.01602173, -164.45585632, -168.76620483],\n        [  38.4355278 ,   39.19929504,   43.87767792, ...,\n         -108.41282654, -106.09828949, -103.17415619],\n        [  98.9158783 ,  105.16780853,  116.0725174 , ...,\n         -105.856987  , -105.39962769, -102.4755249 ]]])\nCoordinates:\n  * time     (time) float64 -1.5 -1.497 -1.493 -1.49 ... 5.987 5.99 5.993 5.997\n  * channel  (channel) <U5 'ch_0' 'ch_1' 'ch_2' ... 'ch_29' 'ch_30' 'ch_31'\n  * epoch    (epoch) int64 0 1 2 3 4 5 6 7 8 9 ... 19 20 21 22 23 24 25 26 27 28\nAttributes:\n    file_id:             {'version': 65539, 'machid': array([808661043, 80866...\n    events:              []\n    hpi_results:         []\n    hpi_meas:            []\n    subject_info:        None\n    device_info:         None\n    helium_info:         None\n    hpi_subsystem:       None\n    proc_history:        []\n    meas_id:             {'version': 65539, 'machid': array([808661043, 80866...\n    experimenter:        None\n    description:         None\n    proj_id:             None\n    proj_name:           None\n    meas_date:           (0, 0)\n    utc_offset:          None\n    sfreq:               300.0\n    highpass:            0.0\n    lowpass:             500.0\n    line_freq:           None\n    gantry_angle:        None\n    chs:                 [{'scanno': 1, 'logno': 1, 'kind': 902, 'range': 1.0...\n    dev_head_t:          <Transform  |  MEG device->head>\\n[[1. 0. 0. 0.]\\n [...\n    ctf_head_t:          None\n    dev_ctf_t:           None\n    dig:                 []\n    bads:                []\n    ch_names:            ['ch_0', 'ch_1', 'ch_2', 'ch_3', 'ch_4', 'ch_5', 'ch...\n    nchan:               32\n    projs:               []\n    comps:               []\n    acq_pars:            None\n    acq_stim:            None\n    custom_ref_applied:  False\n    xplotter_layout:     None\n    kit_system_id:       None","content_type":"text/plain"}}}],"visibility":"show","key":"MmCnPMyCYp"}],"visibility":"show","key":"h1NA5IETAD"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"The data consists of many trials, channels, and timepoints.\nLet’s start by selecting a time region within each trial that\nwe can visualize more cleanly.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"rYg6zMNQGq"}],"key":"fMo3YHKzpp"},{"type":"heading","depth":2,"position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Subsetting out data with ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"PpV2kaaWXk"},{"type":"inlineCode","value":"da.sel","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"tuLsqaFQEc"}],"identifier":"subsetting-out-data-with-da-sel","label":"Subsetting out data with da.sel","html_id":"subsetting-out-data-with-da-sel","implicit":true,"key":"s78gyViM1a"},{"type":"paragraph","position":{"start":{"line":7,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"In xarray, we select items with the ","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"dZ158gv1KA"},{"type":"inlineCode","value":"sel","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"fHNHWt8lOu"},{"type":"text","value":" and ","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"lc6elMxLFX"},{"type":"inlineCode","value":"isel","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"ckm9teDiXX"},{"type":"text","value":" method. This\nbehaves kind of like the pandas ","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"TrdZ1CgJwi"},{"type":"inlineCode","value":"loc","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"cT2S3VX2EH"},{"type":"text","value":" and ","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"Yqlx0bmFCW"},{"type":"inlineCode","value":"iloc","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"Uri86EolTn"},{"type":"text","value":" methods, however\nbecause we have named dimensions, we can directly specify them in\nour call.","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"v0gc8k6JIL"}],"key":"yIiC4NvBVg"}],"key":"H4yENOZC9e"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"# We'll drop a subset of timepoints for visualization\nda = da.sel(time=slice(-1, 3))","key":"w3arcVtqW2"},{"type":"output","id":"5PbtAGpJt34UjWFnmHG7-","data":[],"key":"VHsIsEbQFq"}],"key":"hIhUcCnhAv"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Now let’s calculate the average across all epochs for each electrode/time point.\nThis is a ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"htNxFJzyYU"},{"type":"strong","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"reduction","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"AAcEb5SbCN"}],"key":"ZLjGMXUN6u"},{"type":"text","value":" of our data array, in that it reduces the number of dimensions.\nXarray has many of the same statistical methods that NumPy does. An interesting\ntwist is that you can specify named dimensions instead of simply an ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Ov7icVfiYs"},{"type":"inlineCode","value":"axis=<integer>","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"rKl0iIKTQ5"},{"type":"text","value":"\nargument. In addition, we’ll choose the colors that we’ll use for cycling through\nour channels - because we can quickly reference the channels axis by name, we don’t\nneed to remember which axis corresponds to channels.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"L5bwpuVu6a"}],"key":"IkK2l96fSe"}],"key":"Cdh3WPscnZ"},{"type":"block","kind":"notebook-code","data":{"tags":["full_width"]},"children":[{"type":"code","lang":"python","executable":true,"value":"fig, ax = plt.subplots(figsize=(15, 5))\nn_channels = da['channel'].shape[0]\nax.set_prop_cycle(color=plt.cm.viridis(np.linspace(0, 1, n_channels)))\nda.mean(dim='epoch').plot.line(x='time', hue='channel')\nax.get_legend().remove()","visibility":"show","key":"bTyL1G9GcY"},{"type":"output","id":"0hdd4c_dPvBHWu6HyMxp3","data":[{"output_type":"display_data","metadata":{"needs_background":"light"},"data":{"image/png":{"content_type":"image/png","hash":"d2a005471e8a3037ad4047456d195f42","path":"/build/d2a005471e8a3037ad4047456d195f42.png"},"text/plain":{"content":"<Figure size 1080x360 with 1 Axes>","content_type":"text/plain"}}}],"visibility":"show","key":"ibdbw9LISL"}],"visibility":"show","key":"Qd7ZkA6vij"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"It doesn’t look like much is going on...let’s see if we can clean it up a bit.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"fIF8kMTdo5"}],"key":"vJeeAXdowu"}],"key":"HykBfUDv4Y"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"De-meaning the data with ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"a5Ubj1R8MC"},{"type":"inlineCode","value":"da.where","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"wro7RGcTZ6"}],"identifier":"de-meaning-the-data-with-da-where","label":"De-meaning the data with da.where","html_id":"de-meaning-the-data-with-da-where","implicit":true,"key":"GG0hzanXo0"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"First off - we’ll subtract the “pre-baseline mean” from each trial.\nThis makes it easier to visualize how each channel’s activity ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"ra059ybwJA"},{"type":"emphasis","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"changed","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"v1K0FfiNdS"}],"key":"GAGFtTLsaI"},{"type":"text","value":"\nat time == 0.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"SMaR0Otavz"}],"key":"SALBBF187v"},{"type":"paragraph","position":{"start":{"line":7,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"To accomplish this we’ll use ","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"m5yTGPFBIb"},{"type":"inlineCode","value":"da.where","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"vPtGGrpjjt"},{"type":"text","value":". This takes some kind of\nboolean-style mask, does a bunch of clever projections according to the\nnames of coordinates, and returns the dataarray masked values removed\n(as ","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"bRtHVbIzkJ"},{"type":"inlineCode","value":"NaN","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"go6DLxbFDg"},{"type":"text","value":"s) and other values unchanged. We can use this to calculate the\nmean of each channel / epoch ","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"NKivCyJvkU"},{"type":"emphasis","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"only for the pre-baseline timepoints","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"rKuuiqBsA9"}],"key":"ffckT0zUXj"},{"type":"text","value":".","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"BlcqpSMlNt"}],"key":"f4L8Io4DSY"}],"key":"KkAcSsty4c"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"# This returns a version of the data array with NaNs where the query is False\n# The dimensions will intelligently broadcast \nprebaseline_mean = da.where(da.time < 0).mean(dim='time')\nda_demeaned = da - prebaseline_mean","key":"OnT3ALRn4C"},{"type":"output","id":"2Sh9YH1q6uT4Hq_hXh5xL","data":[],"key":"OtFMOrKwDx"}],"key":"ZwdU2AbTtQ"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Now we can visualize the de-baseline-meaned data","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"R8r0VqT08C"}],"key":"bi01yW15xA"}],"key":"oQBgXEgN6f"},{"type":"block","kind":"notebook-code","data":{"tags":["full_width"]},"children":[{"type":"code","lang":"python","executable":true,"value":"fig, ax = plt.subplots(figsize=(15, 5))\nax.set_prop_cycle(color=plt.cm.viridis(np.linspace(0, 1, da['channel'].shape[0])))\nda_demeaned.mean(dim='epoch').plot.line(x='time', hue='channel')\nax.get_legend().remove()","visibility":"show","key":"yUBBlP8rqZ"},{"type":"output","id":"wm2ez6rIYI4q9Q8EcC-kq","data":[{"output_type":"display_data","metadata":{"needs_background":"light"},"data":{"image/png":{"content_type":"image/png","hash":"353af84f275a78ecad4d82e77d4e808b","path":"/build/353af84f275a78ecad4d82e77d4e808b.png"},"text/plain":{"content":"<Figure size 1080x360 with 1 Axes>","content_type":"text/plain"}}}],"visibility":"show","key":"vr7C0b0Qtw"}],"visibility":"show","key":"gDQRhAxgwq"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Hmmm, there still doesn’t seem to be much going on (that channel down\nat the bottom looks noisy to me, rather than having a meaningful signal)\nso let’s transform this signal into something with a bit more SNR to it.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"WI6Pn04KmT"}],"key":"CbJ5Eo2mTU"}],"key":"pJl9R7byMo"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Extracting a more useful feature with ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"PffSiPpXdu"},{"type":"inlineCode","value":"xr.apply_ufunc","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"PAkKzVqsWl"}],"identifier":"extracting-a-more-useful-feature-with-xr-apply-ufunc","label":"Extracting a more useful feature with xr.apply_ufunc","html_id":"extracting-a-more-useful-feature-with-xr-apply-ufunc","implicit":true,"key":"EWWmuQRdJc"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Without going into too much details on the neuroscience, iEEG data is\nparticularly useful because there is information about neuronal activity in\nthe higher frequency parts of the signal (AKA, parts of the electrical signal that\nchange very quickly, but have very low amplitude). To pull that out, we’ll do the following:","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"lnLv6vbpl1"}],"key":"tMf0g0gK94"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":8,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"High-pass filter the signal, which will remove all the slow-moving components","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"t7aMgVv4od"}],"key":"nvUpXwG5Ea"},{"type":"listItem","spread":true,"position":{"start":{"line":9,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"Calculate the ","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"cGoGR1kaT3"},{"type":"emphasis","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"envelope","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"OE3vOZ5ZJz"}],"key":"ZmioRRWLqX"},{"type":"text","value":" of the signal, which will tell us the power of\nhigh-frequency activity over time.","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"LsGcvRYx7W"}],"key":"Bc0jAUdNeP"}],"key":"lKwK85ehlw"},{"type":"heading","depth":3,"position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"text","value":"High-pass filtering the signal","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"ou326ypEPD"}],"identifier":"high-pass-filtering-the-signal","label":"High-pass filtering the signal","html_id":"high-pass-filtering-the-signal","implicit":true,"key":"ojNsqMNTX8"},{"type":"paragraph","position":{"start":{"line":14,"column":1},"end":{"line":18,"column":1}},"children":[{"type":"text","value":"MNE has a lot of nice functions for filtering a timeseries. Most of these\noperate on numpy arrays instead of MNE objects. We’ll use\nxarray’s ","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"WQB8H8tv2Z"},{"type":"inlineCode","value":"apply_ufunc","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"yC5A7xsxx0"},{"type":"text","value":" function to simply map that function onto our dataarray.\nxarray should keep track of the metadata (e.g. coordinates etc) and output a\nnew DataArray with updated values.","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"vRN3Dv4PAz"}],"key":"ctIlLS4ScO"}],"key":"Df44eXE6Dp"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"flow = 80\nfhigh = 140\nda_lowpass = xr.apply_ufunc(\n    mne.filter.filter_data, da,\n   kwargs=dict(\n       sfreq=da.sfreq,\n       l_freq=flow,\n       h_freq=fhigh,\n   )\n)","key":"KQ0e9eYwXk"},{"type":"output","id":"JZJl52wZCXFhrxpeJPEnM","data":[{"name":"stdout","output_type":"stream","text":"Setting up band-pass filter from 80 - 1.4e+02 Hz\n\nFIR filter parameters\n---------------------\nDesigning a one-pass, zero-phase, non-causal bandpass filter:\n- Windowed time-domain design (firwin) method\n- Hamming window with 0.0194 passband ripple and 53 dB stopband attenuation\n- Lower passband edge: 80.00\n- Lower transition bandwidth: 20.00 Hz (-6 dB cutoff frequency: 70.00 Hz)\n- Upper passband edge: 140.00 Hz\n- Upper transition bandwidth: 10.00 Hz (-6 dB cutoff frequency: 145.00 Hz)\n- Filter length: 99 samples (0.330 sec)\n\n"}],"key":"q5YFfx26c6"}],"key":"fHeCMtDSIg"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Visualizing our data, we can see all the slower fluctuations (e.g. long arcs over time)\nare gone.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"EBOph6e2LT"}],"key":"viTnwTXPly"}],"key":"rpgARefhLP"},{"type":"block","kind":"notebook-code","data":{"tags":["full_width"]},"children":[{"type":"code","lang":"python","executable":true,"value":"fig, ax = plt.subplots(figsize=(15, 5))\nda_lowpass.mean(dim='epoch').plot.line(x='time')\nax.get_legend().remove()","visibility":"show","key":"e867PGzaaT"},{"type":"output","id":"jiSysjRm3OLezZUOcz2lk","data":[{"output_type":"display_data","metadata":{"needs_background":"light"},"data":{"image/png":{"content_type":"image/png","hash":"8d4f3353e4f30638468ea9b2683d3bb4","path":"/build/8d4f3353e4f30638468ea9b2683d3bb4.png"},"text/plain":{"content":"<Figure size 1080x360 with 1 Axes>","content_type":"text/plain"}}}],"visibility":"show","key":"ondQATOihI"}],"visibility":"show","key":"CkzwxApQ7m"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Calculate the envelope of this signal with ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"DxH60V0NBD"},{"type":"inlineCode","value":"da.groupby","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Uh6WLqiZC1"}],"identifier":"calculate-the-envelope-of-this-signal-with-da-groupby","label":"Calculate the envelope of this signal with da.groupby","html_id":"calculate-the-envelope-of-this-signal-with-da-groupby","implicit":true,"key":"XXyVIs18DC"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Next, we’ll calculate the ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"Hjq9xlQcve"},{"type":"strong","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"envelope","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"REQWhwACTh"}],"key":"hUjPQZsvNm"},{"type":"text","value":" of the high-pass-filtered data. This is roughly\nthe ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"K65RLDY4Ay"},{"type":"strong","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"power","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"JvX05RQic9"}],"key":"b5KGNVsA2I"},{"type":"text","value":" that is present in these high frequencies over time. We do so by using\nsomething called a ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"MG6zt4zWN1"},{"type":"strong","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"hilbert transform","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"uhjmFEMGzn"}],"key":"hKA0Ximy0P"},{"type":"text","value":".","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"azCO4Yddqj"}],"key":"mk4ejQHvpK"},{"type":"paragraph","position":{"start":{"line":7,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"MNE also has a function for applying Hilbert transforms to data, but it has a weird quirk\nthat expects the data to be of a particular shape. We can work around this by using our\nDataArray’s ","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"et6oEvjDH9"},{"type":"inlineCode","value":"groupby","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"aKS6tVq20J"},{"type":"text","value":" method. This works similar to ","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"lAFss2v4TN"},{"type":"inlineCode","value":"DataFrame.groupby","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"CC8LYRc4OB"},{"type":"text","value":" - we’ll iterate\nthrough each channel, which will return a DataArray with shape ","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"ES0GHEPxtQ"},{"type":"inlineCode","value":"epochs x timepoints","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"aSfuon4Hfe"},{"type":"text","value":".\nWe can then calculate the Hilbert transform in each and re-combine into the original shape.","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"elrZPqpwhs"}],"key":"MhSGEqisbx"}],"key":"BljWqX4RBB"},{"type":"block","kind":"notebook-content","data":{"tags":["popout"]},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"strong","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Note","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"WfqghZ6L4t"}],"key":"sfgWX0yE9E"},{"type":"text","value":": This can be an expensive operation depending on the number of channels/epochs and\nthe length of each trial. This might be a good place to insert paralellization via Dask.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"iD8TGC42zq"}],"key":"b6EQ6xoVZM"}],"visibility":"show","key":"CBM0ZkReAW"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"def hilbert_2d(array):\n    \"\"\"Perform a Hilbert transforms on an (n_channels, n_times) array.\"\"\"\n    for ii, channel in enumerate(array):\n        array[ii] = mne.filter._my_hilbert(channel, envelope=True)\n    return array\n\nda_hf_power = da_lowpass.groupby(da.coords['epoch']).apply(hilbert_2d)","key":"jzhY9AOgzV"},{"type":"output","id":"u5Gx1lP5N5n0R0Rj5LZIq","data":[],"key":"ZiaMC3noil"}],"key":"w2ew3kGFHr"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"The output dataarray should be the exact same shape, because we haven’t done any dimensional reductions.\nIf we take a look at the resulting data, we can see what seems to be more structure in there:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"lNvwPkEe5B"}],"key":"Zi5ysonbuq"}],"key":"AEVkEG54Dp"},{"type":"block","kind":"notebook-code","data":{"tags":["full_width"]},"children":[{"type":"code","lang":"python","executable":true,"value":"fig, ax = plt.subplots(figsize=(15, 5))\nda_hf_power.mean(dim='epoch').plot.line(x='time', hue='channel')\nax.get_legend().remove()","visibility":"show","key":"fiZXojSPzD"},{"type":"output","id":"qNjLQrTHbqHFT5Vpw8Uti","data":[{"output_type":"display_data","metadata":{"needs_background":"light"},"data":{"image/png":{"content_type":"image/png","hash":"bd0b6ea1aadfee7a494630159662ad6b","path":"/build/bd0b6ea1aadfee7a494630159662ad6b.png"},"text/plain":{"content":"<Figure size 1080x360 with 1 Axes>","content_type":"text/plain"}}}],"visibility":"show","key":"yqIDpF5X1A"}],"visibility":"show","key":"KzwMtzAk8s"},{"type":"block","kind":"notebook-content","data":{"toc-hr-collapsed":false},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Cleaning up our HFA data","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"xEfeAuj6pL"}],"identifier":"cleaning-up-our-hfa-data","label":"Cleaning up our HFA data","html_id":"cleaning-up-our-hfa-data","implicit":true,"key":"BD75MFGOBt"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Next let’s clean up this high-frequency activity (HFA) data.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"UNm2EsFmsV"}],"key":"RiJ9h1O07C"}],"key":"zaEvn5XdSe"},{"type":"block","kind":"notebook-content","data":{"toc-hr-collapsed":false},"children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Z-scoring our array","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"qQzlGQLX1f"}],"identifier":"z-scoring-our-array","label":"Z-scoring our array","html_id":"z-scoring-our-array","implicit":true,"key":"KzZscgEYA5"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Instead of simple de-meaning\nthe data like before, we’ll ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"ehhLkUwY6E"},{"type":"strong","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"re-scale","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"dkEEemX3Ba"}],"key":"Hq1fUa1HKD"},{"type":"text","value":" our data using the same baseline timepoints.\nWhat we’d like to do is the following:","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"RQuzt2fIdv"}],"key":"OrKF9kLbDi"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":7,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Calculate the mean and standard deviation across trials of all pre-baseline data values, per channel","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"kfUfJcff6m"}],"key":"hoMMr5LO13"},{"type":"listItem","spread":true,"position":{"start":{"line":8,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"Z-score each channel using this mean and standard deviation","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"pGaU6VgTwW"}],"key":"CBLuK8wgke"}],"key":"FSUfq1JbUc"},{"type":"paragraph","position":{"start":{"line":10,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"Once again we’ll use the groupby / apply combination to apply our function to subsets\nof the data.","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"r0QLZjneGm"}],"key":"ScCmLRaFj7"}],"key":"K7IQxRwsBp"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"# For each channel, apply a z-score that uses the mean/std of pre-baseline activity for all trials\ndef z_score(activity):\n    \"\"\"Take a DataArray and apply a z-score using the baseline\"\"\"\n    baseline = activity.where(activity.time < -.1 )\n    return (activity - np.nanmean(baseline)) / np.nanstd(baseline)\n\nda_hf_zscored = da_hf_power.groupby('channel').apply(z_score)","key":"ACBAv4P6RR"},{"type":"output","id":"Td_WRGp1sswZD0xwUrWC0","data":[],"key":"mUgokVXPcu"}],"key":"HKZvVY70FP"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Taking a look at the result, we can see a much cleaner separation of activity for\nsome of the channels after ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"neE4kXl18Z"},{"type":"inlineCode","value":"time==0","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"oawjlkbpsi"},{"type":"text","value":".","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"zFEYJ1gzWH"}],"key":"q7PvXHoJPA"}],"key":"YjOVGtg4go"},{"type":"block","kind":"notebook-code","data":{"tags":["full_width"]},"children":[{"type":"code","lang":"python","executable":true,"value":"fig, ax = plt.subplots(figsize=(15, 5))\nda_hf_zscored.mean(dim='epoch').plot.line(x='time', hue='channel')\nax.get_legend().remove()","visibility":"show","key":"V88rEcH0Tb"},{"type":"output","id":"hlxVm40CPJVCTwfvuuZTL","data":[{"output_type":"display_data","metadata":{"needs_background":"light"},"data":{"image/png":{"content_type":"image/png","hash":"6fa8536695567fa2cfa95d3ab343e1a2","path":"/build/6fa8536695567fa2cfa95d3ab343e1a2.png"},"text/plain":{"content":"<Figure size 1080x360 with 1 Axes>","content_type":"text/plain"}}}],"visibility":"show","key":"JCUVfeCM9f"}],"visibility":"show","key":"q393fTaTMC"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Smoothing our HFA data","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"ETneJYONmC"}],"identifier":"smoothing-our-hfa-data","label":"Smoothing our HFA data","html_id":"smoothing-our-hfa-data","implicit":true,"key":"i11E7rSOlL"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"Finally, let’s smooth this HFA so it has less jitter to it, and pick a smaller window that\nremoves some of the filtering artifacts at the edges.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"H0Yqg6dKIU"}],"key":"V2S1KaLB39"},{"type":"paragraph","position":{"start":{"line":6,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"We’ll use the same ","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"SXCxeel0De"},{"type":"inlineCode","value":"filter_data","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"j33q181eUu"},{"type":"text","value":" function as before, but this time\napplied with the ","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"Ue33A5AkRg"},{"type":"inlineCode","value":".groupby","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"Ugo6pMqHeq"},{"type":"text","value":" and ","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"FjvPXACvzU"},{"type":"inlineCode","value":".apply","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"rgUhkhzp8B"},{"type":"text","value":" combination to show two ways\nof accomplishing the same thing. We’ll also use ","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"ANKdgsGByy"},{"type":"inlineCode","value":".sel","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"VU8kfMyJgA"},{"type":"text","value":" to pick a subset\nof time for visualization","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"gJ1KQLLhhR"}],"key":"e9i9y952uC"}],"key":"O2uPcIezbv"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"da_hf_zscored_lowpass = da_hf_zscored.groupby('epoch').apply(\n    mne.filter.filter_data,\n    sfreq=da.sfreq,\n    l_freq=None,\n    h_freq=10,\n    verbose=False\n)","key":"eHY5st19eR"},{"type":"output","id":"4YlL4UHG0BsyfSL_AnTF8","data":[],"key":"pvzp4ykBpG"}],"key":"OpBV9N9Gv5"},{"type":"block","kind":"notebook-content","data":{"tags":["popout"]},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"Note that quickly selecting a subset of timepoints if we used numpy is much more verbose. Here’s\na quick comparison:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"TgXWaB28Xv"}],"key":"UUvJrH9dCk"},{"type":"code","lang":"python","value":"# Numpy alone\nmask_time = (times > -.8) * (times < 2.8)\nepoch_dim = 0\nda_hf_zscored_lowpass[..., mask_time].mean(epoch_dim)\n\n# xarray\nda_hf_zscored_lowpass.sel(time=slice(-.8, 2.8)).mean(dim='epoch')","position":{"start":{"line":4,"column":1},"end":{"line":12,"column":1}},"key":"cO47UbS3eH"}],"visibility":"show","key":"MPDeoEwv8T"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"fig, ax = plt.subplots(figsize=(15, 5))\nda_hf_zscored_lowpass.mean(dim='epoch').sel(time=slice(-.8, 2.8)).plot.line(x='time', hue='channel')\nax.get_legend().remove()","key":"cnNzUAQ8TZ"},{"type":"output","id":"cgI0UuQPwPQobJNVmXjwn","data":[{"output_type":"display_data","metadata":{"needs_background":"light"},"data":{"image/png":{"content_type":"image/png","hash":"a1097f62a3a45fd41be89555a8d5333c","path":"/build/a1097f62a3a45fd41be89555a8d5333c.png"},"text/plain":{"content":"<Figure size 1080x360 with 1 Axes>","content_type":"text/plain"}}}],"key":"KvrSa5Tc1V"}],"key":"b4uPhHLBFv"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Now we can see there are clearly some channels that become active just after ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Uvvi7EaOgb"},{"type":"inlineCode","value":"t==0","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"viBdV5tjpZ"},{"type":"text","value":".\nWe can reduce our dataarray to a single dimension of “mean post-baseline activity in each channel”\nand convert it to a DataFrame for further processing:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Npbd01m8C4"}],"key":"jT9rRqij1B"}],"key":"GRdyL1yoeY"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"# Find the channel with the most activity by first converting to a dataframe\ntotal_activity = da_hf_zscored_lowpass.sel(time=slice(0, 2)).mean(dim=['epoch', 'time'])\ntotal_activity = total_activity.to_dataframe()\ntotal_activity.head()","key":"WyJiOaLYmi"},{"type":"output","id":"ZaElmiWF--_1Rp3IYTySP","data":[{"output_type":"execute_result","execution_count":35,"metadata":{},"data":{"text/html":{"content":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Sample dataset</th>\n    </tr>\n    <tr>\n      <th>channel</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>ch_0</th>\n      <td>0.011101</td>\n    </tr>\n    <tr>\n      <th>ch_1</th>\n      <td>0.012152</td>\n    </tr>\n    <tr>\n      <th>ch_2</th>\n      <td>0.051911</td>\n    </tr>\n    <tr>\n      <th>ch_3</th>\n      <td>0.176188</td>\n    </tr>\n    <tr>\n      <th>ch_4</th>\n      <td>0.246021</td>\n    </tr>\n  </tbody>\n</table>\n</div>","content_type":"text/html"},"text/plain":{"content":"         Sample dataset\nchannel                \nch_0           0.011101\nch_1           0.012152\nch_2           0.051911\nch_3           0.176188\nch_4           0.246021","content_type":"text/plain"}}}],"key":"SPOS9Bo35y"}],"key":"w5ao4gj72q"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Let’s grab the channel with maximal activation to look into a bit further.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"IKFFZwnU5z"}],"key":"s2fri3mrLn"}],"key":"aVkBkppEDa"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"max_chan = total_activity.squeeze().sort_values(ascending=False).index[0]","key":"fuJVQgeoPR"},{"type":"output","id":"Bq0JKgA_ut7oytKS9MsO-","data":[],"key":"aKdzUN4Tr1"}],"key":"ixs7GCrtCV"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Time frequency analysis","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"PP5Q5aeOQm"}],"identifier":"time-frequency-analysis","label":"Time frequency analysis","html_id":"time-frequency-analysis","implicit":true,"key":"yMSK0Fn1a2"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"As a final step, let’s ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"xErb8KYqB4"},{"type":"strong","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"expand","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"mQqcDgoLgG"}],"key":"rNlCSsa1DF"},{"type":"text","value":" our DataArray and add another dimension.\nIn the above steps we specifically focused on high-frequency activity. A more\ncommon approach is to first create a ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"kQRUbT1z2g"},{"type":"strong","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"spectrogram","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"YIJzK5YN23"}],"key":"Q1B8qAvIVb"},{"type":"text","value":" of your data to see activity\nacross many frequencies.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"CHEGamIoYK"}],"key":"vilv4remsw"},{"type":"paragraph","position":{"start":{"line":8,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"To do this, we’ll use another MNE function for creating a ","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"UPEyKWB2X0"},{"type":"strong","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Time-Frequency Representation","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"UxPFjvk6rm"}],"key":"kWiaalvrrb"},{"type":"text","value":"\nor TFR. We’ll define a range of frequencies, and apply MNE’s function ","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"b72VkaSEon"},{"type":"emphasis","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"directly on our DataArray","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"XiJrgBqL4g"}],"key":"XwKObdnY9S"},{"type":"text","value":".\nThis will return a NumPy array with the filtered values.","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"gaXPtdcC7g"}],"key":"VdniJcd2JE"}],"key":"GDTVUVJMo3"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"frequencies = [2**ii for ii in np.arange(2, 9, .5)]\ntfr = mne.time_frequency.tfr_array_morlet(\n    da,\n    sfreq=da.sfreq,\n    freqs=frequencies,\n    n_cycles=4,\n)\n\n# Take the absolute value to throw out the non-real parts of the numbers\ntfr = np.abs(tfr)\ntfr[:2, :2, :2, :2]","key":"BAc7jKYksU"},{"type":"output","id":"wrPOfDxnPotw7hg7YHeVH","data":[{"output_type":"execute_result","execution_count":37,"metadata":{},"data":{"text/plain":{"content":"array([[[[160.04103045, 160.38413909],\n         [171.73704543, 175.09249553]],\n\n        [[283.28699104, 285.21855726],\n         [241.65630528, 245.77098295]]],\n\n\n       [[[ 93.99546124,  94.4406537 ],\n         [ 78.02050045,  79.15324341]],\n\n        [[ 47.85148993,  49.90845151],\n         [ 53.97221461,  54.55793674]]]])","content_type":"text/plain"}}}],"key":"sg8JJzitON"}],"key":"jNKAVYRhcy"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Convert this data into a DataArray with ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"YmW6d0O7fl"},{"type":"inlineCode","value":".expand_dims","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"l61qsrNe4N"}],"identifier":"convert-this-data-into-a-dataarray-with-expand-dims","label":"Convert this data into a DataArray with .expand_dims","html_id":"convert-this-data-into-a-dataarray-with-expand-dims","implicit":true,"key":"AJZBipmRt1"}],"key":"acxmGhH2je"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Next, we’ll convert this into a DataArray by using the metadata from our original\nDataArray. We can use the ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"evW4lm3cz6"},{"type":"inlineCode","value":"expand_dims","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Ct1yh1RLHv"},{"type":"text","value":" method to create a new dimension for our DataArray.\nWe’ll use this to store frequency information.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"BNiJ9b3XxN"}],"key":"AmicILbq9t"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"We’ll then reshape our new DataArray so that it matches the output of the MNE function,\nand use the ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"vx4bElg9FC"},{"type":"inlineCode","value":"copy","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"eMpXZXhCqE"},{"type":"text","value":" method to create a new DataArray. By supplying the ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"wLbjILpLdQ"},{"type":"inlineCode","value":"data=","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"Bs7SCSeMm0"},{"type":"text","value":" argument\nto copy, we directly insert the new data inside the generated DataArray.","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"boPnFgdKHS"}],"key":"jTW6oJyyPR"}],"key":"xis6YjmUx9"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"da_tfr = (da\n    .expand_dims(frequency=frequencies)\n    .transpose('epoch', 'channel', 'frequency', 'time')\n    .copy(data=np.log(tfr))\n)","key":"gEjcoUg6gG"},{"type":"output","id":"eZMmvhtGqt1XWSNrq4PLy","data":[],"key":"Yg1Pv6lhnn"}],"key":"Ra848vC2Ep"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"We can now visualize this time-frequency representation over time","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"XmA8CqEOVx"}],"key":"wAHXyxn9a7"}],"key":"dlk2tIvOXv"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"fig, ax = plt.subplots(figsize=(15, 5))\n(da_tfr\n    .sel({'frequency': slice(None, 180), 'channel': max_chan})\n    .mean('epoch')\n    .plot.imshow(x='time', y='frequency')\n)","key":"oVJOqSEmQp"},{"type":"output","id":"4PmxcnHiqpxHw0DwMK0cY","data":[{"output_type":"display_data","metadata":{"needs_background":"light"},"data":{"image/png":{"content_type":"image/png","hash":"3d6257be54ef134bc9b4e2ea4ab2d85d","path":"/build/3d6257be54ef134bc9b4e2ea4ab2d85d.png"},"text/plain":{"content":"<Figure size 1080x360 with 2 Axes>","content_type":"text/plain"}}}],"key":"ytQ31uLRXY"}],"key":"bVXDaRZVCQ"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Similar to our one-dimensional visualizations above, it can be hard to visualize\nrelative changes in activity over a baseline (particularly because the amplitude scales\ninversely with the frequency).","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"In6lWUxmKy"}],"key":"YdFK3E5u6Y"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Let’s apply a re-scaling function to our data so that\nwe can see things more clearly. This time we’ll use MNE’s ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"bwpIulIC5Z"},{"type":"inlineCode","value":"rescale","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"hpdje8kDZ2"},{"type":"text","value":" function, which\nacts similarly to our ","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"NgQ4augcSq"},{"type":"inlineCode","value":"zscore","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"alCwbBoZVd"},{"type":"text","value":" function above.","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"FcUuIzUOSN"}],"key":"APXrjvAXKe"}],"key":"mTU6PNpDPc"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"da_tfr_baselined = xr.apply_ufunc(\n    mne.baseline.rescale,\n    da_tfr,\n    kwargs={'times': da_tfr.coords['time'], 'baseline': (None, -.1), \"mode\": 'zscore'}\n)","key":"zzQtqqSvaz"},{"type":"output","id":"7hpCJmHNMPo6veG5p-t_F","data":[{"name":"stdout","output_type":"stream","text":"Applying baseline correction (mode: zscore)\n"}],"key":"CFcjjpZ5rZ"}],"key":"qspCBFOxYE"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"again, the result should be a DataArray, so we can directly visualize it:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"AcLZlYMfwm"}],"key":"o0GAZIFmgg"}],"key":"G8kqKGrkHA"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"(da_tfr_baselined\n    .sel({'frequency': slice(None, 180), 'channel': max_chan, 'time': slice(-.8, 2.5)})\n    .mean('epoch')\n    .plot.imshow(x='time', y='frequency')\n)","key":"SSk0igwYgC"},{"type":"output","id":"isDXCWvwmD91j6Htd_LYm","data":[{"output_type":"display_data","metadata":{"needs_background":"light"},"data":{"image/png":{"content_type":"image/png","hash":"0e4ee40776d84c7b267e77baf6850539","path":"/build/0e4ee40776d84c7b267e77baf6850539.png"},"text/plain":{"content":"<Figure size 432x288 with 2 Axes>","content_type":"text/plain"}}}],"key":"peKfdChWnS"}],"key":"DMAxDs9jET"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Now we can see a clear increase in activity in the higher frequencies at ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"MBzmMpmOWE"},{"type":"inlineCode","value":"t==0","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"g9XIqYWYZ5"},{"type":"text","value":".","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"DISDRmXMfS"}],"key":"dcbNeMiUiR"}],"key":"Cm7Un0YGSg"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Combining the two with ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"kDn5vxPc4w"},{"type":"inlineCode","value":"xr.merge","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"gQtdt49rJ6"}],"identifier":"combining-the-two-with-xr-merge","label":"Combining the two with xr.merge","html_id":"combining-the-two-with-xr-merge","implicit":true,"key":"mZ5y59xx3F"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"Finally, let’s combine these two DataArrays into one. We know that they\nshare much of the same metadata - the first is “Amplitude of High-Frequency Activity”\nand the second is “Time-frequency power”. We should be able to merge these\ninto a single xarray ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"KBOOwq8XJc"},{"type":"inlineCode","value":"DataSet","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"RAiyu6gjth"},{"type":"text","value":", which will allow us to perform operations across\nboth by using their shared dimensions. DataSets are kind of like collections of\nDataArrays, with assumptions that the DataArrays share some metadata or coordinates.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"vcP1OZja0y"}],"key":"yrqP1Uk76o"},{"type":"paragraph","position":{"start":{"line":10,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"text","value":"First, we’ll rename each DataArray so that we can merge them nicely. Then, we’ll simply\nuse the ","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"SmMx6sTTGd"},{"type":"inlineCode","value":"xr.merge","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"z3YXaQmA03"},{"type":"text","value":" function, which tries to automatically figure out which dimensions are\nshared based on their names and coordinate values.","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"NOA6FQtddd"}],"key":"HME2JsXiBD"}],"key":"v47HgfqoME"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"da_tfr_baselined.name = \"Time Frequency Representation\"\nda_hf_zscored_lowpass.name = \"Low-pass filtered HFA\"\nds = xr.merge([da_tfr_baselined, da_hf_zscored_lowpass])\nds","key":"uWHEdlvUHv"},{"type":"output","id":"FnauN1z_O8HuPE4Kp19ru","data":[{"output_type":"execute_result","execution_count":43,"metadata":{},"data":{"text/html":{"content_type":"text/html","hash":"c7a589cf576f3a807805fd4c44fb5444","path":"/build/c7a589cf576f3a807805fd4c44fb5444.html"},"text/plain":{"content":"<xarray.Dataset>\nDimensions:                        (channel: 32, epoch: 29, frequency: 14, time: 1201)\nCoordinates:\n  * frequency                      (frequency) float64 4.0 5.657 ... 256.0 362.0\n  * time                           (time) float64 -1.0 -0.9967 ... 2.997 3.0\n  * channel                        (channel) <U5 'ch_0' 'ch_1' ... 'ch_31'\n  * epoch                          (epoch) int64 0 1 2 3 4 5 ... 24 25 26 27 28\nData variables:\n    Time Frequency Representation  (epoch, channel, frequency, time) float64 -1.068 ... 1.231\n    Low-pass filtered HFA          (epoch, channel, time) float64 -0.5572 ... -0.7839","content_type":"text/plain"}}}],"key":"MLLb1OtQ4X"}],"key":"W0dGvGjsE9"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Since we’ve got a single dataset, we can grab subsets along each axis across both\nDataArrays at the same time. We’ll select a subset of channels, time, and frequency bands\nto visualize.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"cBGUt2CtRu"}],"key":"t9wJtJzec3"}],"key":"vgYBb474Dl"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"ds_plt = ds.sel({'channel': max_chan, 'frequency': slice(10, 150), 'time': slice(-.5, 2)})","key":"Gq9HNKCKZU"},{"type":"output","id":"oE-HbAb-cTrQh6wYjLArM","data":[],"key":"KapJo8EgTh"}],"key":"gSMbJuAeTZ"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"Now, we’ll plot ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"duLlWZaKlQ"},{"type":"strong","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"both","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"biy9dPqHY0"}],"key":"ZLhyYzD9Qq"},{"type":"text","value":" the spectrogram and the HFA in the same Matplotlib figure. As you\ncan see, these plots contain somewhat redundant information. The top plot tells us that there is\na general increase in power for high-frequencies. The bottom plot gives us the average increase in\npower across the higher frequencies.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"gEJCUXaUo3"}],"key":"lZG0zvSU8W"}],"key":"g6W6Nod11c"},{"type":"block","kind":"notebook-code","data":{},"children":[{"type":"code","lang":"python","executable":true,"value":"fig, (ax_tfr, ax_hfa) = plt.subplots(2, 1, figsize=(15, 10))\nim = ds_plt['Time Frequency Representation'].mean('epoch').plot.imshow(x='time', y='frequency',\n                                                                       ax=ax_tfr)\n\nds_plt['Low-pass filtered HFA'].mean('epoch').plot.line(x='time', ax=ax_hfa)","key":"PkYXfVm9Vh"},{"type":"output","id":"Xu-N94QmNjmxugvKc-0cx","data":[{"output_type":"display_data","metadata":{"needs_background":"light"},"data":{"image/png":{"content_type":"image/png","hash":"f08d3a3e82c20477112b56b792308c6f","path":"/build/f08d3a3e82c20477112b56b792308c6f.png"},"text/plain":{"content":"<Figure size 1080x720 with 3 Axes>","content_type":"text/plain"}}}],"key":"B0dGWFYfvW"}],"key":"YA34vBF2su"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":2,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Wrapping up","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"wybWCVZ9Xc"}],"identifier":"wrapping-up","label":"Wrapping up","html_id":"wrapping-up","implicit":true,"key":"Bysm3J8e4r"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"In all, I was pretty happy with what you can do using xarray’s ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"DmeJAgD6NH"},{"type":"inlineCode","value":"DataArray","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"KinhCqInOW"},{"type":"text","value":" structure.\nIt’s pretty nice to be able to refer to axes by their names, and to make more intelligent\nselection / slicing operations using their coordinate values. Moreover, this post is just\nscratching the surface for how to use this information in a way that speeds up the exploration\nand analysis post.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"EeijCcnjMk"}],"key":"EHnbox2RwD"},{"type":"paragraph","position":{"start":{"line":9,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"text","value":"For example, we might have sped-up some feature extraction steps by using\na distributed processing framework like ","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"Pma1f9aPBb"},{"type":"strong","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"Dask","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"c5TiMXPJpA"}],"key":"buXZZM7is8"},{"type":"text","value":" in the operations above. Dask integrates nicely\nwith xarray, and offers a lot of interesting opportunities to parallelize interactive computation.\nI’ll explore that in another blog post.","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"eQPIHTzhqX"}],"key":"fmpCpC25Q3"},{"type":"paragraph","position":{"start":{"line":14,"column":1},"end":{"line":16,"column":1}},"children":[{"type":"text","value":"Finally - the goal of this post has largely been to learn a bit more about xarray. This means I might\nbe totally mis-using functionality, or missing something that would have made the above process much\neasier. If anybody has tips or thoughts on the code above, please do reach out!","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"HTw0pAwfej"}],"key":"ZydOEH9W1O"}],"key":"KSN3mfw60y"}],"key":"ZTzG9SkJbj"},"references":{"cite":{"order":["Holdgraf_2017"],"data":{"Holdgraf_2017":{"label":"Holdgraf_2017","enumerator":"1","doi":"10.3389/fnsys.2017.00061","html":"Holdgraf, C. R., Rieger, J. W., Micheli, C., Martin, S., Knight, R. T., & Theunissen, F. E. (2017). Encoding and Decoding Models in Cognitive Electrophysiology. <i>Frontiers in Systems Neuroscience</i>, <i>11</i>. <a target=\"_blank\" rel=\"noreferrer\" href=\"https://doi.org/10.3389/fnsys.2017.00061\">10.3389/fnsys.2017.00061</a>","url":"https://doi.org/10.3389/fnsys.2017.00061"}}}},"footer":{"navigation":{"prev":{"title":"What would Rust-style governance look like in Jupyter?","url":"/blog/2019/2019-10-13-rust-jupyter-governance","group":"2019"},"next":{"title":"What would Python-style governance look like in Jupyter?","url":"/blog/2019/2019-10-27-jupyter-governance-python","group":"2019"}}},"domain":"http://localhost:3000"}