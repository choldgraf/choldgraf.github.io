{"version":2,"kind":"Notebook","sha256":"55500b6e7d71e0868b231ddc26675c164f6c96b0fb2bd632ce3d76300eb9ce26","slug":"blog.2024.mystmd-with-the-blog","location":"/blog/2024/mystmd-with-the-blog.md","dependencies":[],"frontmatter":{"title":"Re-building my blog with MySTMD","date":"2024-11-01","kernelspec":{"name":"python3","display_name":"Python 3"},"authors":[{"id":"chris","nameParsed":{"literal":"Chris Holdgraf","given":"Chris","family":"Holdgraf"},"name":"Chris Holdgraf","orcid":"0000-0002-2391-0678","affiliations":["affiliations-myst-generated-uid-0","affiliations-myst-generated-uid-1"],"url":"https://chrisholdgraf.com","github":"choldgraf","twitter":"choldgraf"}],"github":"https://github.com/choldgraf/choldgraf.github.io","affiliations":[{"name":"2i2c","url":"https://2i2c.org","id":"affiliations-myst-generated-uid-0"},{"name":"Project Jupyter","url":"https://jupyter.org","id":"affiliations-myst-generated-uid-1"}],"abbreviations":{"LF":"The Linux Foundation","JF":"The Jupyter Foundation","JEC":"Jupyter Executive Council","JFB":"The Jupyter Foundation Board","SSC":"Software Steering Council","OSPO":"Open Source Program Office"},"numbering":{"title":{"offset":2}},"source_url":"https://github.com/choldgraf/choldgraf.github.io/blob/main/blog/2024/mystmd-with-the-blog.md","edit_url":"https://github.com/choldgraf/choldgraf.github.io/edit/main/blog/2024/mystmd-with-the-blog.md","exports":[{"format":"md","filename":"mystmd-with-the-blog.md","url":"/build/mystmd-with-the-blog-230088a92a3d254e729a4b03a1014481.md"}]},"mdast":{"type":"root","children":[{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"Wow it has been a long time since I’ve last-written here. It turns out that having two small children and a very demanding job means you don’t have as much time for blogging. But that’s a whole different blog post...","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"vTyev9hQkl"}],"key":"sj3Wqg4gqv"},{"type":"paragraph","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"I’ve decided to convert my blog to use the new ","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"Gd853il1Ba"},{"type":"link","url":"https://mystmd.org","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"MyST Document Engine","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"dkJspSQecr"}],"urlSource":"https://mystmd.org","key":"ORrJjRN4Cp"},{"type":"text","value":". This is part of a dogfooding experiment to see what’s possible with MyST, since it’s where the Jupyter Book project is heading, and I want to see how close to “production-ready” we are already.","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"AsTLjJDXBo"}],"key":"I6kJ4JTct0"},{"type":"paragraph","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"text","value":"To begin, I wanted to share a few things I learned today as I tried to re-tool my old blog for use with MyST MD.","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"qNfgboqxzJ"}],"key":"WcFNHTvgaS"},{"type":"heading","depth":2,"position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"text","value":"There’s no blog functionality in MyST yet","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"P1d2L3XRRD"}],"identifier":"theres-no-blog-functionality-in-myst-yet","label":"There’s no blog functionality in MyST yet","html_id":"theres-no-blog-functionality-in-myst-yet","implicit":true,"key":"vGGV6xGwGE"},{"type":"paragraph","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"children":[{"type":"text","value":"As MyST is still quite young, there’s no out-of-the-box functionality for MyST (see ","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"key":"XSHkvh3osj"},{"type":"link","url":"https://github.com/jupyter-book/mystmd/issues/840","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"children":[{"type":"text","value":"jupyter​-book​/mystmd​#840","key":"jNoXbCOG10"}],"urlSource":"https://github.com/jupyter-book/mystmd/issues/840","data":{"kind":"issue","org":"jupyter-book","repo":"mystmd","issue_number":"840"},"internal":false,"protocol":"github","key":"m8Jeseahxw"},{"type":"text","value":" for the issue tracking that). So, I wanted to accomplish at least two things with my initial transfer:","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"key":"zFWgPBSVte"}],"key":"WiEglwrJBE"},{"type":"list","ordered":true,"start":1,"spread":false,"position":{"start":{"line":19,"column":1},"end":{"line":21,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"children":[{"type":"paragraph","children":[{"type":"text","value":"Generate a list of recent blog posts that I can insert into a few places in my site.","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"key":"JALz97JDDC"}],"key":"RxHuVmmeC3"}],"key":"C0kx8imE56"},{"type":"listItem","spread":true,"position":{"start":{"line":20,"column":1},"end":{"line":21,"column":1}},"children":[{"type":"paragraph","children":[{"type":"text","value":"Generate an RSS feed that keeps the same URLs, content, etc.","position":{"start":{"line":20,"column":1},"end":{"line":20,"column":1}},"key":"crChhUcnEn"}],"key":"umHbwIYf4F"}],"key":"zeop5DDS4d"}],"key":"c3uDl4YPMT"},{"type":"heading","depth":2,"position":{"start":{"line":22,"column":1},"end":{"line":22,"column":1}},"children":[{"type":"text","value":"What didn’t work: using the parsed MyST documents","position":{"start":{"line":22,"column":1},"end":{"line":22,"column":1}},"key":"XT9FChuBqZ"}],"identifier":"what-didnt-work-using-the-parsed-myst-documents","label":"What didn’t work: using the parsed MyST documents","html_id":"what-didnt-work-using-the-parsed-myst-documents","implicit":true,"key":"gVzzYb3Wtu"},{"type":"paragraph","position":{"start":{"line":24,"column":1},"end":{"line":25,"column":1}},"children":[{"type":"text","value":"My first thought was to use a MyST plugin that defines a directive I could use to insert a list of blog posts.\nHowever, I learned that MyST plugins have no way to access all of the parsed documents at build time (see ","position":{"start":{"line":24,"column":1},"end":{"line":24,"column":1}},"key":"jjgdWnuOUk"},{"type":"link","url":"https://github.com/jupyter-book/mystmd/issues/1616","position":{"start":{"line":24,"column":1},"end":{"line":24,"column":1}},"children":[{"type":"text","value":"this issue about accessing all of the parsed documents","position":{"start":{"line":24,"column":1},"end":{"line":24,"column":1}},"key":"Q5eYtQzNU1"}],"urlSource":"https://github.com/jupyter-book/mystmd/issues/1616","data":{"kind":"issue","org":"jupyter-book","repo":"mystmd","issue_number":"1616"},"internal":false,"protocol":"github","key":"cUkCQbiW4u"},{"type":"text","value":" to track that one).","position":{"start":{"line":24,"column":1},"end":{"line":24,"column":1}},"key":"EDpU5wdASP"}],"key":"ghdnt7eieU"},{"type":"paragraph","position":{"start":{"line":27,"column":1},"end":{"line":27,"column":1}},"children":[{"type":"text","value":"Fortunately, ","position":{"start":{"line":27,"column":1},"end":{"line":27,"column":1}},"key":"n6325Y3iMQ"},{"type":"link","url":"https://github.com/rowanc1","position":{"start":{"line":27,"column":1},"end":{"line":27,"column":1}},"children":[{"type":"inlineCode","value":"@rowanc1","position":{"start":{"line":27,"column":1},"end":{"line":27,"column":1}},"key":"iBC1d40l16"}],"urlSource":"https://github.com/rowanc1","error":true,"key":"FqnOqLMbmK"},{"type":"text","value":" made me realize that I could just ","position":{"start":{"line":27,"column":1},"end":{"line":27,"column":1}},"key":"OBguTrxz5y"},{"type":"emphasis","position":{"start":{"line":27,"column":1},"end":{"line":27,"column":1}},"children":[{"type":"text","value":"manually","position":{"start":{"line":27,"column":1},"end":{"line":27,"column":1}},"key":"xcU9CDe3ea"}],"key":"wJhwsUgqxN"},{"type":"text","value":" parse my blog files and use that to build up something like a blog list. So that’s what the rest of this post is about.","position":{"start":{"line":27,"column":1},"end":{"line":27,"column":1}},"key":"VoWPrl8mJq"}],"key":"uL7QgWON32"},{"type":"heading","depth":2,"position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"children":[{"type":"text","value":"You can run scripts in JavaScript as part of your MyST build","position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"key":"tuVst6mtfv"}],"identifier":"you-can-run-scripts-in-javascript-as-part-of-your-myst-build","label":"You can run scripts in JavaScript as part of your MyST build","html_id":"you-can-run-scripts-in-javascript-as-part-of-your-myst-build","implicit":true,"key":"bnhqrSvab2"},{"type":"paragraph","position":{"start":{"line":31,"column":1},"end":{"line":31,"column":1}},"children":[{"type":"text","value":"The ","position":{"start":{"line":31,"column":1},"end":{"line":31,"column":1}},"key":"LO4lVWNDWF"},{"type":"link","url":"https://mystmd.org/guide/javascript-plugins","position":{"start":{"line":31,"column":1},"end":{"line":31,"column":1}},"children":[{"type":"text","value":"MySTMD plugins documentation","position":{"start":{"line":31,"column":1},"end":{"line":31,"column":1}},"key":"w0HlHiU5mW"}],"urlSource":"https://mystmd.org/guide/javascript-plugins","key":"mC6qhmB8P0"},{"type":"text","value":" shows a few examples for how to define your own MyST plugins. These are little JavaScript files that get executed every time you build your MyST site.","position":{"start":{"line":31,"column":1},"end":{"line":31,"column":1}},"key":"rehjgW1Q4A"}],"key":"rTI99knzc2"},{"type":"paragraph","position":{"start":{"line":33,"column":1},"end":{"line":33,"column":1}},"children":[{"type":"text","value":"The easiest thing to do here would be to write a JavaScript plugin for MyST that I can attach to my site build. You could use a JS library to parse the markdown files in ","position":{"start":{"line":33,"column":1},"end":{"line":33,"column":1}},"key":"vKeUla62kh"},{"type":"inlineCode","value":"blog/","position":{"start":{"line":33,"column":1},"end":{"line":33,"column":1}},"key":"JHEdHOeUZP"},{"type":"text","value":", grab their YAML metadata, and return MyST AST structure that would be inserted into the document. But I’m not too comfortable with JavaScript, and I found two ways that are much hackier, but much more accessible for somebody that is comfortable with Python 😎.","position":{"start":{"line":33,"column":1},"end":{"line":33,"column":1}},"key":"Pl0UIJunZ8"}],"key":"U8klfNFDGc"},{"type":"heading","depth":2,"position":{"start":{"line":35,"column":1},"end":{"line":35,"column":1}},"children":[{"type":"text","value":"Write a MyST extension in Python","position":{"start":{"line":35,"column":1},"end":{"line":35,"column":1}},"key":"MUrkaVYxPR"}],"identifier":"write-a-myst-extension-in-python","label":"Write a MyST extension in Python","html_id":"write-a-myst-extension-in-python","implicit":true,"key":"eLlyvo1VMl"},{"type":"paragraph","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"children":[{"type":"text","value":"I bet most folks don’t know that you can write MyST extensions entirely in Python (or any other language that you can execute locally). ","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"ktr7BJ1l8v"},{"type":"link","url":"https://mystmd.org/guide/executable-plugins","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"children":[{"type":"text","value":"Here is the MyST documentation on writing an executable MyST extension","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"EqxE3yLOeI"}],"urlSource":"https://mystmd.org/guide/executable-plugins","key":"mMRSLzaSbb"},{"type":"text","value":".","position":{"start":{"line":37,"column":1},"end":{"line":37,"column":1}},"key":"TNhOpCfozH"}],"key":"KTZ1fVcQrI"},{"type":"paragraph","position":{"start":{"line":39,"column":1},"end":{"line":39,"column":1}},"children":[{"type":"text","value":"Executable extensions are treated like a black box in MyST - the MyST build process simply ","position":{"start":{"line":39,"column":1},"end":{"line":39,"column":1}},"key":"yNaomG0Or6"},{"type":"emphasis","position":{"start":{"line":39,"column":1},"end":{"line":39,"column":1}},"children":[{"type":"text","value":"executes","position":{"start":{"line":39,"column":1},"end":{"line":39,"column":1}},"key":"qEJktYrZa9"}],"key":"H4Cfc1i6Ag"},{"type":"text","value":" a file that you specify in ","position":{"start":{"line":39,"column":1},"end":{"line":39,"column":1}},"key":"xuHjHwHeLO"},{"type":"inlineCode","value":"myst.yml","position":{"start":{"line":39,"column":1},"end":{"line":39,"column":1}},"key":"E0RezsOZB5"},{"type":"text","value":", and treats anything printed to ","position":{"start":{"line":39,"column":1},"end":{"line":39,"column":1}},"key":"jeIkSmBZtn"},{"type":"inlineCode","value":"stdout","position":{"start":{"line":39,"column":1},"end":{"line":39,"column":1}},"key":"vxvVF3PNgQ"},{"type":"text","value":" as MyST AST that will be inserted back into the MyST document.","position":{"start":{"line":39,"column":1},"end":{"line":39,"column":1}},"key":"uOt0DxQReD"}],"key":"Yu0TX2zfYM"},{"type":"admonition","kind":"note","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"Check out the examples","position":{"start":{"line":41,"column":1},"end":{"line":41,"column":1}},"key":"eiuXav54XU"}],"key":"HzOOXrNUbb"},{"type":"paragraph","position":{"start":{"line":42,"column":1},"end":{"line":42,"column":1}},"children":[{"type":"text","value":"There seem to be some specific ways to define the arguments that your script takes, based on whether a role, directive, or transform triggers it. See the ","position":{"start":{"line":42,"column":1},"end":{"line":42,"column":1}},"key":"w4qmUFzzpg"},{"type":"link","url":"https://mystmd.org/guide/executable-plugins","position":{"start":{"line":42,"column":1},"end":{"line":42,"column":1}},"children":[{"type":"text","value":"examples in the executable plugin docs","position":{"start":{"line":42,"column":1},"end":{"line":42,"column":1}},"key":"H6lJfydvgE"}],"urlSource":"https://mystmd.org/guide/executable-plugins","key":"nn0XX5DXpK"},{"type":"text","value":" for inspiration.","position":{"start":{"line":42,"column":1},"end":{"line":42,"column":1}},"key":"oFyp35v8OM"}],"key":"sOTKZRHbs6"}],"key":"rhWUxuQ450"},{"type":"heading","depth":2,"position":{"start":{"line":45,"column":1},"end":{"line":45,"column":1}},"children":[{"type":"text","value":"How do you know what MyST AST looks like?","position":{"start":{"line":45,"column":1},"end":{"line":45,"column":1}},"key":"nvMpJrLLN7"}],"identifier":"how-do-you-know-what-myst-ast-looks-like","label":"How do you know what MyST AST looks like?","html_id":"how-do-you-know-what-myst-ast-looks-like","implicit":true,"key":"cE4xOqUYsq"},{"type":"paragraph","position":{"start":{"line":47,"column":1},"end":{"line":48,"column":1}},"children":[{"type":"text","value":"I mention “all you need to do is output MyST AST”, but what does that even mean?\nThe MyST AST is the abstract structure of a MyST document. It has all of the relevant information about the content in a document, as well as all the semantic tags for different ","position":{"start":{"line":47,"column":1},"end":{"line":47,"column":1}},"key":"rVV9FjCz4f"},{"type":"emphasis","position":{"start":{"line":47,"column":1},"end":{"line":47,"column":1}},"children":[{"type":"text","value":"types","position":{"start":{"line":47,"column":1},"end":{"line":47,"column":1}},"key":"iHQmVwt17o"}],"key":"uQwhwkOKd3"},{"type":"text","value":" of content that can exist (e.g., “italics”, or “admonition boxes”).","position":{"start":{"line":47,"column":1},"end":{"line":47,"column":1}},"key":"QfbaHfaea3"}],"key":"JQWRXHSgX9"},{"type":"paragraph","position":{"start":{"line":50,"column":1},"end":{"line":51,"column":1}},"children":[{"type":"text","value":"When a MyST Markdown document is parsed, the result is MyST AST. You can see a ton of examples of AST for various MyST markdown in ","position":{"start":{"line":50,"column":1},"end":{"line":50,"column":1}},"key":"baipoBYefr"},{"type":"link","url":"https://mystmd.org/guide","position":{"start":{"line":50,"column":1},"end":{"line":50,"column":1}},"children":[{"type":"text","value":"the MyST guide","position":{"start":{"line":50,"column":1},"end":{"line":50,"column":1}},"key":"r4AU3GVEFK"}],"urlSource":"https://mystmd.org/guide","key":"iIMc6gjIs6"},{"type":"text","value":".\nJust look for the litte “interactive demo” boxes that show off sample MyST Markdown.","position":{"start":{"line":50,"column":1},"end":{"line":50,"column":1}},"key":"q1nCaOBiE1"}],"key":"y9b2CliNig"},{"type":"admonition","kind":"tip","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"Use the JSON representation of the AST","position":{"start":{"line":53,"column":1},"end":{"line":53,"column":1}},"key":"h9ADkM5YHd"}],"key":"BUqpL84VhK"},{"type":"paragraph","position":{"start":{"line":54,"column":1},"end":{"line":55,"column":1}},"children":[{"type":"text","value":"You’ll note that clicking the AST button gives you a few different ways to view it.\nBy default, you’ll see YAML, but JSON is closer to the structure that MyST plugins expect you to output. In my case, I grabbed the JSON output, and converted it for use as a Python dictionary (this basically just meant turning ","position":{"start":{"line":54,"column":1},"end":{"line":54,"column":1}},"key":"B2NBTZk2sB"},{"type":"inlineCode","value":"true","position":{"start":{"line":54,"column":1},"end":{"line":54,"column":1}},"key":"VnOmK38rdx"},{"type":"text","value":" into ","position":{"start":{"line":54,"column":1},"end":{"line":54,"column":1}},"key":"hZUedPISKU"},{"type":"inlineCode","value":"True","position":{"start":{"line":54,"column":1},"end":{"line":54,"column":1}},"key":"ESKsODu5uU"},{"type":"text","value":").","position":{"start":{"line":54,"column":1},"end":{"line":54,"column":1}},"key":"aWBK2MaXMB"}],"key":"l7Mw5jPKjd"}],"key":"tXKuEoNgCb"},{"type":"paragraph","position":{"start":{"line":58,"column":1},"end":{"line":58,"column":1}},"children":[{"type":"text","value":"In my case, I needed a ","position":{"start":{"line":58,"column":1},"end":{"line":58,"column":1}},"key":"UGNfHY1OIH"},{"type":"emphasis","position":{"start":{"line":58,"column":1},"end":{"line":58,"column":1}},"children":[{"type":"text","value":"list","position":{"start":{"line":58,"column":1},"end":{"line":58,"column":1}},"key":"OEuWKt9OGO"}],"key":"WlUhqyMdhQ"},{"type":"text","value":" of blog posts, so I found the relevant AST for what this looks like at the following locations:","position":{"start":{"line":58,"column":1},"end":{"line":58,"column":1}},"key":"j9URGr0G1J"}],"key":"DCraQoDQbs"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":60,"column":1},"end":{"line":63,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":60,"column":1},"end":{"line":60,"column":1}},"children":[{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":60,"column":1},"end":{"line":60,"column":1}},"key":"hiJPoUm1XF"},{"type":"link","url":"https://mystmd.org/guide/typography#bullet-points-and-numbered-lists","position":{"start":{"line":60,"column":1},"end":{"line":60,"column":1}},"children":[{"type":"text","value":"list items documentation","position":{"start":{"line":60,"column":1},"end":{"line":60,"column":1}},"key":"oIAjLQ0f3X"}],"urlSource":"https://mystmd.org/guide/typography#bullet-points-and-numbered-lists","key":"OGL1QJxxVj"},{"type":"text","value":" showed me the AST for lists.","position":{"start":{"line":60,"column":1},"end":{"line":60,"column":1}},"key":"wrqYgmIjLt"}],"key":"qwMAqAkmxr"}],"key":"dM0fyjSlAL"},{"type":"listItem","spread":true,"position":{"start":{"line":61,"column":1},"end":{"line":61,"column":1}},"children":[{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":61,"column":1},"end":{"line":61,"column":1}},"key":"OqUcESpb53"},{"type":"link","url":"https://mystmd.org/guide/typography#definition-lists","position":{"start":{"line":61,"column":1},"end":{"line":61,"column":1}},"children":[{"type":"text","value":"Definition lists documentation","position":{"start":{"line":61,"column":1},"end":{"line":61,"column":1}},"key":"UyeHU7eTll"}],"urlSource":"https://mystmd.org/guide/typography#definition-lists","key":"sstWsqFth9"},{"type":"text","value":" had sample AST for an internal link.","position":{"start":{"line":61,"column":1},"end":{"line":61,"column":1}},"key":"c2EkkM4qPc"}],"key":"CNONGVBue4"}],"key":"T3jAuBHIJm"},{"type":"listItem","spread":true,"position":{"start":{"line":62,"column":1},"end":{"line":63,"column":1}},"children":[{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":62,"column":1},"end":{"line":62,"column":1}},"key":"Kc1MaQDQFv"},{"type":"link","url":"https://mystmd.org/guide/typography#inline-text-formatting","position":{"start":{"line":62,"column":1},"end":{"line":62,"column":1}},"children":[{"type":"text","value":"Inline text formatting documentation","position":{"start":{"line":62,"column":1},"end":{"line":62,"column":1}},"key":"RLh9FsNQdU"}],"urlSource":"https://mystmd.org/guide/typography#inline-text-formatting","key":"hlB73qaWtK"},{"type":"text","value":" had examples for things like bold, italics, etc.","position":{"start":{"line":62,"column":1},"end":{"line":62,"column":1}},"key":"PAVsVfNFFT"}],"key":"k2WGIxMxZf"}],"key":"Th5bkDaYEB"}],"key":"pJ0OFnOQSK"},{"type":"heading","depth":2,"position":{"start":{"line":64,"column":1},"end":{"line":64,"column":1}},"children":[{"type":"text","value":"Turning this into a Python plugin for MyST","position":{"start":{"line":64,"column":1},"end":{"line":64,"column":1}},"key":"tWzKPENaTW"}],"identifier":"turning-this-into-a-python-plugin-for-myst","label":"Turning this into a Python plugin for MyST","html_id":"turning-this-into-a-python-plugin-for-myst","implicit":true,"key":"SCPqA9VIiI"},{"type":"paragraph","position":{"start":{"line":66,"column":1},"end":{"line":66,"column":1}},"children":[{"type":"text","value":"With this in mind, I wrote a little Python extension that:","position":{"start":{"line":66,"column":1},"end":{"line":66,"column":1}},"key":"jxE0lG3JmS"}],"key":"dfmkCdP4wd"},{"type":"list","ordered":true,"start":1,"spread":false,"position":{"start":{"line":68,"column":1},"end":{"line":71,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":68,"column":1},"end":{"line":68,"column":1}},"children":[{"type":"paragraph","children":[{"type":"text","value":"At build time, parses all of my blog post markdown files and extracts metadata from their YAML headers.","position":{"start":{"line":68,"column":1},"end":{"line":68,"column":1}},"key":"ilHB0Wi0MV"}],"key":"pZm2rKX1m2"}],"key":"piMgXfgSNm"},{"type":"listItem","spread":true,"position":{"start":{"line":69,"column":1},"end":{"line":69,"column":1}},"children":[{"type":"paragraph","children":[{"type":"text","value":"Defines a ","position":{"start":{"line":69,"column":1},"end":{"line":69,"column":1}},"key":"CfxrWygYUp"},{"type":"inlineCode","value":"bloglist","position":{"start":{"line":69,"column":1},"end":{"line":69,"column":1}},"key":"V59d0dcvkE"},{"type":"text","value":" directive that will insert a list of blog posts where it exists.","position":{"start":{"line":69,"column":1},"end":{"line":69,"column":1}},"key":"fvxPRCGEF2"}],"key":"OqwUS7jFhZ"}],"key":"s6Hg5QupHY"},{"type":"listItem","spread":true,"position":{"start":{"line":70,"column":1},"end":{"line":71,"column":1}},"children":[{"type":"paragraph","children":[{"type":"text","value":"Manually converts the blog post metadata into MyST AST that it prints to ","position":{"start":{"line":70,"column":1},"end":{"line":70,"column":1}},"key":"a8uaOX9d2U"},{"type":"inlineCode","value":"stdout","position":{"start":{"line":70,"column":1},"end":{"line":70,"column":1}},"key":"VjqmrCcdIf"},{"type":"text","value":".","position":{"start":{"line":70,"column":1},"end":{"line":70,"column":1}},"key":"UQc9QQHgeu"}],"key":"y4Et7ryhb8"}],"key":"BHnbPf6O4P"}],"key":"E2MEj9JevI"},{"type":"paragraph","position":{"start":{"line":72,"column":1},"end":{"line":72,"column":1}},"children":[{"type":"text","value":"As a result, when I call the directive in my blog, it will ","position":{"start":{"line":72,"column":1},"end":{"line":72,"column":1}},"key":"SVoddvOIwu"},{"type":"emphasis","position":{"start":{"line":72,"column":1},"end":{"line":72,"column":1}},"children":[{"type":"text","value":"replace the directive with whatever AST is spit out by the Python script","position":{"start":{"line":72,"column":1},"end":{"line":72,"column":1}},"key":"VnP8aTw7ya"}],"key":"d5o9wzCMF8"},{"type":"text","value":". You can take a look at ","position":{"start":{"line":72,"column":1},"end":{"line":72,"column":1}},"key":"ZFaXHTV2p0"},{"type":"link","url":"/build/blogpost-308248abe5a831e3e6dee1b9b8afe34a.py","position":{"start":{"line":72,"column":1},"end":{"line":72,"column":1}},"children":[{"type":"text","value":"the entire Python script here","position":{"start":{"line":72,"column":1},"end":{"line":72,"column":1}},"key":"gwD6FKndtG"}],"urlSource":"../../src/blogpost.py","static":true,"protocol":"file","key":"OG3QM75J0l"},{"type":"text","value":".","position":{"start":{"line":72,"column":1},"end":{"line":72,"column":1}},"key":"i5hPqFafbP"}],"key":"IgpuHTN2AG"},{"type":"paragraph","position":{"start":{"line":74,"column":1},"end":{"line":74,"column":1}},"children":[{"type":"text","value":"Now I can insert lists of blog posts wherever I like, for example here’s a list of the latest three:","position":{"start":{"line":74,"column":1},"end":{"line":74,"column":1}},"key":"cPzjjuT1ST"}],"key":"S5yO515KtC"},{"type":"card","url":"/blog/2025/fund-systems-not-developmend","children":[{"type":"cardTitle","children":[{"type":"text","value":"Why open source foundations try to fund systems, not development","key":"IpE7BFz3In"}],"key":"Fvu50XMiCn"},{"type":"paragraph","children":[{"type":"text","value":"\nThis is a brief reflection on something that I've been hearing consistently from the Linux Foundation and its member projects as part of serving on the [Board of the Jupyter Foundation](https://jupyterfoundation.org). Here's a point that originally surprised me when I heard it:\n\n> Most foundations within the Linux Foundation network recommend","key":"bIpx1wSOK9"}],"key":"HaYqn0T4KC"},{"type":"footer","children":[{"type":"strong","children":[{"type":"text","value":"Date: ","key":"O3VLGoUyd5"}],"key":"abBY04QhO2"},{"type":"text","value":"May 31, 2025 | ","key":"z8t5WuUhZv"},{"type":"strong","children":[{"type":"text","value":"Author: ","key":"FFcW7ZzPxu"}],"key":"fs2CeILXuW"},{"type":"text","value":"Chris Holdgraf","key":"Yz4lgIlR8m"}],"key":"N9oOXKI7pB"}],"urlSource":"/blog/2025/fund-systems-not-developmend","key":"TNDwZE7JRM"},{"type":"card","url":"/blog/2025/more-contributors","children":[{"type":"cardTitle","children":[{"type":"text","value":"Jupyter can align the needs of its community and its foundation by enabling contribution","key":"WwG1IHdcDe"}],"key":"baCAMhxEag"},{"type":"paragraph","children":[{"type":"text","value":"\n\nThis week was my first time attending the [Linux Foundation Member Summit](https://events.linuxfoundation.org/lf-member-summit/). This is an annual meeting for all of the Linux Foundation member organizations and projects. I joined because of my new role [on the Jupyter Executive Council](./jec.md), and so I tried to go into this meeting with the","key":"XpRhb8SGz0"}],"key":"wPied38Ocz"},{"type":"footer","children":[{"type":"strong","children":[{"type":"text","value":"Date: ","key":"wKzSjCCYhu"}],"key":"sK2lyNyLeg"},{"type":"text","value":"March 22, 2025 | ","key":"YgvwbygqUS"},{"type":"strong","children":[{"type":"text","value":"Author: ","key":"YbbKxtzdHm"}],"key":"SPiLstWEmk"},{"type":"text","value":"Chris Holdgraf","key":"PyOd2KI6yY"}],"key":"XEqw3QTBVG"}],"urlSource":"/blog/2025/more-contributors","key":"XIciBOqecT"},{"type":"card","url":"/blog/2025/jupyter-org-structure","children":[{"type":"cardTitle","children":[{"type":"text","value":"The relationship between the Jupyter Executive Council, Software Steering Council, and Foundation","key":"kpRGK3uW6e"}],"key":"ed7EKLHe1k"},{"type":"paragraph","children":[{"type":"text","value":"\n\n\nThis is a question that I've been asked many times now that I'm serving on the ","key":"wuBGEFrlwe"},{"type":"abbreviation","title":"Jupyter Executive Council","children":[{"type":"text","value":"JEC","key":"biVZmhHEAn"}],"key":"rTx9qnufWB"},{"type":"text","value":" and the ","key":"byQRzXAfT9"},{"type":"abbreviation","title":"The Jupyter Foundation","children":[{"type":"text","value":"JF","key":"Y22QUZXY67"}],"key":"lZ8sCyfJCt"},{"type":"text","value":". I'm writing up a quick response so that I have something to refer back to and align my own thinking on.\n\n**How most Linux Foundation projects seem to be structured**. Linux","key":"IS8MVhE7hc"}],"key":"g1kylKofFi"},{"type":"footer","children":[{"type":"strong","children":[{"type":"text","value":"Date: ","key":"vEWFGx7G30"}],"key":"KErcMa35VT"},{"type":"text","value":"March 02, 2025 | ","key":"AHaBT27qwf"},{"type":"strong","children":[{"type":"text","value":"Author: ","key":"cPJY75B69d"}],"key":"zAgE5jsLN4"},{"type":"text","value":"Chris Holdgraf","key":"ZVGnu9U2qy"}],"key":"JTzxH7rkOA"}],"urlSource":"/blog/2025/jupyter-org-structure","key":"EDUf13SGL9"},{"type":"heading","depth":2,"position":{"start":{"line":80,"column":1},"end":{"line":80,"column":1}},"children":[{"type":"text","value":"Adding an RSS feed","position":{"start":{"line":80,"column":1},"end":{"line":80,"column":1}},"key":"LcoAD3oGV7"}],"identifier":"adding-an-rss-feed","label":"Adding an RSS feed","html_id":"adding-an-rss-feed","implicit":true,"key":"hDj2mH870Q"},{"type":"paragraph","position":{"start":{"line":82,"column":1},"end":{"line":82,"column":1}},"children":[{"type":"text","value":"Because I’m running Python to define my MyST plugin, I can also use Python to build a custom RSS feed! This was relatively easy since I’d already parsed the metadata from each file.","position":{"start":{"line":82,"column":1},"end":{"line":82,"column":1}},"key":"ZBA7ZiXcat"}],"key":"ZRyOd7VTv5"},{"type":"paragraph","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"children":[{"type":"text","value":"I found ","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"qGNYLSjGg2"},{"type":"link","url":"https://github.com/lkiesow/python-feedgen","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"children":[{"type":"text","value":"the ","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"E37A3hvBhV"},{"type":"inlineCode","value":"python-feedgen","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"ptGreInQ0o"},{"type":"text","value":" package","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"xQkKBW1SwX"}],"urlSource":"https://github.com/lkiesow/python-feedgen","error":true,"key":"HEA6VaOI90"},{"type":"text","value":", which is a little helper package for generating RSS feeds in Python. Since my MyST plugin was already written in Python, I just added a few more lines to do so.","position":{"start":{"line":84,"column":1},"end":{"line":84,"column":1}},"key":"PTO8yZGBiv"}],"key":"tC3kNSsNXx"},{"type":"admonition","kind":"note","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"Click to see the whole Python plugin script","position":{"start":{"line":86,"column":1},"end":{"line":86,"column":1}},"key":"E4bkPKh8U5"}],"key":"sZQCSRpVMe"},{"type":"include","file":"../../src/blogpost.py","literal":true,"children":[{"type":"code","value":"#!/usr/bin/env python3\nimport argparse\nimport json\nimport sys\nfrom yaml import safe_load\nfrom pathlib import Path\nimport pandas as pd\nfrom feedgen.feed import FeedGenerator\nimport unist as u\n\nDEFAULTS = {\"number\": 10}\n\nroot = Path(__file__).parent.parent\n\n# Aggregate all posts from the markdown and ipynb files\nposts = []\nfor ifile in root.rglob(\"blog/**/*.md\"):\n    if \"drafts\" in str(ifile):\n        continue\n\n    text = ifile.read_text()\n    try:\n        _, meta, content = text.split(\"---\", 2)\n    except Exception:\n        print(f\"Skipping file with error: {ifile}\", file=sys.stderr)\n        continue\n\n    # Load in YAML metadata\n    meta = safe_load(meta)\n    meta[\"path\"] = ifile.relative_to(root).with_suffix(\"\")\n    if \"title\" not in meta:\n        lines = text.splitlines()\n        for ii in lines:\n            if ii.strip().startswith(\"#\"):\n                meta[\"title\"] = ii.replace(\"#\", \"\").strip()\n                break\n    \n    # Summarize content\n    skip_lines = [\"#\", \"--\", \"%\", \"++\"]\n    content = \"\\n\".join(ii for ii in content.splitlines() if not any(ii.startswith(char) for char in skip_lines))\n    N_WORDS = 50\n    words = \" \".join(content.split(\" \")[:N_WORDS])\n    if not \"author\" in meta or not meta[\"author\"]:\n        meta[\"author\"] = \"Chris Holdgraf\"\n    meta[\"content\"] = meta.get(\"description\", words)\n    posts.append(meta)\nposts = pd.DataFrame(posts)\nposts[\"date\"] = pd.to_datetime(posts[\"date\"]).dt.tz_localize(\"US/Pacific\")\nposts = posts.dropna(subset=[\"date\"])\nposts = posts.sort_values(\"date\", ascending=False)\n\n# Generate an RSS feed\nfg = FeedGenerator()\nfg.id(\"http://chrisholdgraf.com\")\nfg.title(\"Chris Holdgraf's blog\")\nfg.author({\"name\": \"Chris Holdgraf\", \"email\": \"choldgraf@gmail.com\"})\nfg.link(href=\"http://chrisholdgraf.com\", rel=\"alternate\")\nfg.logo(\"http://chrisholdgraf.com/_static/profile.jpg\")\nfg.subtitle(\"Chris' personal blog!\")\nfg.link(href=\"http://chrisholdgraf.com/rss.xml\", rel=\"self\")\nfg.language(\"en\")\n\n# Add all my posts to it\nfor ix, irow in posts.iterrows():\n    fe = fg.add_entry()\n    fe.id(f\"http://chrisholdgraf.com/{irow['path']}\")\n    fe.published(irow[\"date\"])\n    fe.title(irow[\"title\"])\n    fe.link(href=f\"http://chrisholdgraf.com/{irow['path']}\")\n    fe.content(content=irow[\"content\"])\n\n# Write an RSS feed with latest posts\nfg.atom_file(root / \"atom.xml\", pretty=True)\nfg.rss_file(root / \"rss.xml\", pretty=True)\n\nplugin = {\n    \"name\": \"Blog Post list\",\n    \"directives\": [\n        {\n            \"name\": \"postlist\",\n            \"doc\": \"An example directive for showing a nice random image at a custom size.\",\n            \"alias\": [\"bloglist\"],\n            \"arg\": {},\n            \"options\": {\n                \"number\": {\n                    \"type\": \"int\",\n                    \"doc\": \"The number of posts to include\",\n                }\n            },\n        }\n    ],\n}\n\nchildren = []\nfor ix, irow in posts.iterrows():\n    children.append(\n        {\n          \"type\": \"card\",\n          \"url\": f\"/{irow['path'].with_suffix('')}\",\n          \"children\": [\n            {\n              \"type\": \"cardTitle\",\n              \"children\": [u.text(irow[\"title\"])]\n            },\n            {\n              \"type\": \"paragraph\",\n              \"children\": [u.text(irow['content'])]\n            },\n            {\n              \"type\": \"footer\",\n              \"children\": [\n                u.strong([u.text(\"Date: \")]), u.text(f\"{irow['date']:%B %d, %Y} | \"),\n                u.strong([u.text(\"Author: \")]), u.text(f\"{irow['author']}\"),\n              ]\n            },\n          ]\n        }\n    )\n\n\ndef declare_result(content):\n    \"\"\"Declare result as JSON to stdout\n\n    :param content: content to declare as the result\n    \"\"\"\n\n    # Format result and write to stdout\n    json.dump(content, sys.stdout, indent=2)\n    # Successfully exit\n    raise SystemExit(0)\n\n\ndef run_directive(name, data):\n    \"\"\"Execute a directive with the given name and data\n\n    :param name: name of the directive to run\n    :param data: data of the directive to run\n    \"\"\"\n    assert name == \"postlist\"\n    opts = data[\"node\"].get(\"options\", {})\n    number = int(opts.get(\"number\", DEFAULTS[\"number\"]))\n    output = children[:number]\n    return output\n\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser()\n    group = parser.add_mutually_exclusive_group()\n    group.add_argument(\"--role\")\n    group.add_argument(\"--directive\")\n    group.add_argument(\"--transform\")\n    args = parser.parse_args()\n\n    if args.directive:\n        data = json.load(sys.stdin)\n        declare_result(run_directive(args.directive, data))\n    elif args.transform:\n        raise NotImplementedError\n    elif args.role:\n        raise NotImplementedError\n    else:\n        declare_result(plugin)\n","lang":"python","filename":"blogpost.py","key":"X6k2pOsWe2"}],"key":"nV4yLkIJKU"}],"class":"dropdown","key":"atnO1OBXZI"},{"type":"paragraph","position":{"start":{"line":92,"column":1},"end":{"line":92,"column":1}},"children":[{"type":"text","value":"Annoyingly, you cannot just tell MyST to put a file in a particular location (see ","position":{"start":{"line":92,"column":1},"end":{"line":92,"column":1}},"key":"XWubHn5NDX"},{"type":"link","url":"https://github.com/jupyter-book/mystmd/issues/1196","position":{"start":{"line":92,"column":1},"end":{"line":92,"column":1}},"children":[{"type":"text","value":"jupyter​-book​/mystmd​#1196","key":"EhwGKZ80xL"}],"urlSource":"https://github.com/jupyter-book/mystmd/issues/1196","data":{"kind":"issue","org":"jupyter-book","repo":"mystmd","issue_number":"1196"},"internal":false,"protocol":"github","key":"rSvnFwMv0e"},{"type":"text","value":" tracking this one). So I had to manually move this file to my build output folder in my GitHub action. Hopefully this functionality gets updated soon. Here’s what that looks like:","position":{"start":{"line":92,"column":1},"end":{"line":92,"column":1}},"key":"iaUsIlsGyy"}],"key":"yyGOSoCAF4"},{"type":"include","file":"../../.github/workflows/deploy.yml","literal":true,"filter":{"startAt":"# Move RSS feeds to output folder","endAt":"# If we've pushed to main"},"children":[{"type":"code","value":"    # Move RSS feeds to output folder\n    - name: Move RSS feeds\n      run: |\n        cp atom.xml _build/html/atom.xml\n        cp rss.xml _build/html/rss.xml\n\n    # If we've pushed to main, push the book's HTML to github-pages","lang":"yaml","filename":"deploy.yml","key":"ql0lnix92y"}],"key":"juhsP90FQ7"}],"key":"uhxz1oxJkg"}],"key":"d1CzrSJIq1"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"How I’m trying to use BlueSky without getting burned again","url":"/blog/2024/bluesky","group":"2024"},"next":{"title":"Generate MyST with Jupyter and insert it into content programmatically","url":"/blog/2024/programmatic-myst-with-jupyter","group":"2024"}}},"domain":"http://localhost:3000"}