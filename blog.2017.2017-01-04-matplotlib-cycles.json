{"version":2,"kind":"Notebook","sha256":"243590ecc7a206206070de851762dd9499abeed9d5ba83f934189fb31c008333","slug":"blog.2017.2017-01-04-matplotlib-cycles","location":"/blog/2017/2017-01-04-matplotlib_cycles.ipynb","dependencies":[],"frontmatter":{"title":"Matplotlib Cyclers are Great","tags":["python","open science","visualizations"],"date":"2017-01-04","kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"content_includes_title":false,"authors":[{"id":"chris","nameParsed":{"literal":"Chris Holdgraf","given":"Chris","family":"Holdgraf"},"name":"Chris Holdgraf","orcid":"0000-0002-2391-0678","affiliations":["affiliations-myst-generated-uid-0","affiliations-myst-generated-uid-1"],"url":"https://chrisholdgraf.com","github":"choldgraf","twitter":"choldgraf"}],"github":"https://github.com/choldgraf/choldgraf.github.io","affiliations":[{"name":"2i2c","url":"https://2i2c.org","id":"affiliations-myst-generated-uid-0"},{"name":"Project Jupyter","url":"https://jupyter.org","id":"affiliations-myst-generated-uid-1"}],"abbreviations":{"LF":"The Linux Foundation","JF":"The Jupyter Foundation","JEC":"Jupyter Executive Council","JFB":"The Jupyter Foundation Board","SSC":"Software Steering Council","OSPO":"Open Source Program Office"},"numbering":{"title":{"offset":2}},"source_url":"https://github.com/choldgraf/choldgraf.github.io/blob/main/blog/2017/2017-01-04-matplotlib_cycles.ipynb","edit_url":"https://github.com/choldgraf/choldgraf.github.io/edit/main/blog/2017/2017-01-04-matplotlib_cycles.ipynb","exports":[{"format":"ipynb","filename":"2017-01-04-matplotlib_cycles.ipynb","url":"/build/2017-01-04-matplotli-1b8054b8807aca957c6bd9ac283c34e8.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":28,"column":1},"end":{"line":28,"column":1}},"children":[{"type":"text","value":"Every now and then I come across a nifty feature in Matplotlib that I wish I’d known about earlier. The MPL documentation can be a beast to get through, and as a result you miss some cool stuff sometimes.","position":{"start":{"line":28,"column":1},"end":{"line":28,"column":1}},"key":"Kb1OW5IY1x"}],"key":"YGZFEldF2I"},{"type":"paragraph","position":{"start":{"line":30,"column":1},"end":{"line":30,"column":1}},"children":[{"type":"text","value":"This is a quick demo of one such feature: the ","position":{"start":{"line":30,"column":1},"end":{"line":30,"column":1}},"key":"shaqci9xaA"},{"type":"strong","position":{"start":{"line":30,"column":1},"end":{"line":30,"column":1}},"children":[{"type":"text","value":"cycler","position":{"start":{"line":30,"column":1},"end":{"line":30,"column":1}},"key":"ZfNEtpLvKp"}],"key":"yNQKefhmg1"},{"type":"text","value":".","position":{"start":{"line":30,"column":1},"end":{"line":30,"column":1}},"key":"IxplTWk6yw"}],"key":"NYyGkpwja0"},{"type":"paragraph","position":{"start":{"line":32,"column":1},"end":{"line":32,"column":1}},"children":[{"type":"text","value":"Have you ever had to loop through a number of plotting parameters in matplotlib? Say you have two datasets and you’d like to compare them to one another. Maybe something like this:","position":{"start":{"line":32,"column":1},"end":{"line":32,"column":1}},"key":"vg2enA3cSb"}],"key":"Hx8pn0a6ZG"}],"key":"PPQ0IUHjxJ"},{"type":"block","kind":"notebook-code","data":{"collapsed":false,"jupyter":{"outputs_hidden":false}},"children":[{"type":"code","lang":"python","executable":true,"value":"import matplotlib.pyplot as plt\nimport numpy as np\nimport mne\n%matplotlib inline\n\n# Create fake data\ndata1 = np.random.randn(500)\ndata1 = mne.filter.filter_data(data1, 100, None, 3)\ndata2 = data1 + np.random.randn(500) * .1\n\n# Plot\nlinewidths = [6, 1]\ncolors = ['k', 'r']\nalphas = [.3, 1]\nfig, ax = plt.subplots()\nfor i_data, color, lw, alpha in zip([data1, data2], colors, linewidths, alphas):\n    ax.plot(i_data[50:450], c=color, lw=lw, alpha=alpha)","key":"jOSR8NdOMM"},{"type":"output","id":"uyq0hj27FsdOSaMEkCPrg","data":[{"name":"stdout","output_type":"stream","text":"Setting up low-pass filter at 3 Hz\n\nFIR filter parameters\n---------------------\nDesigning a one-pass, zero-phase, non-causal lowpass filter:\n- Windowed time-domain design (firwin) method\n- Hamming window with 0.0194 passband ripple and 53 dB stopband attenuation\n- Upper passband edge: 3.00 Hz\n- Upper transition bandwidth: 2.00 Hz (-6 dB cutoff frequency: 4.00 Hz)\n- Filter length: 165 samples (1.650 sec)\n\n"},{"output_type":"display_data","metadata":{"needs_background":"light"},"data":{"image/png":{"content_type":"image/png","hash":"39574e89a710cec5565ea52a6f129f88","path":"/build/39574e89a710cec5565ea52a6f129f88.png"},"text/plain":{"content":"<Figure size 432x288 with 1 Axes>","content_type":"text/plain"}}}],"key":"g2yXIK4FkN"}],"key":"g3obxwkbpF"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"There’s really a lot of unnecessary code going on above. We’re defining objects that share the same name as the kwarg that they represent. We can’t store them as dictionaries, because then we’d have to do some python-fu in order to get them to iterate properly. This is where ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"QxnRwOXuxi"},{"type":"inlineCode","value":"cycler","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"aclZMf2YZB"},{"type":"text","value":" is handy:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"s3oOVkqSHL"}],"key":"GwszOaE95k"}],"key":"Wz000uQgxZ"},{"type":"block","kind":"notebook-code","data":{"collapsed":false,"jupyter":{"outputs_hidden":false}},"children":[{"type":"code","lang":"python","executable":true,"value":"# Plot the same thing, but now it's more readable and compact\ncycler = plt.cycler(lw=[6, 1], c=['k', 'r'], alpha=[.3, 1])\nfig, ax = plt.subplots()\nfor i_data, kwargs in zip([data1, data2], cycler):\n    ax.plot(i_data[50:450], **kwargs)","key":"QM2mZ34HXk"},{"type":"output","id":"mkzC7PTGmE-xnitAlYc2r","data":[{"output_type":"display_data","metadata":{"needs_background":"light"},"data":{"image/png":{"content_type":"image/png","hash":"39574e89a710cec5565ea52a6f129f88","path":"/build/39574e89a710cec5565ea52a6f129f88.png"},"text/plain":{"content":"<Figure size 432x288 with 1 Axes>","content_type":"text/plain"}}}],"key":"omfkrtmbDq"}],"key":"OFlny0m5cn"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"You can even cycle through more complex properties like colormaps. Let’s create one that cycles through several colormaps for a plot:","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"yB2sqCfLQV"}],"key":"OTGmA2ZRw0"}],"key":"nOeWKBxJMo"},{"type":"block","kind":"notebook-code","data":{"collapsed":false,"jupyter":{"outputs_hidden":false}},"children":[{"type":"code","lang":"python","executable":true,"value":"cyc = plt.cycler(s=np.linspace(200, 50, 3),\n                 cmap=['viridis', 'magma', 'coolwarm'],\n                 alpha=[.25, .5, .75],\n                 lw=[0, .1, .5])\n\n# You can print the cycler, or use nice jupyter notebook support\nprint(cyc)\ncyc","key":"RPyMtyVIlB"},{"type":"output","id":"T7d91J3qGv5mMMqwolBVT","data":[{"name":"stdout","output_type":"stream","text":"(((cycler('s', [200.0, 125.0, 50.0]) + cycler('cmap', ['viridis', 'magma', 'coolwarm'])) + cycler('alpha', [0.25, 0.5, 0.75])) + cycler('lw', [0, 0.1, 0.5]))\n"},{"output_type":"execute_result","execution_count":7,"metadata":{},"data":{"text/html":{"content":"<table><th>'alpha'</th><th>'cmap'</th><th>'lw'</th><th>'s'</th><tr><td>0.25</td><td>'viridis'</td><td>0</td><td>200.0</td></tr><tr><td>0.5</td><td>'magma'</td><td>0.1</td><td>125.0</td></tr><tr><td>0.75</td><td>'coolwarm'</td><td>0.5</td><td>50.0</td></tr></table>","content_type":"text/html"},"text/plain":{"content":"(((cycler('s', [200.0, 125.0, 50.0]) + cycler('cmap', ['viridis', 'magma', 'coolwarm'])) + cycler('alpha', [0.25, 0.5, 0.75])) + cycler('lw', [0, 0.1, 0.5]))","content_type":"text/plain"}}}],"key":"SHSpuenEhH"}],"key":"NvSSzdX2pk"},{"type":"block","kind":"notebook-code","data":{"collapsed":false,"jupyter":{"outputs_hidden":false}},"children":[{"type":"code","lang":"python","executable":true,"value":"fig, ax = plt.subplots()\nfor args in cyc:\n    x, y = np.random.randn(2, 100)\n    ax.scatter(x, y, c=x, **args)","key":"VsoixLAyGc"},{"type":"output","id":"yYbu19OnEgcPiAXt5IVS1","data":[{"output_type":"display_data","metadata":{"needs_background":"light"},"data":{"image/png":{"content_type":"image/png","hash":"32210dd0efc2e5c5f6170fa67f21ccf7","path":"/build/32210dd0efc2e5c5f6170fa67f21ccf7.png"},"text/plain":{"content":"<Figure size 432x288 with 1 Axes>","content_type":"text/plain"}}}],"key":"dw3W8jCzj7"}],"key":"NLxwYk7KAl"},{"type":"block","kind":"notebook-content","children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"So there you have it - cyclers are pretty neat. Give them a shot, and buy a ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"srJzmFeApm"},{"type":"inlineCode","value":"matplotlib","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"a8xoQZwGTF"},{"type":"text","value":" dev a beer next time you see them for making such an awesome and often under-appreciated package!","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"uanCl1zVeL"}],"key":"RigJuRKwPv"},{"type":"admonition","kind":"tip","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"Tip","key":"ucVngbPOUl"}],"key":"CdYQyDJnQf"},{"type":"paragraph","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"You can check out the MPL cycler page ","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"gyvsMe4qyZ"},{"type":"link","url":"http://matplotlib.org/cycler/","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"children":[{"type":"text","value":"here","position":{"start":{"line":4,"column":1},"end":{"line":4,"column":1}},"key":"sWTcWLRhv7"}],"urlSource":"http://matplotlib.org/cycler/","key":"jVSO3avwUQ"}],"key":"fHV36DT3zn"}],"key":"Qi5xIbjF4w"}],"key":"SnW7y3yrqd"}],"key":"eZr0TP2kCe"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Adding copy buttons to code blocks in Sphinx","url":"/blog/2018/sphinx-copy-buttons","group":"2018"},"next":{"title":"Dates in python","url":"/blog/2017/2017-03-16-dates-in-python","group":"2017"}}},"domain":"http://localhost:3000"}