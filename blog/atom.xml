<?xml version='1.0' encoding='UTF-8'?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
  <id>https://chrisholdgraf.com</id>
  <title>Chris Holdgraf</title>
  <updated>2023-02-18T21:11:33.407779+00:00</updated>
  <link href="https://chrisholdgraf.com"/>
  <link href="https://chrisholdgraf.com/blog/atom.xml" rel="self"/>
  <generator uri="https://ablog.readthedocs.io/" version="0.11.0rc2">ABlog</generator>
  <subtitle>Open communities, open science, communication, and data.</subtitle>
  <entry>
    <id>https://chrisholdgraf.com/blog/2015/2015-05-27-coherence_correlation/</id>
    <title>Coherence correlation</title>
    <updated>2015-05-27T00:00:00+00:00</updated>
    <content type="html">&lt;p&gt;&lt;em&gt;Note - you can find the nbviewer of this post &lt;a class="reference external" href="https://github.com/choldgraf/write-ups/blob/master/neuro/coherence_correlation.ipynb"&gt;here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;section id="coherence-vs-correlation-a-simple-simulation"&gt;

&lt;p&gt;A big question that I’ve always wrestled with is the difference between correlation and coherence. Intuitively, I think of these two things as very similar to one another. Correlation is a way to determine the extent to which two variables covary (normalized to be between -1 and 1). Coherence is similar, but instead assesses “similarity” by looking at the similarity for two variables in frequency space, rather than time space.&lt;/p&gt;
&lt;p&gt;There was a nice paper that came out a while back that basically compared these two methods in order to see when they’d produce the same result, when they’d produce different results, and when they’d break down [1]. They made a lot of nice plots like this:&lt;/p&gt;
&lt;img alt="../_images/eeg_coh.png" src="../_images/eeg_coh.png" /&gt;
&lt;p&gt;Here I am recreating this result in the hopes of giving people a set of scripts to play around with, and giving a bit more intuition.&lt;/p&gt;
&lt;p&gt;[1] http://www.ncbi.nlm.nih.gov/pubmed/8947780&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;First things first, we’ll import some tools to use&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;mne&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;seaborn&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;sns&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;matplotlib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;pyplot&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;
&lt;span class="n"&gt;sns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_style&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;white&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="k"&gt;matplotlib&lt;/span&gt; inline
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;section id="creating-our-sine-waves"&gt;
&lt;h2&gt;Creating our sine waves&lt;/h2&gt;
&lt;p&gt;Recall that the equation for a sinusoidal wave is:&lt;/p&gt;
&lt;p&gt;$$ Asin(2{\pi}ft + 2\pi\phi)$$&lt;/p&gt;
&lt;p&gt;Where $f$ is the frequency of the wave, $$t$$ indexes time, and $$2\pi\phi$$ defines a phase offset of the wave. Then, $$A$$ scales the wave’s amplitude.&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# We can generate these sine wave parameters, then stitch them together&lt;/span&gt;
&lt;span class="n"&gt;amplitude_values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;phase_values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;.25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;.33&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;.5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;freq&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;signal_vals&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;amplitude_values&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;phase_values&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;amps&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;phases&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;signal_vals&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# We&amp;#39;ll also define some noise levels to see how this affects results&lt;/span&gt;
&lt;span class="n"&gt;noise_levels&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# Now define how long these signals will be&lt;/span&gt;
&lt;span class="n"&gt;t_stop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;
&lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;t_stop&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;.01&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# We&amp;#39;re storing everything in dataframes, so create some indices&lt;/span&gt;
&lt;span class="n"&gt;ix_amp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;amps&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;amp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ix_phase&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;phases&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;phase&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Create all our signals&lt;/span&gt;
&lt;span class="n"&gt;signals&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;noise_level&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;noise_levels&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;sig_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;amp&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;freq&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pi&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pi&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;phase&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;amp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;phase&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;signal_vals&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;noise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;noise_level&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;sig_&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;sig_&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;noise&lt;/span&gt;
    &lt;span class="n"&gt;ix_noise&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Index&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;noise_level&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;sig_&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;noise_level&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ix_multi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MultiIndex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_arrays&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;ix_amp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ix_phase&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ix_noise&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;signals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sig_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ix_multi&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;signals&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;signals&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;signals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;time&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="computing-connectivity"&gt;
&lt;h2&gt;Computing connectivity&lt;/h2&gt;
&lt;p&gt;Now we’ve got a bunch of sinewaves with the parameters chosen above. Next, we will calculate the coherence and the correlation between all pairs of signals. This way we can see how these values change for different kinds of input signals.&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;con_all&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;ix_noise&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sig&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;signals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groupby&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;noise_level&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# Setting up output indices&lt;/span&gt;
    &lt;span class="n"&gt;this_noise_level&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_level_values&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;noise_level&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unique&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;ix_ref&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eval&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;amp==3 and phase==0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;ix_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;time&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ix_cc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Index&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;sig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;con&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ix_coh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Index&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;coh&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;sig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;con&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Calculating correlation is easy with pandas&lt;/span&gt;
    &lt;span class="n"&gt;cc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;corr&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;astype&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iloc&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt; &lt;span class="n"&gt;ix_ref&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;cc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
    &lt;span class="n"&gt;cc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# We&amp;#39;ll use MNE for coherenece&lt;/span&gt;
    &lt;span class="n"&gt;indices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt; &lt;span class="n"&gt;ix_ref&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
    &lt;span class="n"&gt;con&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;freqs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;times&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;epochs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tapers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mne&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connectivity&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;spectral_connectivity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;sig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;:,&lt;/span&gt; &lt;span class="p"&gt;:],&lt;/span&gt; &lt;span class="n"&gt;sfreq&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;freq&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;indices&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;indices&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;con_mn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;con&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;con_mn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;con_mn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;cc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    
    &lt;span class="c1"&gt;# Final prep&lt;/span&gt;
    &lt;span class="n"&gt;con_mn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;con_mn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ix_coh&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;cc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ix_cc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;con_all&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;con_mn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cc&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;con_all&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;con_all&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;squeeze&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unstack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;noise_level&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="visualizing-results"&gt;
&lt;h2&gt;Visualizing results&lt;/h2&gt;
&lt;p&gt;First off, we’ll look at what happens to sine waves of varying parameters, for different levels of noise.&lt;/p&gt;
&lt;p&gt;Remember, each tuple is (amplitude, phase_lag). The first number controls how large the signal is, and the second controls the difference in phase between two sine waves.&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;axs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplots&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;figsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;noise&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vals&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;axs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ravel&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;con_all&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iteritems&lt;/span&gt;&lt;span class="p"&gt;()):&lt;/span&gt;
    &lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;vals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unstack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;con&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Noise level: &lt;/span&gt;&lt;span class="si"&gt;{0}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;noise&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_ylim&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;img alt="../_images/16388b2b45cb0725e680574c34972b4b7b25884fb0294d7c71bd5f69737e0936.png" src="../_images/16388b2b45cb0725e680574c34972b4b7b25884fb0294d7c71bd5f69737e0936.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;That’s already an interesting picture - as you can see, coherence is far more robust to differences between the two signals. Here are a few thoughts:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Correlation varies widely (between 0 and 1) for differences in phase lag. However, coherence remains relatively stable.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Coherence values are smaller in general for a signal with any noise&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;However, coherence is more robust for increasing levels of noise, while correlations start to drop to 0&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To illustrate number 1, let’s plot correlation and coherence against each other:&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;plt_df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;con_all&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;noise_level&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unstack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;con&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reset_index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;noise_level&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt_df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;coh&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;noise_level&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kind&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;scatter&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="n"&gt;cmap&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Reds&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;figsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;alpha&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;CC vs Coherence&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;img alt="../_images/3078d9f17c18cca6eae709e2a782f02c8bf0248bd08cd53f28b9ef41349cfd8b.png" src="../_images/3078d9f17c18cca6eae709e2a782f02c8bf0248bd08cd53f28b9ef41349cfd8b.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;As you can see here, coherence remains the same (except for when it occasionally increases to 1) while correlation is much more dependent on the phase relationship between the signals. Moreover, as the signal SNR degrades, the correlation shrinks to 0, while the coherence remains the same.&lt;/p&gt;
&lt;p&gt;Let’s take a look at how the correlation and coherence relate to the actual shape of the signals:&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Set up a dataframe for plotting&lt;/span&gt;
&lt;span class="n"&gt;noise_level&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;noise_levels&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;plt_df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;con_all&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;plt_df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;con_all&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;noise_level&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unstack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;con&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Define 16 signals to plot&lt;/span&gt;
&lt;span class="n"&gt;sig_combinations&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;ix_ref&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="n"&gt;plt_sig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;signals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;noise_level&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;noise_level&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;n_combs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sig_combinations&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;axs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplots&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n_combs&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;figsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n_combs&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;comp_a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;comp_b&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sig_combinations&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;axs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ravel&lt;/span&gt;&lt;span class="p"&gt;()):&lt;/span&gt;
    &lt;span class="n"&gt;plt_sig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iloc&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;comp_a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;comp_b&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;250&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;legend&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;CC: &lt;/span&gt;&lt;span class="si"&gt;{0}&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;Coh: &lt;/span&gt;&lt;span class="si"&gt;{1}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;plt_df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iloc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;comp_b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;:]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;img alt="../_images/9003ec823f30cb99efe6a42da2885d4202a4d77e3188b0ffec49055410fff155.png" src="../_images/9003ec823f30cb99efe6a42da2885d4202a4d77e3188b0ffec49055410fff155.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Another way of looking at it with scatterplots…&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Set up a dataframe for plotting&lt;/span&gt;
&lt;span class="n"&gt;noise_level&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;noise_levels&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;plt_df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;con_all&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;plt_df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;con_all&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;noise_level&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unstack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;con&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Define 16 signals to plot&lt;/span&gt;
&lt;span class="n"&gt;sig_combinations&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;ix_ref&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="n"&gt;plt_sig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;signals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;noise_level&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;noise_level&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;n_combs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sig_combinations&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;axs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplots&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n_combs&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;figsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n_combs&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;comp_a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;comp_b&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sig_combinations&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;axs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ravel&lt;/span&gt;&lt;span class="p"&gt;()):&lt;/span&gt;
    &lt;span class="n"&gt;iia&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;iib&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt_sig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iloc&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;comp_a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;comp_b&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;250&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;
    &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;iia&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;iib&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;CC: &lt;/span&gt;&lt;span class="si"&gt;{0}&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;Coh: &lt;/span&gt;&lt;span class="si"&gt;{1}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;plt_df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iloc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;comp_b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;:]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;img alt="../_images/11d98946c2f02a89099f205ecf3379a9c00e29dbdefe89009ffb6ff1fa194bf0.png" src="../_images/11d98946c2f02a89099f205ecf3379a9c00e29dbdefe89009ffb6ff1fa194bf0.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Finally, for a more direct comparison, we can look directly at the difference between the two as a function of both noise level and the sine wave parameters.&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;diff_con&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;con_all&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;noise_level&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unstack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;con&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;diff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;diff_con&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;diff_con&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;coh&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;diff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;diff&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unstack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;noise_level&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;diff&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;figsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;img alt="../_images/6fbeec0d4e943912f03ce9954b5364c13fb30a850511a6e76e0333b3f8e87747.png" src="../_images/6fbeec0d4e943912f03ce9954b5364c13fb30a850511a6e76e0333b3f8e87747.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;So what does this mean? Well, the relationship between coherence and correlation is too complicated to sum it up in a single line or two. However, it is clear that correlation is more sensitive to differences between signals in time. Coherence, on the other hand, is more reliable for these differences. Moreover, correlation degrades quickly with an increase in noise, while coherence remains the same.&lt;/p&gt;
&lt;p&gt;As such, if you care about understanding the relationship between two signals as it pertains to time, then perhaps correlation is the way to go. On the other hand, if you want a robust estimate of the amount of overlap in the structure of two signals, then coherence may be the best bet.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://chrisholdgraf.com/blog/2015/2015-05-27-coherence_correlation/" rel="alternate"/>
    <summary>Note - you can find the nbviewer of this post hereA big question that I’ve always wrestled with is the difference between correlation and coherence. Intuitively, I think of these two things as very similar to one another. Correlation is a way to determine the extent to which two variables covary (normalized to be between -1 and 1). Coherence is similar, but instead assesses “similarity” by looking at the similarity for two variables in frequency space, rather than time space.</summary>
    <category term="correlation" label="correlation"/>
    <category term="programming" label="programming"/>
    <category term="python" label="python"/>
    <category term="timeseries" label="timeseries"/>
    <published>2015-05-27T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://chrisholdgraf.com/blog/2015/2015-08-30-craigslist_scrape/</id>
    <title>Scraping craigslist</title>
    <updated>2015-08-30T00:00:00+00:00</updated>
    <content type="html">&lt;section id="scraping-craigslist"&gt;

&lt;section id="overview"&gt;
&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;In this notebook, I’ll show you how to make a simple query on Craigslist using some nifty python modules. You can take advantage of all the structure data that exists on webpages to collect interesting datasets.&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bs4&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;bs4&lt;/span&gt;
&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="k"&gt;pylab&lt;/span&gt; inline
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;First we need to figure out how to submit a query to Craigslist. As with many websites, one way you can do this is simply by constructing the proper URL and sending it to Craigslist. Here’s a sample URL that is returned after manually typing in a search to Craigslist:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;http://sfbay.craigslist.org/search/eby/apa?bedrooms=1&amp;amp;pets_cat=1&amp;amp;pets_dog=1&amp;amp;is_furnished=1&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;This is actually two separate things. The first tells craigslist what kind of thing we’re searching for:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;http://sfbay.craigslist.org/search/eby/apa&lt;/span&gt;&lt;/code&gt; says we’re searching in the sfbay area (&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;sfbay&lt;/span&gt;&lt;/code&gt;) for apartments (&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;apa&lt;/span&gt;&lt;/code&gt;) in the east bay (&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;eby&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;The second part contains the parameters that we pass to the search:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;?bedrooms=1&amp;amp;pets_cat=1&amp;amp;pets_dog=1&amp;amp;is_furnished=1&lt;/span&gt;&lt;/code&gt; says we want 1+ bedrooms, cats allowed, dogs allowed, and furnished apartments. You can manually change these fields in order to create new queries.&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;/section&gt;
&lt;section id="getting-a-single-posting"&gt;
&lt;h2&gt;Getting a single posting&lt;/h2&gt;
&lt;p&gt;So, we’ll use this knowledge to send some custom URLs to Craigslist. We’ll do this using the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;requests&lt;/span&gt;&lt;/code&gt; python module, which is really useful for querying websites.&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In internet lingo, we’re posting a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;get&lt;/span&gt;&lt;/code&gt; requests to the website, which simply says that we’d like to get some information from the Craigslist website.  With requests, we can easily create a dictionary that specifies parameters in the URL:&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;url_base&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://sfbay.craigslist.org/search/eby/apa&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bedrooms&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;is_furnished&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;rsp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url_base&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Note that requests automatically created the right URL:&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rsp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# We can access the content of the response that Craigslist sent back here:&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rsp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Wow, that’s a lot of code. Remember, websites serve HTML documents, and usually your browser will automatically render this into a nice webpage for you. Since we’re doing this with python, we get back the raw text. This is really useful, but how can we possibly parse it all?&lt;/p&gt;
&lt;p&gt;For this, we’ll turn to another great package, BeautifulSoup:&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# BS4 can quickly parse our text, make sure to tell it that you&amp;#39;re giving html&lt;/span&gt;
&lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bs4&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rsp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;html.parser&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# BS makes it easy to look through a document&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;prettify&lt;/span&gt;&lt;span class="p"&gt;()[:&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Beautiful soup lets us quickly search through an HTML document. We can pull out whatever information we want.&lt;/p&gt;
&lt;p&gt;Scanning through this text, we see a common structure repeated &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="pre"&gt;class=&amp;quot;row&amp;quot;&amp;gt;&lt;/span&gt;&lt;/code&gt;. This seems to be the container that has information for a single apartment.&lt;/p&gt;
&lt;p&gt;In BeautifulSoup, we can quickly get all instances of this container:&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# find_all will pull entries that fit your search criteria.&lt;/span&gt;
&lt;span class="c1"&gt;# Note that we have to use brackets to define the `attrs` dictionary&lt;/span&gt;
&lt;span class="c1"&gt;# Because &amp;quot;class&amp;quot; is a special word in python, so we need to give a string.&lt;/span&gt;
&lt;span class="n"&gt;apts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;p&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;class&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;row&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;apts&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now let’s look inside the values of a single apartment listing:&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# We can see that there&amp;#39;s a consistent structure to a listing.&lt;/span&gt;
&lt;span class="c1"&gt;# There is a &amp;#39;time&amp;#39;, a &amp;#39;name&amp;#39;, a &amp;#39;housing&amp;#39; field with size/n_brs, etc.&lt;/span&gt;
&lt;span class="n"&gt;this_appt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;apts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;this_appt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;prettify&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;div class="output traceback highlight-ipythontb notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gt"&gt;---------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="ne"&gt;IndexError&lt;/span&gt;&lt;span class="g g-Whitespace"&gt;                                &lt;/span&gt;Traceback (most recent call last)
&lt;span class="nn"&gt;&amp;lt;ipython-input-8-b82880a42248&amp;gt;&lt;/span&gt; in &lt;span class="ni"&gt;&amp;lt;module&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;()&lt;/span&gt;
&lt;span class="g g-Whitespace"&gt;      &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="c1"&gt;# We can see that there&amp;#39;s a consistent structure to a listing.&lt;/span&gt;
&lt;span class="g g-Whitespace"&gt;      &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="c1"&gt;# There is a &amp;#39;time&amp;#39;, a &amp;#39;name&amp;#39;, a &amp;#39;housing&amp;#39; field with size/n_brs, etc.&lt;/span&gt;
&lt;span class="ne"&gt;----&amp;gt; &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="n"&gt;this_appt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;apts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="g g-Whitespace"&gt;      &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;this_appt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;prettify&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

&lt;span class="ne"&gt;IndexError&lt;/span&gt;: list index out of range
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# So now we&amp;#39;ll pull out a couple of things we might be interested in:&lt;/span&gt;
&lt;span class="c1"&gt;# It looks like &amp;quot;housing&amp;quot; contains size information. We&amp;#39;ll pull that.&lt;/span&gt;
&lt;span class="c1"&gt;# Note that `findAll` returns a list, since there&amp;#39;s only one entry in&lt;/span&gt;
&lt;span class="c1"&gt;# this HTML, we&amp;#39;ll just pull the first item.&lt;/span&gt;
&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;this_appt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;class&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;housing&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;div class="output traceback highlight-ipythontb notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gt"&gt;---------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="ne"&gt;NameError&lt;/span&gt;&lt;span class="g g-Whitespace"&gt;                                 &lt;/span&gt;Traceback (most recent call last)
&lt;span class="nn"&gt;&amp;lt;ipython-input-9-4fb8a04b88f7&amp;gt;&lt;/span&gt; in &lt;span class="ni"&gt;&amp;lt;module&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;()&lt;/span&gt;
&lt;span class="g g-Whitespace"&gt;      &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="c1"&gt;# Note that `findAll` returns a list, since there&amp;#39;s only one entry in&lt;/span&gt;
&lt;span class="g g-Whitespace"&gt;      &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="c1"&gt;# this HTML, we&amp;#39;ll just pull the first item.&lt;/span&gt;
&lt;span class="ne"&gt;----&amp;gt; &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;this_appt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;class&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;housing&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;
&lt;span class="g g-Whitespace"&gt;      &lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="ne"&gt;NameError&lt;/span&gt;: name &amp;#39;this_appt&amp;#39; is not defined
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;We can query split this into n_bedrooms and the size. However, note that sometimes one of these features might be missing. So we’ll use an &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;if&lt;/span&gt;&lt;/code&gt; statement to try and capture this variability:&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;find_size_and_brs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;split&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/- &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; - &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;n_brs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;br&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;this_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ft2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;br&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
        &lt;span class="c1"&gt;# It&amp;#39;s the n_bedrooms&lt;/span&gt;
        &lt;span class="n"&gt;n_brs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;br&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;this_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nan&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ft2&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
        &lt;span class="c1"&gt;# It&amp;#39;s the size&lt;/span&gt;
        &lt;span class="n"&gt;this_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ft2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;n_brs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nan&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;this_size&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n_brs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;this_size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n_brs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;find_size_and_brs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;div class="output traceback highlight-ipythontb notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gt"&gt;---------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="ne"&gt;AttributeError&lt;/span&gt;&lt;span class="g g-Whitespace"&gt;                            &lt;/span&gt;Traceback (most recent call last)
&lt;span class="nn"&gt;&amp;lt;ipython-input-10-56ab1d345ab4&amp;gt;&lt;/span&gt; in &lt;span class="ni"&gt;&amp;lt;module&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;()&lt;/span&gt;
&lt;span class="g g-Whitespace"&gt;     &lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;         &lt;span class="n"&gt;n_brs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nan&lt;/span&gt;
&lt;span class="g g-Whitespace"&gt;     &lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;     &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;this_size&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n_brs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="ne"&gt;---&amp;gt; &lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt; &lt;span class="n"&gt;this_size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n_brs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;find_size_and_brs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nn"&gt;&amp;lt;ipython-input-10-56ab1d345ab4&amp;gt;&lt;/span&gt; in &lt;span class="ni"&gt;find_size_and_brs&lt;/span&gt;&lt;span class="nt"&gt;(size)&lt;/span&gt;
&lt;span class="g g-Whitespace"&gt;      &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;find_size_and_brs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="ne"&gt;----&amp;gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;     &lt;span class="n"&gt;split&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/- &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; - &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="g g-Whitespace"&gt;      &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;     &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="g g-Whitespace"&gt;      &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;         &lt;span class="n"&gt;n_brs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;br&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="g g-Whitespace"&gt;      &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;         &lt;span class="n"&gt;this_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ft2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="ne"&gt;AttributeError&lt;/span&gt;: &amp;#39;function&amp;#39; object has no attribute &amp;#39;strip&amp;#39;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Now we&amp;#39;ll also pull a few other things:&lt;/span&gt;
&lt;span class="n"&gt;this_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;this_appt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;time&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;datetime&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;this_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;this_time&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;this_price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;this_appt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;span&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;class&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;price&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;this_title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;this_appt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;class&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hdrlnk&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;div class="output traceback highlight-ipythontb notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gt"&gt;---------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="ne"&gt;NameError&lt;/span&gt;&lt;span class="g g-Whitespace"&gt;                                 &lt;/span&gt;Traceback (most recent call last)
&lt;span class="nn"&gt;&amp;lt;ipython-input-11-bc17374a1087&amp;gt;&lt;/span&gt; in &lt;span class="ni"&gt;&amp;lt;module&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;()&lt;/span&gt;
&lt;span class="g g-Whitespace"&gt;      &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="c1"&gt;# Now we&amp;#39;ll also pull a few other things:&lt;/span&gt;
&lt;span class="ne"&gt;----&amp;gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;this_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;this_appt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;time&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;datetime&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="g g-Whitespace"&gt;      &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="n"&gt;this_time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;this_time&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="g g-Whitespace"&gt;      &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="n"&gt;this_price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;this_appt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;span&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;class&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;price&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="g g-Whitespace"&gt;      &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="n"&gt;this_title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;this_appt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;class&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hdrlnk&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;

&lt;span class="ne"&gt;NameError&lt;/span&gt;: name &amp;#39;this_appt&amp;#39; is not defined
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Now we&amp;#39;ve got the n_bedrooms, size, price, and time of listing&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;this_size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n_brs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;this_time&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;this_price&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;this_title&lt;/span&gt;&lt;span class="p"&gt;]]))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;div class="output traceback highlight-ipythontb notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gt"&gt;---------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="ne"&gt;NameError&lt;/span&gt;&lt;span class="g g-Whitespace"&gt;                                 &lt;/span&gt;Traceback (most recent call last)
&lt;span class="nn"&gt;&amp;lt;ipython-input-12-6b0491d04915&amp;gt;&lt;/span&gt; in &lt;span class="ni"&gt;&amp;lt;module&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;()&lt;/span&gt;
&lt;span class="g g-Whitespace"&gt;      &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="c1"&gt;# Now we&amp;#39;ve got the n_bedrooms, size, price, and time of listing&lt;/span&gt;
&lt;span class="ne"&gt;----&amp;gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;this_size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n_brs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;this_time&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;this_price&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;this_title&lt;/span&gt;&lt;span class="p"&gt;]]))&lt;/span&gt;

&lt;span class="ne"&gt;NameError&lt;/span&gt;: name &amp;#39;this_size&amp;#39; is not defined
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="querying-lots-of-postings"&gt;
&lt;h2&gt;Querying lots of postings&lt;/h2&gt;
&lt;p&gt;Cool - so now we’ve got some useful information about one listing. Now let’s loop through many listings across several locations.&lt;/p&gt;
&lt;p&gt;It looks like there is a “city code” that distinguishes where you’re searching. Here is a &lt;strong&gt;not&lt;/strong&gt; up to date list: &lt;a class="reference external" href="https://sites.google.com/site/clsiteinfo/city-site-code-sort"&gt;link&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Within the Bay Area, there are also a lot of sub-regional locations, which we’ll define here, then loop through them all.&lt;/p&gt;
&lt;p&gt;Note that the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;s&lt;/span&gt;&lt;/code&gt; parameter tells Craiglist where to start in terms of the number of results given back. E.g., if s==100, then it starts at the 100th entry.&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;loc_prefixes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;eby&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;nby&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;sfc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;sby&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;scz&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;We’ll define a few helper functions to handle edge cases and make sure that we don’t get any errors.&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;find_prices&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;prices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;rw&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;rw&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;span&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;class&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;result-price&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nan&lt;/span&gt;
        &lt;span class="n"&gt;prices&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;prices&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;find_times&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;times&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;rw&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;apts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;datetime&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nan&lt;/span&gt;
        &lt;span class="n"&gt;times&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;times&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now we’re ready to go. We’ll loop through all of our locations, and pull a number of entries for each one. We’ll use a pandas dataframe to store everything, because this will be useful for future analysis.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; - Craigslist won’t take kindly to you querying their server a bunch of times at once. Make sure not to pull too much data too quickly. Another option is to add a delay to each loop iteration. Otherwise your IP might get banned.&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;prettify&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;div class="output traceback highlight-ipythontb notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gt"&gt;---------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="ne"&gt;NameError&lt;/span&gt;&lt;span class="g g-Whitespace"&gt;                                 &lt;/span&gt;Traceback (most recent call last)
&lt;span class="nn"&gt;&amp;lt;ipython-input-9-97e76ea257b9&amp;gt;&lt;/span&gt; in &lt;span class="ni"&gt;&amp;lt;module&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;()&lt;/span&gt;
&lt;span class="ne"&gt;----&amp;gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;prettify&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

&lt;span class="ne"&gt;NameError&lt;/span&gt;: name &amp;#39;txt&amp;#39; is not defined
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;find_size_and_brs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;split&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;split&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ii&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; -&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;ii&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;n_brs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;br&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;this_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ft2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;br&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
        &lt;span class="c1"&gt;# It&amp;#39;s the n_bedrooms&lt;/span&gt;
        &lt;span class="n"&gt;n_brs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;br&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;this_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nan&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ft2&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
        &lt;span class="c1"&gt;# It&amp;#39;s the size&lt;/span&gt;
        &lt;span class="n"&gt;this_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ft2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;n_brs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nan&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;this_size&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n_brs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Now loop through all of this and store the results&lt;/span&gt;
&lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;  &lt;span class="c1"&gt;# We&amp;#39;ll store the data here&lt;/span&gt;
&lt;span class="c1"&gt;# Careful with this...too many queries == your IP gets banned temporarily&lt;/span&gt;
&lt;span class="n"&gt;search_indices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;loc_prefixes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;eby&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;loc&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;loc_prefixes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="n"&gt;loc&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;search_indices&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://sfbay.craigslist.org/search/&lt;/span&gt;&lt;span class="si"&gt;{0}&lt;/span&gt;&lt;span class="s1"&gt;/apa&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;resp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;bedrooms&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;s&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="n"&gt;txt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bs4&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;html.parser&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;apts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;class&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;result-info&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;

        &lt;span class="c1"&gt;# Find the size of all entries&lt;/span&gt;
        &lt;span class="n"&gt;size_text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;rw&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;class&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;housing&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;
                     &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;rw&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;apts&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;sizes_brs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;find_size_and_brs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stxt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;stxt&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;size_text&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;sizes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n_brs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;sizes_brs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# This unzips into 2 vectors&lt;/span&gt;

        &lt;span class="c1"&gt;# Find the title and link&lt;/span&gt;
        &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;rw&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;class&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hdrlnk&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;
                      &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;rw&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;apts&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;links&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;rw&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;class&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hdrlnk&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;href&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                 &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;rw&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;apts&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

        &lt;span class="c1"&gt;# Find the time&lt;/span&gt;
        &lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rw&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;time&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;datetime&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;rw&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;apts&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;find_prices&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;apts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# We&amp;#39;ll create a dataframe to store all the data&lt;/span&gt;
        &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;price&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sizes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n_brs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;links&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;col_names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;time&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;price&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;size&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;brs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;link&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;col_names&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;time&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# Add the location variable to all entries&lt;/span&gt;
        &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;loc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;loc&lt;/span&gt;
        &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        
&lt;span class="c1"&gt;# Finally, concatenate all the results&lt;/span&gt;
&lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;concat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;seconds_to_days&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seconds&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mf"&gt;60.&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mf"&gt;60.&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mf"&gt;24.&lt;/span&gt;

&lt;span class="c1"&gt;# We&amp;#39;ll make sure that the right columns are represented numerically:&lt;/span&gt;
&lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;price&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;size&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;brs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;price&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;size&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;brs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;convert_objects&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;convert_numeric&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;time&amp;#39;&lt;/span&gt;

&lt;span class="c1"&gt;# Add the age of each result&lt;/span&gt;
&lt;span class="n"&gt;now&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utcnow&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;age&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;1.&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;seconds_to_days&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;now&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;ii&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;total_seconds&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
                  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;ii&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# And there you have it:&lt;/span&gt;
&lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;div class="output text_html"&gt;&lt;div&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;price&lt;/th&gt;
      &lt;th&gt;size&lt;/th&gt;
      &lt;th&gt;brs&lt;/th&gt;
      &lt;th&gt;title&lt;/th&gt;
      &lt;th&gt;link&lt;/th&gt;
      &lt;th&gt;loc&lt;/th&gt;
      &lt;th&gt;age&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;time&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;2016-11-17 09:12:00&lt;/th&gt;
      &lt;td&gt;2450.0&lt;/td&gt;
      &lt;td&gt;850.0&lt;/td&gt;
      &lt;td&gt;3.0&lt;/td&gt;
      &lt;td&gt;APARTMENT 3 BR/ 1 BT&lt;/td&gt;
      &lt;td&gt;/eby/apa/5873549022.html&lt;/td&gt;
      &lt;td&gt;eby&lt;/td&gt;
      &lt;td&gt;2.952374&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2016-11-17 09:12:00&lt;/th&gt;
      &lt;td&gt;2005.0&lt;/td&gt;
      &lt;td&gt;790.0&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;Perfect Cozy One-Bedroom Available Now! Only $...&lt;/td&gt;
      &lt;td&gt;/eby/apa/5880750933.html&lt;/td&gt;
      &lt;td&gt;eby&lt;/td&gt;
      &lt;td&gt;2.952374&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2016-11-17 09:12:00&lt;/th&gt;
      &lt;td&gt;1875.0&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;FANTASTIC PLACE - Lovely Yard!&lt;/td&gt;
      &lt;td&gt;/eby/apa/5870868630.html&lt;/td&gt;
      &lt;td&gt;eby&lt;/td&gt;
      &lt;td&gt;2.952374&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2016-11-17 09:11:00&lt;/th&gt;
      &lt;td&gt;1525.0&lt;/td&gt;
      &lt;td&gt;650.0&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
      &lt;td&gt;Large 1 bedroom Washer/Dryer&lt;/td&gt;
      &lt;td&gt;/eby/apa/5865407315.html&lt;/td&gt;
      &lt;td&gt;eby&lt;/td&gt;
      &lt;td&gt;2.946333&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2016-11-17 09:11:00&lt;/th&gt;
      &lt;td&gt;6000.0&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;3.0&lt;/td&gt;
      &lt;td&gt;3BR/2.5BA Home Panoramic Views (90 Skyway Lane)&lt;/td&gt;
      &lt;td&gt;/eby/apa/5880673685.html&lt;/td&gt;
      &lt;td&gt;eby&lt;/td&gt;
      &lt;td&gt;2.946333&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;price&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bins&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;))[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Mother of god.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fontsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_xlabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Price&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fontsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_ylabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Count&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fontsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;img alt="../_images/2c7f9b06d258220cbe83caa9f29188e2a6da84e3b74ba4e0e1673b0172fbad1b.png" src="../_images/2c7f9b06d258220cbe83caa9f29188e2a6da84e3b74ba4e0e1673b0172fbad1b.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;target_price&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;2200.&lt;/span&gt;
&lt;span class="n"&gt;target_size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1400.&lt;/span&gt;
&lt;span class="n"&gt;highlight&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;([[&lt;/span&gt;&lt;span class="n"&gt;target_price&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target_size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;eby&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Mine&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;None&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;age&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;()]],&lt;/span&gt;
                         &lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;price&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;size&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;brs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;loc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;link&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;mine&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;age&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mine&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;highlight&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;altair&lt;/span&gt;
&lt;span class="n"&gt;graph&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;altair&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Chart&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;graph&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mark_circle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;encode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;size&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;price&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                   &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mine:N&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;div class="output text_html"&gt;&lt;div class="vega-embed" id="b5c5d25b-82b9-48b4-b4c5-5596b3e90154"&gt;&lt;/div&gt;

&lt;style&gt;
.vega-embed svg, .vega-embed canvas {
  border: 1px dotted gray;
}

.vega-embed .vega-actions a {
  margin-right: 6px;
}
&lt;/style&gt;
&lt;/div&gt;&lt;script type="application/javascript"&gt;var spec = {"data": {"values": [{"loc": "eby", "title": "APARTMENT 3 BR/ 1 BT", "price": 2450.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5873549022.html", "age": 2.9523737188733326, "size": 850.0}, {"loc": "eby", "title": "Perfect Cozy One-Bedroom Available Now! Only $199 Deposit!", "price": 2005.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5880750933.html", "age": 2.9523737188733326, "size": 790.0}, {"loc": "eby", "title": "FANTASTIC PLACE - Lovely Yard!", "price": 1875.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5870868630.html", "age": 2.9523737188733326, "size": null}, {"loc": "eby", "title": "Large 1 bedroom Washer/Dryer", "price": 1525.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5865407315.html", "age": 2.9463329716285505, "size": 650.0}, {"loc": "eby", "title": "3BR/2.5BA Home Panoramic Views (90 Skyway Lane)", "price": 6000.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5880673685.html", "age": 2.9463329716285505, "size": null}, {"loc": "eby", "title": "1 bed/1 bath Gated Community", "price": 1525.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5868393446.html", "age": 2.9463329716285505, "size": 650.0}, {"loc": "eby", "title": "Online Leasing As Easy As 1-2-3!", "price": 2185.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5880747734.html", "age": 2.940316893427064, "size": 650.0}, {"loc": "eby", "title": "Great house in great locality.\u0a22..everything near around..Nice Offer..", "price": 2055.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5880732954.html", "age": 2.940316893427064, "size": 1619.0}, {"loc": "eby", "title": "Fall Special...Move in before the HOLIDAY'S!!", "price": 1795.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5880736437.html", "age": 2.940316893427064, "size": 725.0}, {"loc": "eby", "title": "Duplex ONLY FEW BLOCK TO LAKER MERRITT", "price": 2250.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5873527186.html", "age": 2.940316893427064, "size": 950.0}, {"loc": "eby", "title": "Beautiful spacious house at excellent location in Brentwood", "price": 2350.0, "brs": 4.0, "mine": 0, "link": "/eby/apa/5835245780.html", "age": 2.940316893427064, "size": 2254.0}, {"loc": "eby", "title": "Charming Apartments in Central Pleasant Hill", "price": 1970.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880733651.html", "age": 2.934325333462626, "size": null}, {"loc": "eby", "title": "Crystal Pool, Fitness Room, Tennis Courts!", "price": 2135.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880746273.html", "age": 2.934325333462626, "size": null}, {"loc": "eby", "title": "PRICE REDUCED-Lrg 1x1 in beautiful LEED-Certified Green Bldg", "price": 2800.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5880745508.html", "age": 2.934325333462626, "size": 709.0}, {"loc": "eby", "title": "Vaulted 2x2 Spacious", "price": 1825.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5868390299.html", "age": 2.934325333462626, "size": 1000.0}, {"loc": "eby", "title": "Sunny and Spacious House Fully remodeled", "price": 1995.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5880643207.html", "age": 2.934325333462626, "size": 1089.0}, {"loc": "eby", "title": "Quiet and secure building", "price": 900.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880717062.html", "age": 2.928358142155696, "size": null}, {"loc": "eby", "title": "Beautiful 2 bedrooms here at Cornerstone!!", "price": 2260.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880743978.html", "age": 2.928358142155696, "size": 982.0}, {"loc": "eby", "title": "Piedmont home near Beach School. Pet friendly", "price": 6000.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5880743264.html", "age": 2.928358142155696, "size": 1540.0}, {"loc": "eby", "title": "Albany House, 3 bdrm, 2.5 bath.", "price": 3500.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5875976357.html", "age": 2.928358142155696, "size": 1300.0}, {"loc": "eby", "title": "Newly Remodeled  Duplex!!! Pets Allowed", "price": 2400.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880728188.html", "age": 2.928358142155696, "size": 1834.0}, {"loc": "eby", "title": "1 bedrooms Just $1907 Don't Miss Out!!", "price": 1907.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5880742819.html", "age": 2.9224151711409947, "size": 671.0}, {"loc": "eby", "title": "Garden home + garage", "price": 3175.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880742415.html", "age": 2.9224151711409947, "size": 1100.0}, {"loc": "eby", "title": "Gorgeous 2 BR, 1 bath home", "price": 800.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880719680.html", "age": 2.9224151711409947, "size": null}, {"loc": "eby", "title": "Large 2 bedroom Apartment", "price": 800.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880719145.html", "age": 2.9224151711409947, "size": null}, {"loc": "eby", "title": "Quiet, sunny, remodeled 2nd floor 1 bd/1 ba Apt in the heart of", "price": 2250.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5863321866.html", "age": 2.9164962732552047, "size": 650.0}, {"loc": "eby", "title": "Affordable 2 Bedroom 1 Bathroom", "price": 800.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880720133.html", "age": 2.9164962732552047, "size": null}, {"loc": "eby", "title": "$1550 -- Newly Remodeled 1Bd/1Ba -- In Laurel District", "price": 1550.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5880739960.html", "age": 2.9164962732552047, "size": 550.0}, {"loc": "eby", "title": "Quiet, safe, beautiful Apt in Upper Castro Valley, 1Bd/1Ba", "price": 1795.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5835093533.html", "age": 2.9164962732552047, "size": 535.0}, {"loc": "eby", "title": "\"FULLY REMODELED\" 2 Bdrm, 1 Bath, 4plex", "price": 1995.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880727614.html", "age": 2.9106013025248263, "size": null}, {"loc": "eby", "title": "Cheery Apartments in Central Pleasant Hill", "price": 1735.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5880725913.html", "age": 2.9106013025248263, "size": null}, {"loc": "eby", "title": "Exceptionally Remodeled Great Downtown Location &amp; EZ Commute to SF", "price": 1500.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5871906429.html", "age": 2.9106013025248263, "size": 950.0}, {"loc": "eby", "title": "Holiday Savings! Spacious 2 bed, 2 bath with a view in Dublin", "price": 2695.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880737523.html", "age": 2.9106013025248263, "size": 1058.0}, {"loc": "eby", "title": "Enjoy Point Richmond to its Fullest-1 Bdrm 1 Bath at Point Lodge", "price": 1750.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5839964394.html", "age": 2.904730114154173, "size": null}, {"loc": "eby", "title": "1 Bdrm 1 Bath at Point Lodge", "price": 1699.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5867560557.html", "age": 2.904730114154173, "size": null}, {"loc": "eby", "title": "Home for Rent - Downtown Pleasanton", "price": 2950.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880735972.html", "age": 2.904730114154173, "size": 1169.0}, {"loc": "eby", "title": "Adorable 2 Bedroom Home", "price": 800.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880720745.html", "age": 2.893058511127393, "size": null}, {"loc": "eby", "title": "\"FULLY REMODELED\" 1 Bdrm, 1 Bath, 4plex", "price": 1695.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5880728011.html", "age": 2.881480328918747, "size": null}, {"loc": "eby", "title": "One Bedroom One Bath NOW AVAILABLE", "price": 1889.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5877531171.html", "age": 2.875725920813064, "size": null}, {"loc": "eby", "title": "The Deal Of The Week! Open House TODAY!", "price": 2105.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880726255.html", "age": 2.875725920813064, "size": 964.0}, {"loc": "eby", "title": "QUIET AWARD WINNING COMMUNITY  W YEAR ROUND POOL,  HOT TUB &amp; GYM", "price": 1785.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5873305584.html", "age": 2.869994450373114, "size": 684.0}, {"loc": "eby", "title": "\"FULLY REMODELED\" 1 Bdrm, 1 Bath, 4plex", "price": 1695.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5880725713.html", "age": 2.869994450373114, "size": null}, {"loc": "eby", "title": "Enjoy The Holidays in Your New Home! Ask About our Fall Special!", "price": 2425.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880724198.html", "age": 2.8642857807238356, "size": 1049.0}, {"loc": "eby", "title": "Wonderful 1 bath, lower level condo avail. now-Premium Properties", "price": 1900.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5867879512.html", "age": 2.8642857807238356, "size": 1000.0}, {"loc": "eby", "title": "\"FULLY REMODELED\" 3 Bdrm, 1 Bath, Duplex", "price": 3295.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880723462.html", "age": 2.8642857807238356, "size": null}, {"loc": "eby", "title": "Updated Piedmont border:  large unit; bonus room; walk score 94", "price": 1995.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5869936389.html", "age": 2.8642857807238356, "size": null}, {"loc": "eby", "title": "\"FULLY REMODELED\" 2 Bdrm, 1 Bath, SFR", "price": 3295.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880723052.html", "age": 2.8642857807238356, "size": null}, {"loc": "eby", "title": "Piedmont Border: large updated w/ bonus room; walk to the Ave", "price": 1995.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5869924832.html", "age": 2.8642857807238356, "size": null}, {"loc": "eby", "title": "BEAUTIFUL 1BR AVAILABLE!!", "price": 1907.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5880719582.html", "age": 2.8529363017206006, "size": 684.0}, {"loc": "eby", "title": "82 Inverleith Terrace", "price": 11000.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5876696600.html", "age": 2.8529363017206006, "size": 3300.0}, {"loc": "eby", "title": "Reserve Your New Home  Today..Waiting List is Open!", "price": 1635.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5880718985.html", "age": 2.8472952240079015, "size": null}, {"loc": "eby", "title": "WHEN THE PRICE IS RIGHT WHY WAIT A SECOND LONGER? - CALL IN NOW", "price": 1443.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5880700755.html", "age": 2.8472952240079015, "size": 644.0}, {"loc": "eby", "title": "SPECIAL $500 OFF MOVE IN!!! 2nd FLOOR 2X2 WITH LARGE BALCONY", "price": 2100.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5856275465.html", "age": 2.841676410347236, "size": 952.0}, {"loc": "eby", "title": "Come See Your New Home, Quiet 2bd/1.5 bath", "price": 1475.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5876160041.html", "age": 2.8360797291914674, "size": null}, {"loc": "eby", "title": "Enjoy 2 Bedroom 1 Bath close to downtown Pleasanton", "price": 2275.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880715111.html", "age": 2.8360797291914674, "size": 865.0}, {"loc": "eby", "title": "2nd Floor, 1 Bed/1 Bath! AVAILABLE NOW!", "price": 2231.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5880714856.html", "age": 2.8360797291914674, "size": 710.0}, {"loc": "eby", "title": "Large 1 Bedroom 2 Blocks from BART", "price": 2750.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5880713877.html", "age": 2.8360797291914674, "size": 675.0}, {"loc": "eby", "title": "Charming Downtown Walnut Creek Apartment", "price": 1905.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5880713322.html", "age": 2.8305050500277464, "size": 665.0}, {"loc": "eby", "title": "Large Remodeled 2 Bath W/ Balcony! Walk To BART! Open House Sat @ 3P!", "price": 2850.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5873646518.html", "age": 2.8305050500277464, "size": 1025.0}, {"loc": "eby", "title": "2011 Sierra Rd.", "price": 2350.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5880711776.html", "age": 2.8249522433673726, "size": null}, {"loc": "eby", "title": "Nice 3/2 with new kitchen!", "price": 2600.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5862804234.html", "age": 2.8194211807357634, "size": 1404.0}, {"loc": "eby", "title": "Great 3/2.5 townhome near 680/4!", "price": 2430.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5862778095.html", "age": 2.8194211807357634, "size": 1515.0}, {"loc": "eby", "title": "Open House Sat @ 3P! Penthouse W/ Parking, W/D! Near Whole Foods!", "price": 3150.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5873645759.html", "age": 2.8194211807357634, "size": 1025.0}, {"loc": "eby", "title": "Nice 3/2 townhome in Walnut Creek!", "price": 2600.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5862830355.html", "age": 2.8194211807357634, "size": 1352.0}, {"loc": "eby", "title": "View Townhome! 3/2.5 in Martinez!", "price": 2240.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5864207668.html", "age": 2.8139117346625495, "size": 1338.0}, {"loc": "eby", "title": "Come On In and Ask About Our November Special Now!!", "price": 1945.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5880707678.html", "age": 2.8139117346625495, "size": 620.0}, {"loc": "eby", "title": "Come See Your New Home, Quiet 2bd/1.5 bath", "price": 1475.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880707556.html", "age": 2.8139117346625495, "size": null}, {"loc": "eby", "title": "Open House Sat @ 3P! Penthouse W/ In-Unit! 2 Blocks To Whole Foods!", "price": 3150.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5873636272.html", "age": 2.8084237786717785, "size": 1025.0}, {"loc": "eby", "title": "2 Bdr Lake Merritt 100% remodeled 1/2 Bl from Lake", "price": 2600.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880704271.html", "age": 2.8084237786717785, "size": null}, {"loc": "eby", "title": "Penthouse W/ In-Unit W/D, Parking! Open House Sat @ 3P!", "price": 3150.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5873636973.html", "age": 2.7975118359479008, "size": 1025.0}, {"loc": "eby", "title": "November Rent FREE On This Fantastic 1x1 in a Beautiful Community!", "price": 1515.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5880696182.html", "age": 2.7813019916955803, "size": 629.0}, {"loc": "eby", "title": "Spacious townhouse. Safe, quiet and private community. Walk to BART", "price": 2490.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5880689726.html", "age": 2.7652789171956016, "size": 1500.0}, {"loc": "eby", "title": "Stokley Properties Presents 5045 Valley Crest Dr #141 in Concord at C", "price": 2100.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5880675890.html", "age": 2.7599788399053957, "size": 1284.0}, {"loc": "eby", "title": "!!!!Wonderful remodeled unit in West Oakland near BART available now!!", "price": 1500.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5880686438.html", "age": 2.754699040556615, "size": null}, {"loc": "eby", "title": "Tilden Pl. Fairfield", "price": 1700.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5867557971.html", "age": 2.7494394029972367, "size": 1208.0}, {"loc": "eby", "title": "Taft St. Fairfield", "price": 1550.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5850586422.html", "age": 2.7494394029972367, "size": 985.0}, {"loc": "eby", "title": "Spacious Apartment Homes in Downtown Walnut Creek", "price": 2350.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880681240.html", "age": 2.7389801530571773, "size": 750.0}, {"loc": "eby", "title": "Large 4 Br/3ba house in Union City", "price": 3600.0, "brs": 4.0, "mine": 0, "link": "/eby/apa/5880680226.html", "age": 2.7389801530571773, "size": 2647.0}, {"loc": "eby", "title": "2 bed / 2.5 bath, GATED COMMUNITY Condo, opp. Las Positas CLG", "price": 2450.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5874683454.html", "age": 2.733780312765869, "size": 1213.0}, {"loc": "eby", "title": "Charming &amp; Cozy, Classic Ranch style, Single Family Home", "price": 1117.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5880615190.html", "age": 2.7182985812126637, "size": 1671.0}, {"loc": "eby", "title": "Beautiful Modern Lower Unit", "price": 2400.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5872053617.html", "age": 2.7182985812126637, "size": 700.0}, {"loc": "eby", "title": "Pepper Tree Apartments", "price": 1995.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5844003835.html", "age": 2.7131768972471315, "size": 925.0}, {"loc": "eby", "title": "Gorgeous 4 Bedroom, 3 Bath With Deck and Barbecue", "price": 6800.0, "brs": 4.0, "mine": 0, "link": "/eby/apa/5880660523.html", "age": 2.708074477033859, "size": 2797.0}, {"loc": "eby", "title": "2B/1B - Walking distance to downtown", "price": 2400.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5865548422.html", "age": 2.7029912120941924, "size": 850.0}, {"loc": "eby", "title": "2B/1B - Walking distance to downtown", "price": 2400.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5865560233.html", "age": 2.7029912120941924, "size": 850.0}, {"loc": "eby", "title": "2B/1B - Walking distance to downtown", "price": 2400.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5865545802.html", "age": 2.7029912120941924, "size": 850.0}, {"loc": "eby", "title": "!!Bright &amp; Sunny 1 bed/1bath unit on Dimond District!!!", "price": 1700.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5880664311.html", "age": 2.6928817181782967, "size": null}, {"loc": "eby", "title": "One Month Rent Free Orinda House", "price": 3900.0, "brs": 4.0, "mine": 0, "link": "/eby/apa/5880657880.html", "age": 2.6778584762313966, "size": null}, {"loc": "eby", "title": "Beautiful, Very Modern townhouse with 4BR &amp; 3BA w/ garage", "price": 2675.0, "brs": 4.0, "mine": 0, "link": "/eby/apa/5863986848.html", "age": 2.6630019297940635, "size": 1699.0}, {"loc": "eby", "title": "3Bed 2Bath BEAUTIFUL!", "price": 2495.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5880640809.html", "age": 2.6630019297940635, "size": 1482.0}, {"loc": "eby", "title": "Great furnished  2 Br 1ba upper level unit w/ storage and parking", "price": 2200.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5844555809.html", "age": 2.6580863124471157, "size": 973.0}, {"loc": "eby", "title": "Amazing Apartment Walking Distance from Berkeley University", "price": 3095.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880649544.html", "age": 2.653188809073687, "size": 675.0}, {"loc": "eby", "title": "Completely Remodeled 2 Bd/1Ba Blocks to Ashby BART", "price": 2800.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880632639.html", "age": 2.6434477452195377, "size": null}, {"loc": "eby", "title": "2.5 Bath Pleasanton Single Family house Top sc", "price": 3450.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5880630352.html", "age": 2.6434477452195377, "size": 1648.0}, {"loc": "eby", "title": "1 Br Cabin Alhambra Valley", "price": 2000.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5880645111.html", "age": 2.6434477452195377, "size": 400.0}, {"loc": "eby", "title": "Lovely End Unit 2-story Town Home", "price": 2495.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880642759.html", "age": 2.633777947474177, "size": 1012.0}, {"loc": "eby", "title": "Hillside Village Renovated Apartment!!Breath Taking Views 1 Month FREE", "price": 4695.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880642170.html", "age": 2.633777947474177, "size": 827.0}, {"loc": "eby", "title": "Refrigerator, Complimentary Coffee, 24/7 Emergency Maintenance", "price": 1964.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880641118.html", "age": 2.633777947474177, "size": 826.0}, {"loc": "eby", "title": "Newly Remodeled 2bed, 1bath Apartment-Antioch", "price": 1425.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5877089033.html", "age": 2.6289695294386095, "size": 800.0}, {"loc": "eby", "title": "Close to carpool, bus and freeway; with balcony and bonus storage room", "price": 2395.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5847403612.html", "age": 2.6146490447121016, "size": null}, {"loc": "eby", "title": "Condo in Kirkwood Village complex in Concord", "price": 1950.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5858917250.html", "age": 2.6099101564500553, "size": 902.0}, {"loc": "eby", "title": "HOME WALKING DISTANCE TO SCHOOL 3-BR/2.5-BA FREMONT/BIG BACKYARD", "price": 3000.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5880614842.html", "age": 2.600483727433511, "size": 1574.0}, {"loc": "eby", "title": "Clean, spacious unit with new carpet &amp; paint - 4 blocks from UCB", "price": 2500.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880625750.html", "age": 2.591125145798244, "size": 650.0}, {"loc": "eby", "title": "Beautiful &amp; Spacious 3BR 2BA home in Livermore w/ large backyard", "price": 2995.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5876835023.html", "age": 2.5864710692521204, "size": 1227.0}, {"loc": "eby", "title": "Wonderful 3BR 2BA home w/ two car Garage in Hayward", "price": 3075.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5876845491.html", "age": 2.5864710692521204, "size": 1154.0}, {"loc": "eby", "title": "Large, Sunny One Bed at Temescal Village", "price": 1935.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5880622753.html", "age": 2.5864710692521204, "size": null}, {"loc": "eby", "title": "2 Bed 2.5 Bath Townhouse", "price": 2550.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880620307.html", "age": 2.581833681666529, "size": 1400.0}, {"loc": "eby", "title": "2 Bath Updated House in Central Lafyette for Rent", "price": 3995.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5880618492.html", "age": 2.572608615592249, "size": 1608.0}, {"loc": "eby", "title": "Ready For You Come See", "price": 2100.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5872207168.html", "age": 2.568020759806348, "size": 882.0}, {"loc": "eby", "title": "Historic Work/Live Loft - Parking, AC, Laundry", "price": 2400.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5873767565.html", "age": 2.568020759806348, "size": 1600.0}, {"loc": "eby", "title": "Gorgeous Furnished 2 bedroom 2 bathroom ~ J.Wavro", "price": 3675.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880613394.html", "age": 2.5588939642198762, "size": null}, {"loc": "eby", "title": "N ORINDA House Grand .5 Acre Sunny Quiet Tranquil PeacefulPrivate 6+mo", "price": 5000.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5873248487.html", "age": 2.5588939642198762, "size": 2100.0}, {"loc": "eby", "title": "2 Bed 2.5 Bath Townhouse", "price": 2550.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5848032495.html", "age": 2.5588939642198762, "size": 1400.0}, {"loc": "eby", "title": "Discovery Bay Home for Rent", "price": 2550.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5864027161.html", "age": 2.554354850879327, "size": 1900.0}, {"loc": "eby", "title": "GORGEOUS 4BR 2.5BA BRENTWOOD HOUSE NEAR PARK, Vasco Rd", "price": 2380.0, "brs": 4.0, "mine": 0, "link": "/eby/apa/5875604784.html", "age": 2.54532476385486, "size": 2000.0}, {"loc": "eby", "title": "Remodeled One Bedroom  ~ J.Wavro", "price": 2550.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5880607560.html", "age": 2.54532476385486, "size": null}, {"loc": "eby", "title": "TASTEFULLY REMODELED HOME-OPEN SATURDAY 1130-1230 PLS RSVP", "price": 3000.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5870895411.html", "age": 2.5408336202891957, "size": 1200.0}, {"loc": "eby", "title": "great family home for rent - San Leandro", "price": 2750.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5869712877.html", "age": 2.5408336202891957, "size": 1600.0}, {"loc": "eby", "title": "CLOSE TO DOWNTOWN/BART/SHOPPING &amp; PARKS/TRAIL", "price": 1850.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5865536200.html", "age": 2.5408336202891957, "size": 800.0}, {"loc": "eby", "title": "SPECTACULAR EXECUTIVE LIVING AT ITS FINEST! EXPANSIVE VIEWS &amp; MORE!", "price": 5000.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5865264752.html", "age": 2.536358297764155, "size": 1650.0}, {"loc": "eby", "title": "Private West Alamo home", "price": 5300.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5880603217.html", "age": 2.5318987128270876, "size": 2500.0}, {"loc": "eby", "title": "Apartment available for sub lease next to BART station ($1200 credit)", "price": 2900.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5862357767.html", "age": 2.5318987128270876, "size": 1250.0}, {"loc": "eby", "title": "QUIET PLEASANTON VIEW CONDO-BEST AREA-NEAR BART, MALL, SCHOOLS!", "price": 2690.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5875725379.html", "age": 2.5274547826112386, "size": 1250.0}, {"loc": "eby", "title": "Concord 3/2 Rental near Limeridge/Bart/Downtown $3000", "price": 3000.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5872308874.html", "age": 2.523026424830619, "size": 1414.0}, {"loc": "eby", "title": "Adams Point, Clean, Quiet, Spacious, Lots of Windows, Updated", "price": 1750.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5873048971.html", "age": 2.5186135577749225, "size": 675.0}, {"loc": "eby", "title": "Available December 19! Spacious Upstairs 1 Bedroom", "price": 1225.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5880591350.html", "age": 2.5011153824642722, "size": 725.0}, {"loc": "eby", "title": "Single Family House in San Ramon", "price": 3500.0, "brs": 4.0, "mine": 0, "link": "/eby/apa/5850749565.html", "age": 2.4967787631787197, "size": 1383.0}, {"loc": "eby", "title": "Available for December 19, 2016 - Pre-lease today!", "price": 1300.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880588315.html", "age": 2.4967787631787197, "size": 850.0}, {"loc": "eby", "title": "Shopping &amp; Schools near", "price": 2395.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5874427074.html", "age": 2.4881504836133326, "size": 1450.0}, {"loc": "eby", "title": "New Remodeled 1 bedroom apartment, one parking, two blocks to BART.", "price": 1180.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5876546682.html", "age": 2.4881504836133326, "size": null}, {"loc": "eby", "title": "Lovely home in great Albany location!", "price": 3475.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880584801.html", "age": 2.483858668233754, "size": null}, {"loc": "eby", "title": "Chic 1 Bedroom Cottage in Berkeley with Great Backyard", "price": 2300.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5871478947.html", "age": 2.475319302530647, "size": 550.0}, {"loc": "eby", "title": "5 bedroom, 2 bath Single Family Home in Warm Springs Area of Fremont", "price": 3500.0, "brs": 5.0, "mine": 0, "link": "/eby/apa/5857815820.html", "age": 2.4710716002875035, "size": 1860.0}, {"loc": "eby", "title": "Charming Berkeley Bungalow for rent", "price": 3500.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880548043.html", "age": 2.4252912178163237, "size": 900.0}, {"loc": "eby", "title": "Spacious and Sunny House", "price": 2105.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5850591553.html", "age": 2.4171491475389923, "size": 1122.0}, {"loc": "eby", "title": "Relaxing Location Spacious floor plan", "price": 1995.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5850258124.html", "age": 2.413098578669299, "size": 1089.0}, {"loc": "eby", "title": "***GORGEOUS 2BR/1.5BA in CONCORD FOR RENT, PRICE DROP! ***", "price": 1900.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5873190677.html", "age": 2.409061562674288, "size": 825.0}, {"loc": "eby", "title": "New House for Rent", "price": 1995.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5859799312.html", "age": 2.409061562674288, "size": 1089.0}, {"loc": "eby", "title": "Two Bedroom - One Bath", "price": 1900.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880544330.html", "age": 2.3851203057949357, "size": null}, {"loc": "eby", "title": "Lafayette House 3 Bedroom Delightful House Available Short-Long Term", "price": 5600.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5880532887.html", "age": 2.3811762836381423, "size": 2100.0}, {"loc": "eby", "title": "\"Tahoe cottage\" in a great Emeryville location!", "price": 1799.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5880540275.html", "age": 2.377245283575891, "size": 750.0}, {"loc": "eby", "title": "\u51fa\u79df2 rooms1bath private unit for $1700 in a single family house", "price": 1700.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5857572977.html", "age": 2.3694220926113623, "size": 480.0}, {"loc": "eby", "title": "\u51fa\u79df2 rooms 1 full bath private in-law unit with private entrance", "price": 1700.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5857593993.html", "age": 2.3694220926113623, "size": 480.0}, {"loc": "eby", "title": "Nice 3br family home Available today", "price": 1500.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5850409629.html", "age": 2.3386375400886052, "size": null}, {"loc": "eby", "title": "nice and quiet one bedroom APT available end of November", "price": 1700.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5880522621.html", "age": 2.3348456250683993, "size": null}, {"loc": "eby", "title": "3Br. Nice Family Home Available now", "price": 1750.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5857898830.html", "age": 2.331065986720594, "size": null}, {"loc": "eby", "title": "Gorgeous 3 bedroom home walking distance from park", "price": 2800.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5880414410.html", "age": 2.327298565521267, "size": 2026.0}, {"loc": "eby", "title": "Mixed use Updated Victorian House", "price": 6000.0, "brs": 4.0, "mine": 0, "link": "/eby/apa/5871586945.html", "age": 2.3235433023306835, "size": 2600.0}, {"loc": "eby", "title": "Elegant 2 Bedroom 2 bath", "price": 3400.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880512629.html", "age": 2.312349875112013, "size": 1300.0}, {"loc": "eby", "title": "14986 Firth Court - Pet Friendly - open Sun 11/20 1-4PM", "price": 2895.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5872503471.html", "age": 2.3012637771791797, "size": null}, {"loc": "eby", "title": "Completely Remodeled Single Level Condo", "price": 2350.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880505922.html", "age": 2.293931912709688, "size": 869.0}, {"loc": "eby", "title": "One Small Bedroom InLaw with forest view", "price": 1300.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5869248856.html", "age": 2.293931912709688, "size": null}, {"loc": "eby", "title": "Updated Single Family Home with In-Law Suite", "price": 4650.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5880503451.html", "age": 2.2902834721916236, "size": 1600.0}, {"loc": "eby", "title": "Updated Single Level Condo", "price": 2500.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880496659.html", "age": 2.272213978716839, "size": 1286.0}, {"loc": "eby", "title": "Stunning Single Family Home with In-Law Quarters", "price": 5500.0, "brs": 5.0, "mine": 0, "link": "/eby/apa/5880495736.html", "age": 2.272213978716839, "size": 3871.0}, {"loc": "eby", "title": "Beautiful Single Family Home", "price": 3500.0, "brs": 4.0, "mine": 0, "link": "/eby/apa/5880486665.html", "age": 2.247390461937159, "size": 2331.0}, {"loc": "eby", "title": "House  unit for rent", "price": 1700.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5880484147.html", "age": 2.240397340251838, "size": 600.0}, {"loc": "eby", "title": "New House for Rent!", "price": 1660.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5880391017.html", "age": 2.240397340251838, "size": 1189.0}, {"loc": "eby", "title": "Spacious and Sunny House!", "price": 2180.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5880401880.html", "age": 2.212854708017361, "size": 1152.0}, {"loc": "eby", "title": "Gorgeous Top Floor 1 bdrm Grand ave  Open house 1-3 Sat Nov 19", "price": 2700.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5880457178.html", "age": 2.1993357898035333, "size": 750.0}, {"loc": "eby", "title": "**6 BEDROOM 3 1/2 BATH**", "price": 7495.0, "brs": 6.0, "mine": 0, "link": "/eby/apa/5880462614.html", "age": 2.189304506976509, "size": 1600.0}, {"loc": "eby", "title": "New House for Rent!", "price": 1825.0, "brs": 4.0, "mine": 0, "link": "/eby/apa/5880393412.html", "age": 2.1859810499176553, "size": 1554.0}, {"loc": "eby", "title": "Spacious and Sunny House!", "price": 1565.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5880403653.html", "age": 2.182667667861951, "size": 959.0}, {"loc": "eby", "title": "3 bedroom house with lot", "price": 2550.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5880416305.html", "age": 2.1727875156545484, "size": 1031.0}, {"loc": "eby", "title": "Furnished apts.2BR-5beds Luxury Bldg UC Berkeley-Available Fall/Spring", "price": 3800.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5835386640.html", "age": 2.166250291225994, "size": null}, {"loc": "eby", "title": "Furnished 2/3 Bedroom-4beds beside UC Berkeley -Available Fall/Spring", "price": 4500.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5858978388.html", "age": 2.1597522856457774, "size": null}, {"loc": "eby", "title": "Furnished apts. 2BR- 5Beds Luxury bldg by Bart - Available Fall/Spring", "price": 3800.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5870672935.html", "age": 2.153293147040242, "size": null}, {"loc": "eby", "title": "Furnished apts. 2Bedroom w/ 4beds beside UCB - Available Fall/Spring", "price": 3800.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5869914860.html", "age": 2.1468725277325538, "size": null}, {"loc": "eby", "title": "Furnished 2 Bedroom - 4 beds beside UC Berkeley -Available Fall/Spring", "price": 3800.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5858962113.html", "age": 2.137313072070902, "size": null}, {"loc": "eby", "title": "Furnished 2BR - 5Beds-Luxury bldg. Bart-Available Fall/Spring Semester", "price": 3800.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5857047997.html", "age": 2.1309872569034076, "size": null}, {"loc": "eby", "title": "Furnished 3 Bedroom - 5 beds - by UCB and Bart - Available Fall/Spring", "price": 4500.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5857039729.html", "age": 2.1309872569034076, "size": null}, {"loc": "eby", "title": "Spacious and Sunny House!", "price": 2220.0, "brs": 4.0, "mine": 0, "link": "/eby/apa/5880397335.html", "age": 2.075696229232204, "size": 1628.0}, {"loc": "eby", "title": "Updated and Move-in Ready", "price": 2475.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5871706459.html", "age": 2.0375153827320553, "size": 1217.0}, {"loc": "eby", "title": "3bedroom 2.5 bath house", "price": 2995.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5865239756.html", "age": 2.0090879685570764, "size": 2400.0}, {"loc": "eby", "title": "1 BEDROOM APARTMENT w/ PARKING SPACE", "price": 700.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5880300382.html", "age": 1.6906505593803287, "size": null}, {"loc": "eby", "title": "Albany Single Family House 2Bed/1.5Bath", "price": 3500.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880310547.html", "age": 1.6886679570010847, "size": 1100.0}, {"loc": "eby", "title": "No Section 8 Housing or smokers.", "price": 1850.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5880303140.html", "age": 1.66139188111822, "size": 1842.0}, {"loc": "eby", "title": "34238 Tartarian Way, Union City, CA 94587", "price": 1200.0, "brs": 4.0, "mine": 0, "link": "/eby/apa/5880302356.html", "age": 1.66139188111822, "size": null}, {"loc": "eby", "title": "Sublet 1BR+1 Bath Furnished apartment 3 blocks from UCB campus &amp; B", "price": 1450.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5880296835.html", "age": 1.6112011951591199, "size": null}, {"loc": "eby", "title": "Large beautiful unit Near North Berkeley BART(Hearst&amp;West;)", "price": 2085.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5880288869.html", "age": 1.5639541065531366, "size": null}, {"loc": "eby", "title": "Beautiful SUNNY unit Near North Berkeley BART(Hearst&amp;West;) JAN 2017", "price": 1945.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5880288768.html", "age": 1.5622573712536474, "size": null}, {"loc": "eby", "title": "Upstairs Condo", "price": 1100.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5880288386.html", "age": 1.5605643135438212, "size": 640.0}, {"loc": "eby", "title": "Conveniently Located Three Bedroom", "price": 3000.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5862653948.html", "age": 1.5605643135438212, "size": 1582.0}, {"loc": "eby", "title": "2 cuartos 1 bano/ 2 bedroom Apartment", "price": 1800.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5852935155.html", "age": 1.5438334016502633, "size": null}, {"loc": "eby", "title": "High-ceiling single house move-in now! quiet, easy to Brige84, FWY880", "price": 3000.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5880274549.html", "age": 1.4788294314181525, "size": 1563.0}, {"loc": "eby", "title": "Charming and spacious 2 bedroom and 2 bath condo available for rent", "price": 2100.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880271718.html", "age": 1.474287307541572, "size": 940.0}, {"loc": "eby", "title": "1-Story Pleasanton SFH 3bd/2ba For Rent", "price": 3300.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5880268651.html", "age": 1.471274694197735, "size": 1800.0}, {"loc": "eby", "title": "Pleasanton Single Family House in Hacienda Business Park", "price": 3250.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5880262272.html", "age": 1.4360606981230615, "size": 1719.0}, {"loc": "eby", "title": "Remodeled 2BR W/Garage, Near BART", "price": 1800.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5872344424.html", "age": 1.4346299927418635, "size": 850.0}, {"loc": "eby", "title": "Remodeled Oakland Hills Home", "price": 3200.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5867443459.html", "age": 1.424694322989262, "size": 2000.0}, {"loc": "eby", "title": "Gorgeous House!!! 6 bedrooms, Walk to BART (9 minutes)", "price": 6400.0, "brs": 6.0, "mine": 0, "link": "/eby/apa/5861182713.html", "age": 1.3916497317816154, "size": 2308.0}, {"loc": "eby", "title": "**COMING SOON! 3 BD/2 BA VALLEJO HOME FOR RENT-822 SHERIDAN STREET***", "price": 2040.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5873282801.html", "age": 1.3809728953405138, "size": 1228.0}, {"loc": "eby", "title": "Contemporary 4 bdr/3 bath single family house @ Fremont near Milpitas", "price": 4800.0, "brs": 4.0, "mine": 0, "link": "/eby/apa/5880254263.html", "age": 1.3783292351812906, "size": 3440.0}, {"loc": "eby", "title": "2 Bedroom 4 Rent", "price": 2500.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880253952.html", "age": 1.3770111971325545, "size": 780.0}, {"loc": "eby", "title": "Lease takeover available for below Market Rent", "price": 2045.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5866447690.html", "age": 1.3743826689044625, "size": 700.0}, {"loc": "eby", "title": "2b2b City View Apartment for rent", "price": 2500.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880249554.html", "age": 1.3691556029828706, "size": null}, {"loc": "eby", "title": "**COMING SOON! 3 BD/2 BA VALLEJO HOME-119 MELBA DRIVE**", "price": 1850.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5880250635.html", "age": 1.3626774174925298, "size": 1328.0}, {"loc": "eby", "title": "$1850-REMODELD-$1850-$1850-2BD-NEAR BART--$1850--$1850-SMALL BUILDING", "price": 1850.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5868702033.html", "age": 1.35753884104237, "size": null}, {"loc": "eby", "title": "SAN PABLO!! $1785--2-BED-SAN PABLO!!-$1785-$1785-SMALL QUIET BUILDING", "price": 1785.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880248325.html", "age": 1.3549840584197341, "size": null}, {"loc": "eby", "title": "2b2b City View Apartment for rent", "price": 2500.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5869500237.html", "age": 1.3524388735396877, "size": null}, {"loc": "eby", "title": "**2338 ROBLES DRIVE-COMING SOON! 5 BD/3 BA ANTIOCH HOME**", "price": 2485.0, "brs": 5.0, "mine": 0, "link": "/eby/apa/5874542570.html", "age": 1.3461175481906358, "size": 2522.0}, {"loc": "eby", "title": "#### Nice 2 Bedroom, 1 Bathroom, 2-Story Condo For Rent", "price": 2200.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880244594.html", "age": 1.3411028756494119, "size": 900.0}, {"loc": "eby", "title": "Fremont Mission School", "price": 2200.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5880243730.html", "age": 1.33860952414635, "size": 775.0}, {"loc": "eby", "title": "Beautiful condo by the lake", "price": 2150.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5880242138.html", "age": 1.3336505316365403, "size": 650.0}, {"loc": "eby", "title": "/1BA EXCELLENT DOWNTOWN LOCATION", "price": 1645.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880241659.html", "age": 1.3311847881637058, "size": null}, {"loc": "eby", "title": "$1250 Private Bedroom &amp; Bath with Exclusive Entrance", "price": 1250.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5880232644.html", "age": 1.3299553323946636, "size": 250.0}, {"loc": "eby", "title": "Holiday Special!!", "price": 1995.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880239876.html", "age": 1.326280553448185, "size": 822.0}, {"loc": "eby", "title": "\"FULLY REMODELED\" 1 Bdrm, 1 Bath, Duplex", "price": 1795.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5880237450.html", "age": 1.3250601357466636, "size": null}, {"loc": "eby", "title": "\"FULLY REMODELED\" 1 Bdrm, 1 Bath, 4plex", "price": 1695.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5880237411.html", "age": 1.3238419619898156, "size": null}, {"loc": "eby", "title": "Spacious 2 bed /1 bath apartment - very convenient location!", "price": 1800.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880231972.html", "age": 1.3177845367584884, "size": 750.0}, {"loc": "eby", "title": "\"FULLY REMODELED\" 2 Bdrm, 1 Bath, 4plex", "price": 1995.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880235864.html", "age": 1.3129783629147451, "size": null}, {"loc": "eby", "title": "\"FULLY REMODELED\" 1 Bdrm, 1 Bath, 4plex", "price": 1695.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5880235801.html", "age": 1.3129783629147451, "size": null}, {"loc": "eby", "title": "\"FULLY REMODELED\" 3 Bdrm, 1 Bath, Duplex", "price": 3295.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5880235736.html", "age": 1.3129783629147451, "size": null}, {"loc": "eby", "title": "\"FULLY REMODELED\" 2 Bdrm, 1 Bath, SFR", "price": 3295.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880235652.html", "age": 1.3129783629147451, "size": null}, {"loc": "eby", "title": "Charming, spacious Piedmont Home 3br/2.5ba", "price": 5695.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5880234543.html", "age": 1.3093966764467306, "size": 2200.0}, {"loc": "eby", "title": "Brand New Executive Suite.", "price": 1700.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5880234361.html", "age": 1.3082071194645564, "size": 400.0}, {"loc": "eby", "title": "3b2b very close to UCB and bart station", "price": 5770.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5872224032.html", "age": 1.3082071194645564, "size": 1100.0}, {"loc": "eby", "title": "Upgraded 3Bed-2.5Bath near BART; backyard; pool", "price": 2950.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5880230642.html", "age": 1.30347042698513, "size": 1452.0}, {"loc": "eby", "title": "$2500 2Br/1.5Bath Lovely Townhome Downtown Danville", "price": 2500.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5873839337.html", "age": 1.3022916085135963, "size": 1100.0}, {"loc": "eby", "title": "Spacious 2 bed /1 bath apartment - very convenient location!", "price": 1725.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5876161603.html", "age": 1.3022916085135963, "size": 750.0}, {"loc": "eby", "title": "Quiet &amp; Marvelous 1 bedroom apartment for rent in alameda", "price": 800.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5880225845.html", "age": 1.301114920289704, "size": null}, {"loc": "eby", "title": "Completely remodeled apartment! 1 bed / 1 bath in a gated community", "price": 1895.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5869210870.html", "age": 1.2999403565442968, "size": 700.0}, {"loc": "eby", "title": "Sunny 1 BR Glenview Apartment (PG&amp;E; included)", "price": 1995.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5855483414.html", "age": 1.298767911529032, "size": 600.0}, {"loc": "eby", "title": "2bd(+1) - 1bath(back unit) one block to Bart, walk to Kaiser, Shopping", "price": 1600.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5861219988.html", "age": 1.2940992045257727, "size": null}, {"loc": "eby", "title": "2bed 2 bath condo in warm springs area with 1 car garage", "price": 2600.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5863527076.html", "age": 1.2929372676580102, "size": 936.0}, {"loc": "eby", "title": "2nd Floor Elmwood Gem Available 1/1/17 : C9", "price": 2495.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5845872200.html", "age": 1.281431637656055, "size": 450.0}, {"loc": "eby", "title": "Gorgeous 1 Bedroom in Gated Community! Avl 12/01/16", "price": 1850.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5849360436.html", "age": 1.281431637656055, "size": 644.0}, {"loc": "eby", "title": "2Bed 2Bath Condo w/ 2Car Garage", "price": 2150.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880223865.html", "age": 1.279155040796688, "size": 1137.0}, {"loc": "eby", "title": "Awesome 2bed Close to Berkely Marina Pets Okay Available Jan 1st", "price": 2800.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880221865.html", "age": 1.2746260288247386, "size": null}, {"loc": "eby", "title": "Spacious 2 bed 1 bath duplex short walk from Broadway Plaza", "price": 2300.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880221038.html", "age": 1.2723735282448936, "size": 1300.0}, {"loc": "eby", "title": "Furnished room 4 rent", "price": 900.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5872648010.html", "age": 1.2690096651095348, "size": 120.0}, {"loc": "eby", "title": "Gorgeous Home in The Bridges, with grand golf/Mount Diablo views", "price": 4950.0, "brs": 4.0, "mine": 0, "link": "/eby/apa/5880218510.html", "age": 1.2667769537236826, "size": 2960.0}, {"loc": "eby", "title": "Avail now - Central Fremont detached single family home near BART", "price": 3000.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5862659486.html", "age": 1.2623350178667052, "size": 1638.0}, {"loc": "eby", "title": "Azari PM Gorgeous &amp; Spacious 5bdr/4ba Executive Family Home w/Pool/Spa", "price": 2950.0, "brs": 5.0, "mine": 0, "link": "/eby/apa/5867795143.html", "age": 1.2623350178667052, "size": 3107.0}, {"loc": "eby", "title": "WALK TO CONCORD BART &amp; TODOS SANTOS PLAZA", "price": 1950.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880216895.html", "age": 1.2623350178667052, "size": 900.0}, {"loc": "eby", "title": "Apartment for rent, parking included", "price": 3000.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5870553572.html", "age": 1.2502787834260392, "size": 850.0}, {"loc": "eby", "title": "2.5 Bath  Pleasanton Single Family house Top School", "price": 3450.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5880211036.html", "age": 1.249194171641884, "size": 1648.0}, {"loc": "eby", "title": "Sequoia Grove", "price": 1645.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5880210089.html", "age": 1.2470305836738498, "size": null}, {"loc": "eby", "title": "Two Bedroom at Woodbury", "price": 5200.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880206521.html", "age": 1.2395166902350436, "size": 1111.0}, {"loc": "eby", "title": "Condo for rent low deposit.", "price": 1100.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880205730.html", "age": 1.2384506622725995, "size": 900.0}, {"loc": "eby", "title": "*NOW AVAILABLE! NICE 3BD/1.5BA OAKLAND HOME FOR RENT-6016 HARMON AVE**", "price": 2945.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5841025802.html", "age": 1.2331479093385704, "size": 1587.0}, {"loc": "eby", "title": "Fabulous Location !", "price": 1940.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5880193489.html", "age": 1.2331479093385704, "size": 820.0}, {"loc": "eby", "title": "Elegant Home Near the India Rock", "price": 4350.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5880200062.html", "age": 1.2331479093385704, "size": 2150.0}, {"loc": "eby", "title": "Spacious 2 Bed 2 Bath in San Leandro", "price": 2200.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880198332.html", "age": 1.2310395013005953, "size": 1182.0}, {"loc": "eby", "title": "Lovely Home Near the Rose Garden", "price": 4350.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5880201752.html", "age": 1.2299879986530482, "size": 2150.0}, {"loc": "eby", "title": "+Garden, W/D - Grand Lake/Rose Garden", "price": 2350.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880200468.html", "age": 1.2278903730661967, "size": 1100.0}, {"loc": "eby", "title": "1st Floor w/new Windows, Hardwood Floors", "price": 2600.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5873874150.html", "age": 1.2278903730661967, "size": 975.0}, {"loc": "eby", "title": "Convenience &amp; Affordable Apartment for Rent in San Pablo Ave.", "price": 1480.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5880198411.html", "age": 1.2237165127180618, "size": null}, {"loc": "eby", "title": "Newly Remodeled Large 2 Bedroom - Close to Hospital and Shopping - NO", "price": 2095.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880189427.html", "age": 1.2195709319185626, "size": 1000.0}, {"loc": "eby", "title": "New 4-Bedroom Townhouse near Dublin/Pleasanton BART", "price": 3700.0, "brs": 4.0, "mine": 0, "link": "/eby/apa/5880189381.html", "age": 1.217508656686543, "size": 1800.0}, {"loc": "eby", "title": "You've GOT To See Our 2x1's! Available NOW!", "price": 1499.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5870940218.html", "age": 1.215453344230433, "size": null}, {"loc": "eby", "title": "Newer 4 BD 2.5 Baths House for Rent", "price": 3300.0, "brs": 4.0, "mine": 0, "link": "/eby/apa/5880193854.html", "age": 1.215453344230433, "size": 1800.0}, {"loc": "eby", "title": "Come Check Out Our 2x1's!  Move In Ready!", "price": 1499.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5846803658.html", "age": 1.215453344230433, "size": null}, {"loc": "eby", "title": "Roomy 2x1's! Available NOW! Come See For Yourself!", "price": 1499.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5870935976.html", "age": 1.2144282880331982, "size": null}, {"loc": "eby", "title": "3 Bedroom 2 Bathroom House for Rent - Newly Remodeled", "price": 3600.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5880193048.html", "age": 1.2134049593474543, "size": null}, {"loc": "eby", "title": "3 BDrm/1.5 Bath, Carport Parking", "price": 2775.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5858599967.html", "age": 1.2134049593474543, "size": 1200.0}, {"loc": "eby", "title": "Ardenwood Townhome corner unit with gorgeous open view", "price": 3700.0, "brs": 4.0, "mine": 0, "link": "/eby/apa/5880187325.html", "age": 1.2134049593474543, "size": 1969.0}, {"loc": "eby", "title": "You've GOT To See Our 2x1's! Available NOW!", "price": 1499.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5840484087.html", "age": 1.2134049593474543, "size": null}, {"loc": "eby", "title": "Newly Remodeled Unit - Downtown / Gourmet Ghetto Location", "price": 2895.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5846323108.html", "age": 1.2073010216512174, "size": null}, {"loc": "eby", "title": "Southside / Downtown 2-Bedroom w/ Kit &amp; Bath Remodel", "price": 2995.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5860114496.html", "age": 1.2073010216512174, "size": null}, {"loc": "eby", "title": "Remodeled Southside / Downtown 3bd/2ba", "price": 3995.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5860123343.html", "age": 1.2073010216512174, "size": null}, {"loc": "eby", "title": "Livermore - Brand-New Home near downtown", "price": 3350.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5880189233.html", "age": 1.2073010216512174, "size": 1747.0}, {"loc": "eby", "title": "Duplex for rent", "price": 1500.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880181285.html", "age": 1.204272024057487, "size": 950.0}, {"loc": "eby", "title": "Newly Remodeled 3 Bedroom 2 Bathroom House for Rent", "price": 3600.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5853895496.html", "age": 1.204272024057487, "size": null}, {"loc": "eby", "title": "Home for Rent", "price": 2380.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5880181119.html", "age": 1.204272024057487, "size": 1274.0}, {"loc": "eby", "title": "Room for rent (Utilities Included) near S. Hayward BART/C", "price": 925.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5880162194.html", "age": 1.2022611220645507, "size": null}, {"loc": "eby", "title": "$2,700 - 2BR/2BA - Villas @ Dublin Ranch - Available 1/1/17", "price": 2700.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880179639.html", "age": 1.1913201106873677, "size": 1347.0}, {"loc": "eby", "title": "Enjoy your new home in San Leandro! 300.00 deposit upon approval!", "price": 1850.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5880168967.html", "age": 1.1893521951474102, "size": 750.0}, {"loc": "eby", "title": "**COMING SOON! 3 BD/1 BA SAN PABLO HOME-1305 CALIFORNIA AVE**", "price": 2135.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5880170884.html", "age": 1.1873907703984226, "size": 1008.0}, {"loc": "eby", "title": "Sunny master bedroom with private attached bathroom in 3bed/2bath!", "price": 1900.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5880176604.html", "age": 1.1864124820435171, "size": null}, {"loc": "eby", "title": "Newly Listed:  1 Bedrm 1 Bath Apt in Oakland Glen View District", "price": 1750.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5880174395.html", "age": 1.183487265243882, "size": null}, {"loc": "eby", "title": "Your new home awaits you in San Leandro! 300.00 deposit upon approval!", "price": 2150.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880168769.html", "age": 1.1815451213488437, "size": 950.0}, {"loc": "eby", "title": "Oakland GlenView: One Bedrm One Bath Plus Apartment", "price": 1700.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5861215247.html", "age": 1.1805764377860344, "size": null}, {"loc": "eby", "title": "Gorgeous high ceiling 2 bedroom unit close to Lake Merritt", "price": 2500.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880170573.html", "age": 1.1776798937572341, "size": null}, {"loc": "eby", "title": "One Bedroom, One Bathroom Condo with Upgrated kitchen &amp; bathroom", "price": 1795.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5852893795.html", "age": 1.1747975282816236, "size": 700.0}, {"loc": "eby", "title": "Amazing renovated modern units in San Leandro!", "price": 2150.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880168396.html", "age": 1.1747975282816236, "size": 950.0}, {"loc": "eby", "title": "Gorgeous, 3 bedroom home", "price": 2950.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5880158800.html", "age": 1.1747975282816236, "size": 1000.0}, {"loc": "eby", "title": "Lake Merritt 1bd w/ Deck, Woodsy Yard, and Japanese Hot and Cold Tubs", "price": 2395.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5873072053.html", "age": 1.171929237507572, "size": null}, {"loc": "eby", "title": "Remodeled 3bed - 2 1/2 bath two-story - Available December 3rd", "price": 2900.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5880165891.html", "age": 1.1709762504906434, "size": 1580.0}, {"loc": "eby", "title": "**NOW AVAILABLE FOR VIEWING-4201 SALGADO AVE-OAKLEY 3 BD/2 BA*", "price": 2100.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5860414882.html", "age": 1.1700248121104586, "size": 1167.0}, {"loc": "eby", "title": "Remodeled in 2015 - 4 Bedrooms; 2 full Bathrooms; Single-Family Home", "price": 3500.0, "brs": 4.0, "mine": 0, "link": "/eby/apa/5880163178.html", "age": 1.167179751133336, "size": 1882.0}, {"loc": "eby", "title": "Rockridge Two Bed Two Bath - Available Now!", "price": 2595.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5860384080.html", "age": 1.165290718174396, "size": 1247.0}, {"loc": "eby", "title": "Large 2 bedroom Apartment. Close to UC Berkeley ( 5 blocks from Sather", "price": 3200.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880161719.html", "age": 1.165290718174396, "size": 1000.0}, {"loc": "eby", "title": "1 BEDROOM  - CONDO DOWNTOWN OAKLAND", "price": 2360.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5869327931.html", "age": 1.1643484928331327, "size": null}, {"loc": "eby", "title": "1 BEDROOM  - NEW RENOVATION - CONDO DOWNTOWN OAKLAND", "price": 2360.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5869328263.html", "age": 1.1643484928331327, "size": null}, {"loc": "eby", "title": "1 BEDROOM / 1 BATH - LUXURIOUS CONDO - MARKETSQUARE - OLD OAKLAND", "price": 2360.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5866446479.html", "age": 1.1643484928331327, "size": null}, {"loc": "eby", "title": "1 BEDROOM  - CONDO DOWNTOWN OAKLAND", "price": 2360.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5873247575.html", "age": 1.1643484928331327, "size": null}, {"loc": "eby", "title": "1 BEDROOM / 1 BATH - CONDO DOWNTOWN OAKLAND", "price": 2360.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5880158190.html", "age": 1.1605947795488059, "size": null}, {"loc": "eby", "title": "1 BEDROOM / 1 BATH - CONDO DOWNTOWN OAKLAND", "price": 2365.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5880158025.html", "age": 1.1605947795488059, "size": null}, {"loc": "eby", "title": "Quiet One Bedroom w/ Bay View", "price": 1750.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5880157670.html", "age": 1.1605947795488059, "size": 650.0}, {"loc": "eby", "title": "Chef's Dream Kitchen - Modern Designer House...", "price": 1945.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5880157479.html", "age": 1.1596601299010185, "size": 1020.0}, {"loc": "eby", "title": "Furnished In-Law Studio Inside Contra Costa Country Club", "price": 2100.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5866416090.html", "age": 1.158726984425131, "size": 400.0}, {"loc": "eby", "title": "Upgraded 1 Bedroom Apt in Lafayette! Walking Distance to Downtown!", "price": 1750.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5880155400.html", "age": 1.1568651914880206, "size": 800.0}, {"loc": "eby", "title": "Great space on Piedmont Border with Balcony and Bonus Storage Room", "price": 2395.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5841744329.html", "age": 1.1559365368053824, "size": null}, {"loc": "eby", "title": "remodeled kitchen, dual-pained windows, and laminate", "price": 1050.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880142680.html", "age": 1.1513155378623032, "size": 969.0}, {"loc": "eby", "title": "Just in Time for the Holidays!", "price": 1800.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5880142656.html", "age": 1.1513155378623032, "size": 1670.0}, {"loc": "eby", "title": "Spacious Penthouse with a private deck", "price": 3000.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880150779.html", "age": 1.1513155378623032, "size": null}, {"loc": "eby", "title": "bedroom 1.5 bath has remodeled kitchen, dual-pained", "price": 1050.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880142348.html", "age": 1.1513155378623032, "size": 969.0}, {"loc": "eby", "title": "has two closets -- including one walk-in. Spacious enclosed", "price": 1050.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880143825.html", "age": 1.1503957680550443, "size": 969.0}, {"loc": "eby", "title": "two closets -- including one walk-in. Spacious enclosed", "price": 1050.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880143477.html", "age": 1.1494774666570464, "size": 969.0}, {"loc": "eby", "title": "Delightful Rockridge Townhouse:", "price": 3380.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880149166.html", "age": 1.1494774666570464, "size": null}, {"loc": "eby", "title": "Delightful Rockridge Townhouse:", "price": 3380.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880148645.html", "age": 1.1485606301546492, "size": null}, {"loc": "eby", "title": "bedroom has two closets -- including one walk-in.", "price": 1050.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880142038.html", "age": 1.146731337837975, "size": 969.0}, {"loc": "eby", "title": "Bright &amp; spacious duplex with sleek, clean upgrades", "price": 1795.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880145109.html", "age": 1.1439982988801436, "size": 1086.0}, {"loc": "eby", "title": "Spacious 1 Bedroom, All Utilities Included", "price": 2100.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5880145077.html", "age": 1.1439982988801436, "size": 700.0}, {"loc": "eby", "title": "location. Close to downtown Martinez and the Marina. Walking d", "price": 1250.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5880132787.html", "age": 1.1430901785886352, "size": 2737.0}, {"loc": "eby", "title": "New Remodeled Apartment with Great Sunlights and Balcony", "price": 2350.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5880134014.html", "age": 1.1430901785886352, "size": 660.0}, {"loc": "eby", "title": "Close to downtown Martinez and the Marina. Walking", "price": 1250.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5880133493.html", "age": 1.1421834989082544, "size": 2737.0}, {"loc": "eby", "title": "Pt. Rich. Amazing Gem with Bay Views,  early/mid Dec.", "price": 3500.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5880142652.html", "age": 1.141278256413714, "size": null}, {"loc": "eby", "title": "Great 3BR/3+BA plus loft, Single Family Home - San Ramon", "price": 3600.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5871619655.html", "age": 1.1403744476905757, "size": 1962.0}, {"loc": "eby", "title": "Short commute to Pleasant Hill, Concord and Walnut Creek, etc. This un", "price": 1250.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5880132434.html", "age": 1.1385711179547504, "size": 2737.0}, {"loc": "eby", "title": "a galley style Kitchen and wood panel Living Room.", "price": 1250.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5880133190.html", "age": 1.1376715901670549, "size": 2737.0}, {"loc": "eby", "title": "Huge Master Bedroom with retreat, 2 cars", "price": 1350.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5880129475.html", "age": 1.136773482600659, "size": 1984.0}, {"loc": "eby", "title": "Renovated El Cerrito House. Close to Bart/shopping. Avail 1/7/17", "price": 2745.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880137885.html", "age": 1.135876791894737, "size": null}, {"loc": "eby", "title": "\u25ba\u25baPrice Drop! 2x2 Dual Master Suite! Available Now!", "price": 1745.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880109427.html", "age": 1.135876791894737, "size": 998.0}, {"loc": "eby", "title": "4 bedroom 2.5 bathroom. family room All bedroom upstairs.", "price": 1500.0, "brs": 4.0, "mine": 0, "link": "/eby/apa/5880127290.html", "age": 1.1349815146990592, "size": 2182.0}, {"loc": "eby", "title": "New Remodeled Apartment with Great Sunlights and Balcony", "price": 2350.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5877109544.html", "age": 1.1340876476739492, "size": 660.0}, {"loc": "eby", "title": "lots of cabinets. All bedroom upstairs family room and f", "price": 1500.0, "brs": 4.0, "mine": 0, "link": "/eby/apa/5880126535.html", "age": 1.1331951874902435, "size": 2182.0}, {"loc": "eby", "title": "~*~* SPECIALS at Hidden Creek! $250 deposit, $50 OFF/mo Renovated 2x1", "price": 1645.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880117349.html", "age": 1.1323041308292496, "size": 886.0}, {"loc": "eby", "title": "w/Breakfast Bar, Huge Master Bedroom with retreat", "price": 1350.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5880129131.html", "age": 1.1314144743827055, "size": 1984.0}, {"loc": "eby", "title": "Stunning Lafayette Home Long or Short Term avail now take a look &amp; see", "price": 4290.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5873570512.html", "age": 1.1314144743827055, "size": 2400.0}, {"loc": "eby", "title": "ORINDA HOUSE Enchanting Bright Delightful Neighborhood", "price": 5700.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5873569459.html", "age": 1.1314144743827055, "size": 2300.0}, {"loc": "eby", "title": "aintained home 4 bedroom 2.5 bathroom", "price": 1500.0, "brs": 4.0, "mine": 0, "link": "/eby/apa/5880126172.html", "age": 1.1314144743827055, "size": 2182.0}, {"loc": "eby", "title": "walk to Lake Merritt ~ hardwood floors ~ pet friendly", "price": 2195.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5869191568.html", "age": 1.1278697849385433, "size": null}, {"loc": "eby", "title": "Luxury apartment steps from Lake Merritt ~ pet friendly ~ parking incl", "price": 3895.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5869194124.html", "age": 1.1278697849385433, "size": 1560.0}, {"loc": "eby", "title": "Bright 1Br, BLONDE HARDWOOD, Great Berkeley location", "price": 1795.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5880123937.html", "age": 1.119974873564892, "size": 675.0}, {"loc": "eby", "title": "**3445 SERPENTINE DR-COMING SOON! 4BD/2BA ANTIOCH HOME FOR RENT**", "price": 2075.0, "brs": 4.0, "mine": 0, "link": "/eby/apa/5871716854.html", "age": 1.1139103864056965, "size": 1469.0}, {"loc": "eby", "title": "Beautiful House For Rent $2700", "price": 2700.0, "brs": 4.0, "mine": 0, "link": "/eby/apa/5876983274.html", "age": 1.1139103864056965, "size": 2866.0}, {"loc": "eby", "title": "Available today!New paint wood floors! 2BR/1.5BA, inside laundry", "price": 1645.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880105187.html", "age": 1.1130493882986074, "size": 1000.0}, {"loc": "eby", "title": "Spacious with tall ceilings - 800ft", "price": 2295.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5880115067.html", "age": 1.1104743616133679, "size": null}, {"loc": "eby", "title": "4 BEDROOM HOUSE WALK TO N. CONCORD BART", "price": 2400.0, "brs": 4.0, "mine": 0, "link": "/eby/apa/5836748967.html", "age": 1.1104743616133679, "size": 1508.0}, {"loc": "eby", "title": "Ardenwood Single Family Home, Fremont", "price": 3800.0, "brs": 4.0, "mine": 0, "link": "/eby/apa/5880094617.html", "age": 1.107911222015468, "size": 1717.0}, {"loc": "eby", "title": "5bedroom 3 baths 3 car garage Available soon Near Costco", "price": 2600.0, "brs": 5.0, "mine": 0, "link": "/eby/apa/5880110415.html", "age": 1.1062090256357504, "size": 2516.0}, {"loc": "eby", "title": "GOLD COAST Stunning 1br, frml din,  hrdwd, cat OK,", "price": 1995.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5880093354.html", "age": 1.0936073761565195, "size": null}, {"loc": "eby", "title": "Prime Walnut Creek location! Spacious plan w/ balcony, Large closets", "price": 1875.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5849321911.html", "age": 1.0936073761565195, "size": 634.0}, {"loc": "eby", "title": "\"FULLY REMODELED\" 1 Bdrm, 1 Bath, Duplex", "price": 1795.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5880085452.html", "age": 1.0919488160459458, "size": null}, {"loc": "eby", "title": "Beautiful Contemporary 4 bed/3 baths Single Family Home with Pool", "price": 4800.0, "brs": 4.0, "mine": 0, "link": "/eby/apa/5880092070.html", "age": 1.0886467423753095, "size": 3440.0}, {"loc": "eby", "title": "\"FULLY REMODELED\" 1 Bdrm, 1 Bath, 4plex", "price": 1695.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5880081241.html", "age": 1.087824342079281, "size": null}, {"loc": "eby", "title": "For Rent - Remodeled Brookvale home", "price": 3600.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5880086625.html", "age": 1.083730908528721, "size": 1700.0}, {"loc": "eby", "title": "Fremont 3 Bd/2Ba in Warms Springs District", "price": 3000.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5880086063.html", "age": 1.082915915855561, "size": 1200.0}, {"loc": "eby", "title": "\"FULLY REMODELED\" 2 Bdrm, 1 Bath, 4plex", "price": 1995.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880080900.html", "age": 1.0780515857707924, "size": null}, {"loc": "eby", "title": "\"FULLY REMODELED\" 1 Bdrm, 1 Bath, 4plex", "price": 1695.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5880080676.html", "age": 1.0780515857707924, "size": null}, {"loc": "eby", "title": "\"FULLY REMODELED\" 3 Bdrm, 1 Bath, Duplex", "price": 3295.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5880079435.html", "age": 1.0772451095217759, "size": null}, {"loc": "eby", "title": "\"FULLY REMODELED\" 2 Bdrm, 1 Bath, SFR", "price": 3295.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880079294.html", "age": 1.0772451095217759, "size": null}, {"loc": "eby", "title": "Beautiful Designers Loft &amp; Studio ( Live/Work)", "price": 1500.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5868581536.html", "age": 1.0724314780010513, "size": 1300.0}, {"loc": "eby", "title": "Executive-style Townhouse, Quiet &amp; Carefree Living , Great Location", "price": 2595.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5880072394.html", "age": 1.0708364797390182, "size": 1400.0}, {"loc": "eby", "title": "SPECIAL: LIVE AT THE TOP OF THE PROPERTY, DRAMATIC VAULTED CEILING!", "price": 2405.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5879994041.html", "age": 1.0700407584341993, "size": 950.0}, {"loc": "eby", "title": "NICE/Sunny remodel nr school shops", "price": 2050.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5871736146.html", "age": 1.0692462188265979, "size": null}, {"loc": "eby", "title": "2Br/1Br Condo In Union City", "price": 2000.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880069795.html", "age": 1.0692462188265979, "size": 700.0}, {"loc": "eby", "title": "\"Location, Location, Location\"", "price": 3400.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5851888595.html", "age": 1.0676606741892831, "size": 1488.0}, {"loc": "eby", "title": "Largest 1 Bedroom Available Tomorrow!!!", "price": 2399.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5880067773.html", "age": 1.0668696639221613, "size": 925.0}, {"loc": "eby", "title": "NICE/Sunny remodel nr school shops", "price": 2050.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5871739584.html", "age": 1.0660798248773828, "size": null}, {"loc": "eby", "title": "Gorgeous Gaia Two Bedroom", "price": 3423.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880064817.html", "age": 1.064503650065101, "size": 626.0}, {"loc": "eby", "title": "4 month rental available", "price": 2200.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5869065531.html", "age": 1.064503650065101, "size": 1192.0}, {"loc": "eby", "title": "Super Spacious 2X1!!!", "price": 3828.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880054604.html", "age": 1.0637173091219083, "size": 898.0}, {"loc": "eby", "title": "Adorable Two Bedroom", "price": 3342.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880060465.html", "age": 1.0613652412502037, "size": 664.0}, {"loc": "eby", "title": "Large one bedroom and large living room two patios at 2028 Dwight way", "price": 2495.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5880060450.html", "age": 1.0613652412502037, "size": null}, {"loc": "eby", "title": "Perfect 3 bed/ 3 bath", "price": 3200.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5880046750.html", "age": 1.0582452835815637, "size": 1400.0}, {"loc": "eby", "title": "BBQ Grills, Courtyards, Patios/balconies, ATM, Shopping!", "price": 3072.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5880055725.html", "age": 1.0574681581018075, "size": 714.0}, {"loc": "eby", "title": "2428 Milvia #1 is a remodeled two bedroom apartment with one bathroom,", "price": 2495.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880047219.html", "age": 1.0551436148207711, "size": null}, {"loc": "eby", "title": "Beautiful view  by the beach in Alameda", "price": 1800.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5863487978.html", "age": 1.0543710364410819, "size": 580.0}, {"loc": "eby", "title": "Ready for a price reduction? Ready to live in the Lafayette Hills?", "price": 2461.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5879998710.html", "age": 1.0535995886006466, "size": 1050.0}, {"loc": "eby", "title": "Luxury &amp; Convenience all at Parker! BRAND NEW - 6 WEEKS FREE RENT!", "price": 2865.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5880036980.html", "age": 1.0535995886006466, "size": 706.0}, {"loc": "eby", "title": "You'll LOVE Your New Apartment Home!", "price": 2534.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5880049030.html", "age": 1.052060074625912, "size": 535.0}, {"loc": "eby", "title": "Ideal One Bedroom!", "price": 2750.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5880046790.html", "age": 1.0505250531456218, "size": 415.0}, {"loc": "eby", "title": "6 WEEKS FREE!! Move-in ready 2BR Flats in Downtown Berkeley!", "price": 3631.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880037739.html", "age": 1.0497592209502198, "size": 958.0}, {"loc": "eby", "title": "Thanksgiving in your new Pleasant Hill Home!", "price": 3500.0, "brs": 4.0, "mine": 0, "link": "/eby/apa/5844750610.html", "age": 1.0482309014301348, "size": 1826.0}, {"loc": "eby", "title": "Sunny 2 bedroom, 1 bath in West Berkeley", "price": 2300.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5858686114.html", "age": 1.047468409239276, "size": 700.0}, {"loc": "eby", "title": "Must See! Great Walnut Creek location, Lrg private deck, Spacious apt", "price": 1925.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5844200913.html", "age": 1.045946747883506, "size": 660.0}, {"loc": "eby", "title": "Class on the South side of campus? Live HERE!!!", "price": 3261.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880040529.html", "age": 1.0451875738947258, "size": 707.0}, {"loc": "eby", "title": "3 bedroom / 2.5 bath Townhouse for rent", "price": 2600.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5869062090.html", "age": 1.044429501161099, "size": 1400.0}, {"loc": "eby", "title": "Ivy Hill - 2 bedroom/1 bath + office + garage", "price": 2750.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880039505.html", "age": 1.044429501161099, "size": 950.0}, {"loc": "eby", "title": "Location, Community, Quality Living. It Starts Here!", "price": 2580.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5877718945.html", "age": 1.0436725272881466, "size": 700.0}, {"loc": "eby", "title": "Live the Oakland Lifestyle!", "price": 2580.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5877726435.html", "age": 1.0436725272881466, "size": 700.0}, {"loc": "eby", "title": "Proper Design. Smartly Priced. Ready for Move-In!", "price": 2980.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5877732325.html", "age": 1.0429166498883276, "size": 800.0}, {"loc": "eby", "title": "Modern Amenities. Beautiful Apartment!", "price": 1683.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5876891960.html", "age": 1.0429166498883276, "size": null}, {"loc": "eby", "title": "Urban Energy at a Great Location!", "price": 1488.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5870482800.html", "age": 1.0429166498883276, "size": null}, {"loc": "eby", "title": "Head-turning Style, Extraordinary Location", "price": 1783.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5870486327.html", "age": 1.0429166498883276, "size": null}, {"loc": "eby", "title": "Lovely Apartment Waiting for You to Make it Home!", "price": 1988.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5870466708.html", "age": 1.0429166498883276, "size": null}, {"loc": "eby", "title": "Lovely Apartments Waiting for You to Make it Home!", "price": 1633.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5870436289.html", "age": 1.0429166498883276, "size": null}, {"loc": "eby", "title": "Urban Energy at a Great Location!", "price": 1833.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5870383447.html", "age": 1.0429166498883276, "size": null}, {"loc": "eby", "title": "Right Around the Corner, Near Everywhere You Want to Be!", "price": 1583.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5840080515.html", "age": 1.0429166498883276, "size": null}, {"loc": "eby", "title": "Love Where You Live! Head-turning Style, Extraordinary Location", "price": 1888.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5848097410.html", "age": 1.0429166498883276, "size": 1.0}, {"loc": "eby", "title": "Wonderful Apartment You've Been Waiting For!", "price": 1888.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5848095009.html", "age": 1.0429166498883276, "size": null}, {"loc": "eby", "title": "Move in Special - $500 off Second month's Rent!", "price": 1583.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5876848133.html", "age": 1.0429166498883276, "size": null}, {"loc": "eby", "title": "SAVE $500 on your first month's rent", "price": 2375.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880026354.html", "age": 1.041408174992453, "size": 870.0}, {"loc": "eby", "title": "Make Your Move! Bright 3BR, 3BA, Custom Finishes, Available Now!", "price": 4515.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5880035042.html", "age": 1.041408174992453, "size": 1260.0}, {"loc": "eby", "title": "Head-turning Style, Extraordinary Location!", "price": 2980.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880034388.html", "age": 1.0406555727557731, "size": 700.0}, {"loc": "eby", "title": "1 Bed, 1 Bath Top Floor Unit with Eat-In Kitchen and Parking included", "price": 1450.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5835159203.html", "age": 1.0406555727557731, "size": 520.0}, {"loc": "eby", "title": "The Keys To Your New Home Await You! The Perks are Endless! Stop By...", "price": 2746.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5880033666.html", "age": 1.0406555727557731, "size": 710.0}, {"loc": "eby", "title": "Livermore Condo", "price": 2900.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5872010716.html", "age": 1.039904057510926, "size": 1744.0}, {"loc": "eby", "title": "2 Bed - 2.5 Bath,Newly Renovated $500 VISA GIFTCARD SPECIAL!!", "price": 2879.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5876834743.html", "age": 1.039153626904679, "size": 1247.0}, {"loc": "eby", "title": "Hurry in today to Ave.64 in Emeryville!! Limited Time offers!!", "price": 3147.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880025085.html", "age": 1.039153626904679, "size": 1073.0}, {"loc": "eby", "title": "Come to Enjoy Life for the Holidays in the Lafayette Hills!", "price": 2422.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5879995418.html", "age": 1.036908819486889, "size": 950.0}, {"loc": "eby", "title": "Come in Today for a Tour at Avenue 64!", "price": 2540.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5880021362.html", "age": 1.036162704038111, "size": 731.0}, {"loc": "eby", "title": "Popular Floor Plan Available Soon!", "price": 3412.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880024270.html", "age": 1.0331889488851689, "size": 592.0}, {"loc": "eby", "title": "\u25cbCHECK OUT OUR GREAT DEAL\u25cbSPEND LESS-GET MORE!\u25cb", "price": 2050.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5880016429.html", "age": 1.0331889488851689, "size": 527.0}, {"loc": "eby", "title": "2 bedroom 2 bathroom apartment home available for move in", "price": 1598.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880023600.html", "age": 1.0324481752428372, "size": 955.0}, {"loc": "eby", "title": "$99 Deposit!!1 Bedroom 1 Bath Home Available Now!", "price": 2540.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5880013189.html", "age": 1.031708463076111, "size": 714.0}, {"loc": "eby", "title": "2BD/2BA Available Soon! Special available", "price": 2501.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880022506.html", "age": 1.031708463076111, "size": 950.0}, {"loc": "eby", "title": "Beautiful 1 bed 1 bath w/ den facing San Pablo", "price": 2875.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5880009789.html", "age": 1.031708463076111, "size": 787.0}, {"loc": "eby", "title": "Saving the BEST for Last / 3bd/2ba with Washer &amp; Dryer / Walk to BART", "price": 3235.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5880021940.html", "age": 1.031708463076111, "size": 1270.0}, {"loc": "eby", "title": "in1x1 enjoy $2,000 visa giftcard upon move-in", "price": 2053.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5880021772.html", "age": 1.031708463076111, "size": 700.0}, {"loc": "eby", "title": "BEAUTIFULLY APPOINTED 2X1 WITH GRANITE KITCHEN &amp; BATH", "price": 1951.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880020862.html", "age": 1.0309698101050964, "size": null}, {"loc": "eby", "title": "The time is running out for this Fall Special!", "price": 1795.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5880013478.html", "age": 1.0309698101050964, "size": 725.0}, {"loc": "eby", "title": "Spacious Pleasant Hill Apartments", "price": 1970.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880020724.html", "age": 1.0309698101050964, "size": null}, {"loc": "eby", "title": "Bright 1 bedroom, private parking spot", "price": 1950.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5880020286.html", "age": 1.0302322140564226, "size": null}, {"loc": "eby", "title": "Gorgeous Downtown Concord Condo", "price": 1750.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880009447.html", "age": 1.0302322140564226, "size": 750.0}, {"loc": "eby", "title": "Yes!!! Is Ready and Available For You To Move In!!", "price": 1850.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5880018045.html", "age": 1.0287601836651026, "size": 650.0}, {"loc": "eby", "title": "~*~* Newly Remodeled Home ~*~*", "price": 2500.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5870658983.html", "age": 1.0287601836651026, "size": 800.0}, {"loc": "eby", "title": "....WASHER DRYER IN UNIT... $199 DEPOSIT...AMAZING RENT SPECIALS....", "price": 2450.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880017678.html", "age": 1.0287601836651026, "size": 1004.0}, {"loc": "eby", "title": "Bright, Spacious renovated 1 bed, 1 bath in Adams Point, with parking", "price": 1825.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5860047932.html", "age": 1.0280257448081296, "size": 655.0}, {"loc": "eby", "title": "ISN'T IT TIME YOU TREAT YOURSELF?START HERE AT LEILANI APTS!", "price": 1695.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5860195404.html", "age": 1.0280257448081296, "size": 640.0}, {"loc": "eby", "title": "\u266b \u266cTHE HARMONY &amp; LUXURY HERE IS MUSICAL\u266a \u266b", "price": 2225.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5859571147.html", "age": 1.0280257448081296, "size": 1000.0}, {"loc": "eby", "title": "Renovated Pleasant Hill Apartments in Great Location!", "price": 1735.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5880014525.html", "age": 1.0265600085340136, "size": null}, {"loc": "eby", "title": "Cozy Up at the Fireplace... Almost the Holidays!", "price": 2589.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880000323.html", "age": 1.0258287066410665, "size": 1100.0}, {"loc": "eby", "title": "1 bed, 1 bath, Close to BART, Close to Shopping, New Community", "price": 2357.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5880013683.html", "age": 1.0258287066410665, "size": 886.0}, {"loc": "eby", "title": "SPECIAL OFFER: 1 1/2 mon. credit on renovated 3 bed, 1 bath house", "price": 2595.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5876341004.html", "age": 1.0250984459376111, "size": null}, {"loc": "eby", "title": "Stunning and Spacious Home in Union City!", "price": 4000.0, "brs": 5.0, "mine": 0, "link": "/eby/apa/5880002413.html", "age": 1.0250984459376111, "size": 2976.0}, {"loc": "eby", "title": "Great Location Near Shopping And Schools!", "price": 2605.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880012588.html", "age": 1.0250984459376111, "size": 990.0}, {"loc": "eby", "title": "Walking Closets! Den, Vaulted Ceilings, Fireplace, 2 Cover Parking", "price": 3200.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5880011456.html", "age": 1.024369224201642, "size": 1400.0}, {"loc": "eby", "title": "GET YOUR NEW HOME READY FOR CHRISTMAS!!!", "price": 2395.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880011188.html", "age": 1.024369224201642, "size": 1050.0}, {"loc": "eby", "title": "Higby Move-in Special- 6 months free Parking!!! Call Today!!", "price": 2800.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5880010206.html", "age": 1.0236410392174724, "size": 709.0}, {"loc": "eby", "title": "Ready Now! Rooftop Lounge Panoramic View!", "price": 2825.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5879998192.html", "age": 1.0229138887757112, "size": 709.0}, {"loc": "eby", "title": "For More Space &amp; Full Size W/D! Why Not Stop In?!", "price": 2551.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5880009287.html", "age": 1.0229138887757112, "size": 985.0}, {"loc": "eby", "title": "The Right Size! The Right Location! $99 Deposit: With Approved Credit!", "price": 2188.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5880008921.html", "age": 1.0229138887757112, "size": 610.0}, {"loc": "eby", "title": "SAVING MONEY BRIGHTENS YOUR DAY? CHECK OUT OUR MOVING SPECIAL!!!", "price": 2445.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880008868.html", "age": 1.02218777067324, "size": 1225.0}, {"loc": "eby", "title": "Furnished Incline Village Home for Rent", "price": 3900.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5870307263.html", "age": 1.02218777067324, "size": 2600.0}, {"loc": "eby", "title": "**GREAT DEAL! CALL NOW THIS WEEK ONLY! $199 DEPOSIT**", "price": 2450.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880008746.html", "age": 1.02218777067324, "size": 1004.0}, {"loc": "eby", "title": "\u25cbSIT BACK\u25cbRELAX.YOUR NEW VIEW AWAITS!\u25cb", "price": 2050.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5880008362.html", "age": 1.02218777067324, "size": 527.0}, {"loc": "eby", "title": "\u25cbSIT BACK\u25cbRELAX.YOUR NEW VIEW AWAITS!\u25cb", "price": 2050.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5880007515.html", "age": 1.0214626827131925, "size": 527.0}, {"loc": "eby", "title": "Take \"Moving\" Off Your To-Do List This Weekend! Come to The Grand", "price": 3053.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5879991062.html", "age": 1.0214626827131925, "size": 780.0}, {"loc": "eby", "title": "Luxury Living in Walnut Creek- 6 Weeks Free*, #533", "price": 3470.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5874722330.html", "age": 1.0207386227049307, "size": 1086.0}, {"loc": "eby", "title": "Beautiful 2 Bedroom close to shopping!", "price": 2627.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880006466.html", "age": 1.0207386227049307, "size": 1029.0}, {"loc": "eby", "title": "TIS THE SEASON TO BE JOLLY JUST A LITTLE EARLY!IT'S NEVER TOO SOON!", "price": 2295.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880006286.html", "age": 1.0207386227049307, "size": 1100.0}, {"loc": "eby", "title": "Available Now, Pool, Soaking Tub, Granite Look Counter, WD", "price": 1716.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5879988933.html", "age": 1.0207386227049307, "size": 975.0}, {"loc": "eby", "title": "Luxury/Brand New/Downtown/Walk to Bart  #530", "price": 3820.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5874718887.html", "age": 1.0200155884640234, "size": 1063.0}, {"loc": "eby", "title": "Attention Renters!! We can Help", "price": 2500.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5872083217.html", "age": 1.0200155884640234, "size": 2500.0}, {"loc": "eby", "title": "Cute and convenient, 2bd/1ba Apt in Bay Farm Island - 92 Maitland Dr#D", "price": 2200.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5876856308.html", "age": 1.019293577812225, "size": null}, {"loc": "eby", "title": "Refrigerator, Garages available for rental, Covered parking", "price": 1860.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880003753.html", "age": 1.019293577812225, "size": 803.0}, {"loc": "eby", "title": "**HOLIDAY SPECIALS**$1000 off Dec Rent For November Move-In!", "price": 2375.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5879944139.html", "age": 1.0185725885774524, "size": 1187.0}, {"loc": "eby", "title": "Spacious 2bed/2bath 3rd floor walk to Bart! Stop by and inquire today!", "price": 2408.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5880003069.html", "age": 1.0185725885774524, "size": 955.0}, {"loc": "eby", "title": "Sunny, Spacious 2-Bedroom w/ THE VIEW", "price": 2500.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5879994484.html", "age": 1.0185725885774524, "size": null}, {"loc": "eby", "title": "Amazing 1 Bedroom Available Now!!", "price": 2600.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5879992231.html", "age": 1.017852618593764, "size": 716.0}, {"loc": "eby", "title": "Open House Today, Pantry, Granite Look Counter, WD", "price": 1736.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5879988463.html", "age": 1.016415727746449, "size": 850.0}, {"loc": "eby", "title": "*COMING SOON! 3BD/2.5BA DISCO BAY HOME-DEEP WATER-1464 DISCOVERY BLVD*", "price": 3100.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5875237637.html", "age": 1.016415727746449, "size": 2349.0}, {"loc": "eby", "title": "GET THE PERFECT NEW FURNITURE ON US!FREE RENT!CALL &amp; ASK ABOUT IT!", "price": 2345.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5879998690.html", "age": 1.0156988025814513, "size": 1100.0}, {"loc": "eby", "title": "*Gorgeous 1 bedroom/1bathroom with washer and dryer*", "price": 1956.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5879974902.html", "age": 1.0149828880647511, "size": 600.0}, {"loc": "eby", "title": "Vaulted Ceilings In Living Room ~ 2x2 Only One Left!", "price": 2560.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5879989054.html", "age": 1.0149828880647511, "size": 935.0}, {"loc": "eby", "title": "Stop The Commute * Walk To Work * San Ramon Living!!!", "price": 2681.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5879987717.html", "age": 1.0149828880647511, "size": 950.0}, {"loc": "eby", "title": "Top Floor Online Payments, Picnic and BBQ areas, Dishwasher", "price": 1830.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5879996957.html", "age": 1.0142679820607903, "size": 898.0}, {"loc": "eby", "title": "Very Close to Shopping, Dining, &amp; Broadway Plaza, Energy Efficient", "price": 1999.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5879994546.html", "age": 1.0128411870788923, "size": 770.0}, {"loc": "eby", "title": "View Today, Pool, Soaking Tub, Near Freeway, Spacious, WD", "price": 1616.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5879987901.html", "age": 1.0128411870788923, "size": 715.0}, {"loc": "eby", "title": "OPEN HOUSE THIS WEEKEND 10AM-5PM BOTH DAYS!", "price": 2499.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5879994332.html", "age": 1.0128411870788923, "size": 707.0}, {"loc": "eby", "title": "2 Bedroom, 2 Bath + Vaulted Ceilings", "price": 2300.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5879994113.html", "age": 1.0128411870788923, "size": 957.0}, {"loc": "eby", "title": "Garages available for rental, Playground area, Refrigerator", "price": 1860.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5879993633.html", "age": 1.0121292938598156, "size": 803.0}, {"loc": "eby", "title": "Completely Remodeled Large 1BR Apartment!", "price": 1443.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5876741386.html", "age": 1.0121292938598156, "size": null}, {"loc": "eby", "title": "Fully Furnished Fitness Center!", "price": 2800.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5879993426.html", "age": 1.0121292938598156, "size": 709.0}, {"loc": "eby", "title": "Beautiful 1 Bedroom, Top Floor, East Bay Hillside View - Coming Soon!", "price": 2967.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5879992452.html", "age": 1.0114184006711573, "size": 793.0}, {"loc": "eby", "title": "$99 Deposit On This Perfect Home For You", "price": 2380.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5879985883.html", "age": 1.0114184006711573, "size": 988.0}, {"loc": "eby", "title": "Coming soon 1 bedroom", "price": 1605.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5879990799.html", "age": 1.0107085054072102, "size": 885.0}, {"loc": "eby", "title": "Beautiful 3 bedroom on Lake in Discovery Bay", "price": 2600.0, "brs": 3.0, "mine": 0, "link": "/eby/apa/5879974324.html", "age": 1.0099996059681757, "size": 2100.0}, {"loc": "eby", "title": "beautiful home in Antioch", "price": 2500.0, "brs": 5.0, "mine": 0, "link": "/eby/apa/5879979475.html", "age": 1.0099996059681757, "size": 2300.0}, {"loc": "eby", "title": "Charming, Quiet 2bd/1.5 bath", "price": 1475.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5874594714.html", "age": 1.0092917002601411, "size": null}, {"loc": "eby", "title": "Pool, High End Flooring, Stainless Steel Appliances,Granite Countertop", "price": 2095.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5879988402.html", "age": 1.008584786195061, "size": 900.0}, {"loc": "eby", "title": "Wonderful One-Bedroom Apartment Now Available!", "price": 1809.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5879986793.html", "age": 1.0078788616907353, "size": 778.0}, {"loc": "eby", "title": "MASSIVE Two-Bedroom Apartment Home Turn Key Ready!", "price": 3080.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5879985785.html", "age": 1.0071739246707898, "size": 950.0}, {"loc": "eby", "title": "Very Large REMODEL /***2 WEEKS FREE***", "price": 1350.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5879975839.html", "age": 1.0071739246707898, "size": 1025.0}, {"loc": "eby", "title": "Very Large REMODEL 1 bdr,/Low Deposit", "price": 1300.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5879975200.html", "age": 1.0064699730646545, "size": 975.0}, {"loc": "eby", "title": "Regular One Bedroom Ready Now!", "price": 2205.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5879984827.html", "age": 1.0064699730646545, "size": 695.0}, {"loc": "eby", "title": "Bold and Modern Living - Walk to BART - Dine in Downtown!", "price": 3915.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5879984810.html", "age": 1.0064699730646545, "size": 1232.0}, {"loc": "eby", "title": "Rare 2Bedroom 1 Bathroom. Only $99 Deposit", "price": 2265.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5879984047.html", "age": 1.0057670048075447, "size": 876.0}, {"loc": "eby", "title": "3rd Floor 1 Bedroom Just For You!", "price": 2005.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5879983445.html", "age": 1.0057670048075447, "size": 748.0}, {"loc": "eby", "title": "Easy Peasy \u263a", "price": 1985.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5879983218.html", "age": 1.0057670048075447, "size": 575.0}, {"loc": "eby", "title": "LARGE 2BR 2BA WITH WASHER DRYER! PERFECT FOR ROOMMATES!", "price": 2485.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5879982972.html", "age": 1.0050650178404403, "size": 1204.0}, {"loc": "eby", "title": "Perfect Home For You!", "price": 2005.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5879982803.html", "age": 1.0050650178404403, "size": 748.0}, {"loc": "eby", "title": "BEAUTIFUL GARDEN SCENERY FROM THE COMFORT OF YOUR PRIVATE PATIO", "price": 2430.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5879981484.html", "age": 1.0043640101100657, "size": null}, {"loc": "eby", "title": "Very Large REMODEL /***2 WEEKS FREE***", "price": 1350.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5879971253.html", "age": 1.0043640101100657, "size": 1025.0}, {"loc": "eby", "title": "Very Large REMODEL 1 bdr,/Low Deposit", "price": 1300.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5879970890.html", "age": 1.0036639795688693, "size": 975.0}, {"loc": "eby", "title": "NO RENT unitl December, Call now for details Rent today, move tomorrow", "price": 1711.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5879972464.html", "age": 1.0036639795688693, "size": 540.0}, {"loc": "eby", "title": "Powell? MORE LIKE WOW!", "price": 2553.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5879970896.html", "age": 1.0029649241750043, "size": 643.0}, {"loc": "eby", "title": "THIS IS YOUR LAST CHANCE TO TAKE THIS AMAZING DEAL CALL NOW!!", "price": 2395.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5879978000.html", "age": 1.0022668418923086, "size": 1225.0}, {"loc": "eby", "title": "Very Large REMODEL /***2 WEEKS FREE***", "price": 1350.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5879966805.html", "age": 1.0015697306902853, "size": 1025.0}, {"loc": "eby", "title": "WE HAVE YOUR WISHED APARTMENT HOME HERE!!!", "price": 1965.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5879976526.html", "age": 1.0015697306902853, "size": 950.0}, {"loc": "eby", "title": "2Bd/1Ba ground level w/ extra large patio and modern updates!", "price": 2399.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5879976183.html", "age": 1.0008735885440818, "size": 900.0}, {"loc": "eby", "title": "2 Bedroom 2 Bath Available in Brentwood", "price": 1875.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5879975364.html", "age": 1.0008735885440818, "size": 950.0}, {"loc": "eby", "title": "Very Large REMODEL 1 bdr,/Low Deposit", "price": 1300.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5879967248.html", "age": 1.0001784134344716, "size": 975.0}, {"loc": "eby", "title": "Newly renovated flat with balcony; quiet, lovely area near: Ohlone par", "price": 2125.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5879955103.html", "age": 0.9987909562761369, "size": null}, {"loc": "eby", "title": "Contemporary Remodeled 2 bedroom with a patio", "price": 3585.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5879965145.html", "age": 0.9980986702169119, "size": 1090.0}, {"loc": "eby", "title": "Gorgeous Two-Bedroom Residence in a Pet-Friendly Community!", "price": 2482.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5879969880.html", "age": 0.9974073431732413, "size": 1140.0}, {"loc": "eby", "title": "Look No Further! We Have What You're Looking For! Steps From BART!", "price": 2713.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5879949380.html", "age": 0.9967169731537352, "size": 1046.0}, {"loc": "eby", "title": "Waterstone at Fremont's Awesome Autumn Rates", "price": 2160.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5879959528.html", "age": 0.9960275581725133, "size": 980.0}, {"loc": "eby", "title": "2-bedroom (there are two separate rooms in addition to a small living", "price": 1875.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5879943547.html", "age": 0.9960275581725133, "size": null}, {"loc": "eby", "title": "Two bed, 2 bath, washer,dryer,patio,garage", "price": 2478.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5879967324.html", "age": 0.9953390962491863, "size": 1023.0}, {"loc": "eby", "title": "2 Bed - 2.5 Bath, Will hand you $500 Visa gift card!", "price": 2872.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5879955779.html", "age": 0.9953390962491863, "size": 1247.0}, {"loc": "eby", "title": "2 Bed - 2.5 Bath, 3 Patios &amp; $500 gift Card!", "price": 2872.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5879966266.html", "age": 0.9946515854088367, "size": 1247.0}, {"loc": "eby", "title": "Move in Special! $500 off move in cost!", "price": 2395.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5879965764.html", "age": 0.9946515854088367, "size": 1100.0}, {"loc": "eby", "title": "One-Bedroom Apartment In The Heart Of Pleasanton!", "price": 2152.0, "brs": 1.0, "mine": 0, "link": "/eby/apa/5879964964.html", "age": 0.9939650236819991, "size": 783.0}, {"loc": "eby", "title": "\u27b8RIGHT THIS WAY \u27bc  \u27b8 \u27bc OPEN HOUSE TODAY!", "price": 2225.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5879964519.html", "age": 0.9939650236819991, "size": 925.0}, {"loc": "eby", "title": "Glenview 2 BR + 1 Bath available for rent", "price": 3100.0, "brs": 2.0, "mine": 0, "link": "/eby/apa/5867205827.html", "age": 0.9939650236819991, "size": 1150.0}, {"loc": "eby", "title": "Mine", "price": 2200.0, "brs": 2.0, "mine": 1, "link": "None", "age": 2.9523737188733326, "size": 1400.0}]}, "encoding": {"y": {"field": "price", "type": "quantitative"}, "color": {"field": "mine", "type": "nominal"}, "x": {"field": "size", "type": "quantitative"}}, "config": {"cell": {"width": 500, "height": 350}, "mark": {"size": 200.0}}, "mark": "circle"};
var selector = "#b5c5d25b-82b9-48b4-b4c5-5596b3e90154";
var type = "vega-lite";

var output_area = this;
require(['nbextensions/jupyter-vega/index'], function(vega) {
  vega.render(selector, spec, type, output_area);
}, function (err) {
  if (err.requireType !== 'scripterror') {
    throw(err);
  }
});
&lt;/script&gt;&lt;img alt="../_images/dc531484a939f3f05e2f2ca0c7aa926cb0fc8c387388a45f26b56d434feb0ca5.png" src="../_images/dc531484a939f3f05e2f2ca0c7aa926cb0fc8c387388a45f26b56d434feb0ca5.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;smin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;smax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1300&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1500&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;n_br&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="c1"&gt;# subset = results.query(&amp;#39;size &amp;gt; @smin and size &amp;lt; @smax&amp;#39;)&lt;/span&gt;
&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplots&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;brs &amp;lt; 4&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groupby&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;brs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;price&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bins&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;axvline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target_price&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;--&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;img alt="../_images/4ecaf8690e961c274c78b2a9d9cf0353d6f8dd8612be1d55f732e9861154957b.png" src="../_images/4ecaf8690e961c274c78b2a9d9cf0353d6f8dd8612be1d55f732e9861154957b.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Finally, we can save this data to a CSV to play around with it later.&lt;/span&gt;
&lt;span class="c1"&gt;# We&amp;#39;ll have to remove some annoying characters first:&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;string&lt;/span&gt;
&lt;span class="n"&gt;use_chars&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ascii_letters&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;\
    &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;\
    &lt;span class="s1"&gt;&amp;#39; /\.&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;use_chars&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;

&lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;../data/craigslist_results.csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="recap"&gt;
&lt;h2&gt;RECAP&lt;/h2&gt;
&lt;p&gt;To sum up what we just did:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;We defined the ability to query a website using a custom URL. This is usually the same in structure for website, but the parameter names will be different.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We sent a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;get&lt;/span&gt;&lt;/code&gt; request to Craigslist using the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;requests&lt;/span&gt;&lt;/code&gt; module of python.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We parsed the response using &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;BeautifulSoup4&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We then looped through a bunch of apartment listings, pulled some relevant data, and combined it all into a cleaned and usable dataframe with &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pandas&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Next up I’ll take a look at the data, and see if there’s anything interesting to make of it.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="bonus-auto-emailing-yourself-w-notifications"&gt;
&lt;h2&gt;Bonus - auto-emailing yourself w/ notifications&lt;/h2&gt;
&lt;p&gt;A few people have asked me about using this kind of process to make a bot that scrapes craigslist periodically. This is actually quite simple, as it basically involves pulling the top listings from craigslist, checking this against an “old” list, and detecting if there’s anything new that has popped up since the last time you checked.&lt;/p&gt;
&lt;p&gt;Here’s a simple script that will get the job done. Once again, don’t pull too much data at once, and don’t query Craigslist too frequently, or you’re gonna get banned.&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# We&amp;#39;ll use the gmail module (there really is a module for everything in python)&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;gmail&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;gm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gmail&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GMail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;my_username&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;my_password&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;gm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# Define our URL and a query we want to post&lt;/span&gt;
&lt;span class="n"&gt;base_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://sfbay.craigslist.org/&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;base_url&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;search/eby/apa?nh=48&amp;amp;anh=49&amp;amp;nh=112&amp;amp;nh=58&amp;amp;nh=61&amp;amp;nh=62&amp;amp;nh=66&amp;amp;max_price=2200&amp;amp;bedrooms=1&amp;#39;&lt;/span&gt;

&lt;span class="c1"&gt;# This will remove weird characters that people put in titles like ****!***!!!&lt;/span&gt;
&lt;span class="n"&gt;use_chars&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ascii_letters&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)])&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;div class="output traceback highlight-ipythontb notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gt"&gt;---------------------------------------------------------------------------&lt;/span&gt;
&lt;span class="ne"&gt;SMTPAuthenticationError&lt;/span&gt;&lt;span class="g g-Whitespace"&gt;                   &lt;/span&gt;Traceback (most recent call last)
&lt;span class="nn"&gt;&amp;lt;ipython-input-2-49f6a18c0f58&amp;gt;&lt;/span&gt; in &lt;span class="ni"&gt;&amp;lt;module&amp;gt;&lt;/span&gt;&lt;span class="nt"&gt;()&lt;/span&gt;
&lt;span class="g g-Whitespace"&gt;      &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;gm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gmail&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GMail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;my_username&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;my_password&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="ne"&gt;----&amp;gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;gm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="g g-Whitespace"&gt;      &lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt; 
&lt;span class="g g-Whitespace"&gt;      &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="c1"&gt;# Define our URL and a query we want to post&lt;/span&gt;
&lt;span class="g g-Whitespace"&gt;      &lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="n"&gt;base_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://sfbay.craigslist.org/&amp;#39;&lt;/span&gt;

&lt;span class="nn"&gt;/Users/choldgraf/anaconda/lib/python3.7/site-packages/gmail/gmail.pyc&lt;/span&gt; in &lt;span class="ni"&gt;connect&lt;/span&gt;&lt;span class="nt"&gt;(self)&lt;/span&gt;
&lt;span class="g g-Whitespace"&gt;     &lt;/span&gt;&lt;span class="mi"&gt;65&lt;/span&gt;         &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ehlo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="g g-Whitespace"&gt;     &lt;/span&gt;&lt;span class="mi"&gt;66&lt;/span&gt;         &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="ne"&gt;---&amp;gt; &lt;/span&gt;&lt;span class="mi"&gt;67&lt;/span&gt;             &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="g g-Whitespace"&gt;     &lt;/span&gt;&lt;span class="mi"&gt;68&lt;/span&gt;         &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;SMTPAuthenticationError&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="g g-Whitespace"&gt;     &lt;/span&gt;&lt;span class="mi"&gt;69&lt;/span&gt;             &lt;span class="c1"&gt;# Catch redirect to account unlock &amp;amp; reformat&lt;/span&gt;

&lt;span class="nn"&gt;/Users/choldgraf/anaconda/lib/python3.7/smtplib.pyc&lt;/span&gt; in &lt;span class="ni"&gt;login&lt;/span&gt;&lt;span class="nt"&gt;(self, user, password)&lt;/span&gt;
&lt;span class="g g-Whitespace"&gt;    &lt;/span&gt;&lt;span class="mi"&gt;620&lt;/span&gt;             &lt;span class="c1"&gt;# 235 == &amp;#39;Authentication successful&amp;#39;&lt;/span&gt;
&lt;span class="g g-Whitespace"&gt;    &lt;/span&gt;&lt;span class="mi"&gt;621&lt;/span&gt;             &lt;span class="c1"&gt;# 503 == &amp;#39;Error: already authenticated&amp;#39;&lt;/span&gt;
&lt;span class="ne"&gt;--&amp;gt; &lt;/span&gt;&lt;span class="mi"&gt;622&lt;/span&gt;             &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;SMTPAuthenticationError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="g g-Whitespace"&gt;    &lt;/span&gt;&lt;span class="mi"&gt;623&lt;/span&gt;         &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;code&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="g g-Whitespace"&gt;    &lt;/span&gt;&lt;span class="mi"&gt;624&lt;/span&gt; 

&lt;span class="ne"&gt;SMTPAuthenticationError&lt;/span&gt;: (535, &amp;#39;5.7.8 Username and Password not accepted. Learn more at\n5.7.8  https://support.google.com/mail/answer/14257 of1sm4627014pbc.11 - gsmtp&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;link_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;  &lt;span class="c1"&gt;# We&amp;#39;ll store the data here&lt;/span&gt;
&lt;span class="n"&gt;link_list_send&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;  &lt;span class="c1"&gt;# This is a list of links to be sent&lt;/span&gt;
&lt;span class="n"&gt;send_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;  &lt;span class="c1"&gt;# This is what will actually be sent in the email&lt;/span&gt;

&lt;span class="c1"&gt;# Careful with this...too many queries == your IP gets banned temporarily&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;resp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;txt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bs4&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;html.parser&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;apts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findAll&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;class&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;row&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
    
    &lt;span class="c1"&gt;# We&amp;#39;re just going to pull the title and link&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;apts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;class&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hdrlnk&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;use_chars&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;href&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;link_list&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;link_list_send&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Found new listing&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;link_list_send&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;send_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;  -  &amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;base_url&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            
    &lt;span class="c1"&gt;# Flush the cache if we&amp;#39;ve found new entries&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;link_list_send&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Sending mail!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;send_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Message&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_payload&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;gm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;recipient_email@mydomain.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;link_list&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;link_list_send&lt;/span&gt;
        &lt;span class="n"&gt;link_list_send&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="n"&gt;send_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    
    &lt;span class="c1"&gt;# Sleep a bit so CL doesn&amp;#39;t ban us&lt;/span&gt;
    &lt;span class="n"&gt;sleep_amt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;120&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sleep_amt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;And there you have it - your own little bot to keep you on the top of the rental market.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://chrisholdgraf.com/blog/2015/2015-08-30-craigslist_scrape/" rel="alternate"/>
    <summary>In this notebook, I’ll show you how to make a simple query on Craigslist using some nifty python modules. You can take advantage of all the structure data that exists on webpages to collect interesting datasets.First we need to figure out how to submit a query to Craigslist. As with many websites, one way you can do this is simply by constructing the proper URL and sending it to Craigslist. Here’s a sample URL that is returned after manually typing in a search to Craigslist:</summary>
    <category term="programming" label="programming"/>
    <category term="python" label="python"/>
    <published>2015-08-30T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://chrisholdgraf.com/blog/2015/2015-09-27-craigslist_data_analysis/</id>
    <title>Craigslist data analysis</title>
    <updated>2015-09-27T00:00:00+00:00</updated>
    <content type="html">&lt;section id="using-craigslist-to-compare-prices-in-the-bay-area"&gt;

&lt;p&gt;In the &lt;a class="reference external" href="http://chrisholdgraf.com/querying-craigslist-with-python/"&gt;last post&lt;/a&gt; I showed how to use a simple python bot to scrape data from Criagslist. This is a quick follow-up to take a peek at the data.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Note - data that you scrape from Craigslist is pretty limited. They tend to clear out old posts, and you can only scrape from recent posts anyway to avoid them blocking you.&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Now that we’ve got some craigslist data, what questions can we ask? Well, a good start would be to see where we want (or don’t want) to rent our house. Let’s compare the housing market in a few different regions of the Bay Area.&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Seaborn can help create some pretty plots&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;seaborn&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;sns&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;matplotlib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;pyplot&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;mpl&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="k"&gt;matplotlib&lt;/span&gt; inline
&lt;span class="n"&gt;sns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_palette&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;colorblind&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;sns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_style&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;white&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# First we&amp;#39;ll load the data we pulled from before&lt;/span&gt;
&lt;span class="n"&gt;results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;../data/craigslist_results.csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="price-distributions"&gt;
&lt;h1&gt;Price distributions&lt;/h1&gt;
&lt;p&gt;As a start, let’s take a look at the distribution of home prices to get an idea for what we’re dealing with:&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplots&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;figsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;sns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;distplot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;price&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dropna&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;img alt="../_images/5e61fcc310c3b744b46ed6582f714bcd0903deaf021ed2f908639a653e48b043.png" src="../_images/5e61fcc310c3b744b46ed6582f714bcd0903deaf021ed2f908639a653e48b043.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;That’s not super useful - it looks like we have a highly skewed distribution with a few instances way out to the right. We’ll convert to a log scale from here on to make it easier to comprehend:&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplots&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;figsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;logprice&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;price&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;sns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;distplot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;logprice&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dropna&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Log plots are nicer for skewed data&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;div class="output text_plain highlight-myst-ansi notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[&amp;amp;ltmatplotlib.text.Text at 0x1141cb690&amp;amp;gt]
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;img alt="../_images/9cdc0f19d2a918193659602e9d02da9d61b323ef4c360196a01a97e805289d94.png" src="../_images/9cdc0f19d2a918193659602e9d02da9d61b323ef4c360196a01a97e805289d94.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Don&amp;#39;t forget the log mappings:&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;10**&lt;/span&gt;&lt;span class="si"&gt;{0}&lt;/span&gt;&lt;span class="s1"&gt; = &lt;/span&gt;&lt;span class="si"&gt;{1}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_xlim&lt;/span&gt;&lt;span class="p"&gt;()])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;However, what we really want is to look at the breakdown of prices for a few locations in the bay area. Luckily Craigslist stores this in the URL of our search, so we can easily split this up with a pandas &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;groupby&lt;/span&gt;&lt;/code&gt;:&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax_hist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplots&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;figsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vals&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groupby&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;loc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;sns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;distplot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vals&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;logprice&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dropna&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ax_hist&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ax_hist&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;legend&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;ax_hist&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;San Francisco is too damn expensive&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;img alt="../_images/f5f7b912ab49477e2c95dac2dba6737e86d4b0d76c5393a37450a62f650ff36a.png" src="../_images/f5f7b912ab49477e2c95dac2dba6737e86d4b0d76c5393a37450a62f650ff36a.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;summary&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groupby&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;loc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;describe&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;logprice&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unstack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;loc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vals&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;summary&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iteritems&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;{0}&lt;/span&gt;&lt;span class="s1"&gt;: &lt;/span&gt;&lt;span class="si"&gt;{1}&lt;/span&gt;&lt;span class="s1"&gt;+/-&lt;/span&gt;&lt;span class="si"&gt;{2}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vals&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mean&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;vals&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;std&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;vals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
    
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Differences on the order of: $&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mf"&gt;3.65&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mf"&gt;3.4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;That’s a bit unsurprising - San Francisco is significantly more expensive than any other region in the area. Note that this is a log scale, so small differences at this scale == large differences in the raw values.&lt;/p&gt;
&lt;p&gt;However, it looks like the shapes of these prices are different as well. If any of these distributions aren’t symmetric around the center, then describing it with the mean +/- standard deviation isn’t so great.&lt;/p&gt;
&lt;p&gt;Perhaps a better way to get an idea for what kind of deal we’re getting is to directly calculate price per square foot. Let’s see how this scales as the houses go up.&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# We&amp;#39;ll quickly create a new variable to use here&lt;/span&gt;
&lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ppsf&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;price&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;size&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# These switches will turn on/off the KDE vs. histogram&lt;/span&gt;
&lt;span class="n"&gt;kws_dist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;kde&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hist&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;n_loc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;loc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unique&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ax_ppsf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax_sze&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplots&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;figsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vals&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groupby&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;loc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;sns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;distplot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vals&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ppsf&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dropna&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ax_ppsf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="n"&gt;bins&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;.5&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kws_dist&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;sns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;distplot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vals&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;size&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dropna&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ax_sze&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="n"&gt;bins&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kws_dist&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ax_ppsf&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xlim&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Price per square foot&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ax_sze&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Size&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;div class="output text_plain highlight-myst-ansi notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[&amp;amp;ltmatplotlib.text.Text at 0x114f59090&amp;amp;gt]
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;img alt="../_images/2fc6e9b2a0e6eb1a204382455fbd06144f1f66e902032f99dcc0a4883b4882c7.png" src="../_images/2fc6e9b2a0e6eb1a204382455fbd06144f1f66e902032f99dcc0a4883b4882c7.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;So it looks like size-wise, there aren’t many differences here. However, with price per square foot, you’ll be paying a lot more for the same space in SF.&lt;/p&gt;
&lt;p&gt;Finally, let’s take a look at how the price scales with the size. For this, we’ll use a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;regplot&lt;/span&gt;&lt;/code&gt; to fit a line to each distribution.&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Split up by location, then plot summaries of the data for each&lt;/span&gt;
&lt;span class="n"&gt;n_loc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;loc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unique&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;axs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplots&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n_loc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;figsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;n_loc&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vals&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;axr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groupby&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;loc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;axs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;sns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;regplot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;size&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ppsf&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;vals&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;axr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;sns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;distplot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vals&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ppsf&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dropna&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;kde&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;axr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                 &lt;span class="n"&gt;bins&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;.5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;sns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;distplot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vals&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;size&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dropna&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;kde&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;axr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                 &lt;span class="n"&gt;bins&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;axr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Location: &lt;/span&gt;&lt;span class="si"&gt;{0}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;axs&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;xlim&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4000&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;ylim&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;axs&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;xlim&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;ylim&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;axs&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;xlim&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4000&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;ylim&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;.002&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;img alt="../_images/4a08845c707039dd484220bad258afce9d395592cc50adce0b05184b06a08210.png" src="../_images/4a08845c707039dd484220bad258afce9d395592cc50adce0b05184b06a08210.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;And now on top of one another&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplots&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;locs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;res&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;res&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groupby&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;loc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vals&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groupby&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;loc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;sns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;regplot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;size&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ppsf&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;vals&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;scatter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;scatter_kws&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;alpha&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mf"&gt;.3&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="c1"&gt;# If we want to turn off the scatterplot&lt;/span&gt;
&lt;span class="n"&gt;scats&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;isct&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;isct&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;collections&lt;/span&gt;
         &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isct&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mpl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;collections&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PathCollection&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;span class="c1"&gt;# plt.setp(scats, visible=False)&lt;/span&gt;

&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;legend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;locs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_xlim&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4000&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_ylim&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;div class="output text_plain highlight-myst-ansi notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(0, 10)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;img alt="../_images/ce26cdc8e672e6541681fa573298a6834f6aabde081ac9fd799ae57a44f864f2.png" src="../_images/ce26cdc8e672e6541681fa573298a6834f6aabde081ac9fd799ae57a44f864f2.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Basically, lines that go down more steeply mean you get a better deal the bigger the place is.&lt;/p&gt;
&lt;p&gt;For instance, if you’re in the southbay you might be paying $6/sqf for a 600 sq. ft. place, but $1/sqf for a 2000 sq. ft. place. On the other hand, San Francisco is pretty consistent, with a relatively flat line. This means that you’ll be paying pretty much the same per square foot regardless of how big your place is. In fact, all of the other regions seem to follow the same trend - so if you’re looking for more efficient big-place finds, go with the South Bay.&lt;/p&gt;
&lt;p&gt;Also note that this gives us information about the uncertainty in these estimates. The error bars are so wide for San Francisco because we don’t have many data points at high values (because there aren’t that many places &amp;gt;2000 square feet in SF). It’s anyone’s guess as to what this would cost.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="text-analysis"&gt;
&lt;h1&gt;Text analysis&lt;/h1&gt;
&lt;p&gt;Finally, we can also learn a bit from the text in the post titles. We could probably get better information by using the post text itself, but this would require some extra legwork looking up the URL of each entry and pulling the body of text from this. We’ll stick with titles for now.&lt;/p&gt;
&lt;p&gt;To do this, we’ll use some text analysis tools in &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;scikit-learn&lt;/span&gt;&lt;/code&gt;. This is good enough for our purposes, though if we wanted to do something fancier we could use something like &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;gensim&lt;/span&gt;&lt;/code&gt;, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;word2vec&lt;/span&gt;&lt;/code&gt;, or &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;nltk&lt;/span&gt;&lt;/code&gt;. (we’d also probably need a lot more data).&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sklearn.feature_extraction.text&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;CountVectorizer&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sklearn.preprocessing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;LabelEncoder&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sklearn.svm&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;LinearSVC&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sklearn.cross_validation&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;StratifiedShuffleSplit&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sklearn.feature_extraction.stop_words&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ENGLISH_STOP_WORDS&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;string&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;First we’ll do some quick data cleaning - we’ll only keep datapoints with a title, and then define some characters to remove so that the definition of “a word” makes more sense.&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;word_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dropna&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="c1"&gt;# Remove special characters&lt;/span&gt;
&lt;span class="n"&gt;rem&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;digits&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/\-+.&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;rem_chars&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;rem&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;word_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;word_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rem_chars&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Next, we’ll remove words that are too specific (from a geographical standpoint) to the regions we’re using. Otherwise you’ll just get a bunch of clusters with streetnames etc. predicting the Bay Area region.&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;loc_words&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;eby&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;antioch&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;berkeley&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;dublin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;fremont&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rockridge&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                     &lt;span class="s1"&gt;&amp;#39;livermore&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;mercer&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ramon&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
             &lt;span class="s1"&gt;&amp;#39;nby&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sausalito&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;marin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;larkspur&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;novato&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;petaluma&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bennett&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                     &lt;span class="s1"&gt;&amp;#39;tiburon&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;sonoma&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;anselmo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;healdsburg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rafael&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
             &lt;span class="s1"&gt;&amp;#39;sby&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;campbell&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;clara&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;cupertino&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;jose&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
             &lt;span class="s1"&gt;&amp;#39;scz&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;aptos&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;capitola&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;cruz&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;felton&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;scotts&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                     &lt;span class="s1"&gt;&amp;#39;seabright&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;soquel&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;westside&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ucsc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
             &lt;span class="s1"&gt;&amp;#39;sfc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;miraloma&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;soma&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;usf&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ashbury&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;marina&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                     &lt;span class="s1"&gt;&amp;#39;mission&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;noe&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;

&lt;span class="c1"&gt;# We can append these to sklearn&amp;#39;s collection of english &amp;quot;stop&amp;quot; words&lt;/span&gt;
&lt;span class="n"&gt;rand_words&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;th&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;xs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bd&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ok&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bdr&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;stop_words&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;loc_words&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;rand_words&lt;/span&gt;
&lt;span class="n"&gt;stop_words&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ENGLISH_STOP_WORDS&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;union&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stop_words&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Finally, we will vectorize this data so that it can be used with sklearn algorithms. This takes a list of “bags” of words, and turns it into a list of vectors, where the length of each vector is the total number of words we’ve got. Each position of the vector corresponds to 1 word. It will be “1” if that word is present in the current item, and 0 otherwise:&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;vec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CountVectorizer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_df&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;.6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stop_words&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;stop_words&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;vec_tar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LabelEncoder&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;counts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;vec&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fit_transform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;targets&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;vec_tar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fit_transform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;loc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;counts&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toarray&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ylim&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Each row is a post, with 1s representing presence of a word in that post&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;img alt="../_images/81529da67e81566128f9abd50c8b958841e2749ddfc3b599c25ed8eaa17d1e2d.png" src="../_images/81529da67e81566128f9abd50c8b958841e2749ddfc3b599c25ed8eaa17d1e2d.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Let’s do a quick description of the most common words in each region. We can use our vectorized vocabulary and see which words were most common.&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;top_words&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;itrg&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unique&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;targets&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;loc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;vec_tar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;classes_&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;itrg&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="c1"&gt;# Pull only the data points assigned to the current loction&lt;/span&gt;
    &lt;span class="n"&gt;icounts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;counts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;targets&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;itrg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;:]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;squeeze&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    
    &lt;span class="c1"&gt;# Which counts had at least five occurrences&lt;/span&gt;
    &lt;span class="n"&gt;msk_top_words&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;icounts&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
    
    &lt;span class="c1"&gt;# The inverse transform turns the vectors back into actual words&lt;/span&gt;
    &lt;span class="n"&gt;top_words&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;vec&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inverse_transform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msk_top_words&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Then, we’ll print the words that are unique to each area by filtering out ones that are common across locations:&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;unique_words&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;top_words&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iteritems&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;others&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;top_words&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;others&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;unique_words&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;wrd&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;wrd&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;top_words&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                         &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;wrd&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hstack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;others&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;())]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;unique_words&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iteritems&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;{0}&lt;/span&gt;&lt;span class="s1"&gt;: &lt;/span&gt;&lt;span class="si"&gt;{1}&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s1"&gt;---&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Apparently people in the North Bay like appliances, people in Santa Cruz like the beach, people in the East Bay need the Bart, and people in San Francisco have victorians…who knew.&lt;/p&gt;
&lt;p&gt;Just for fun we’ll also do a quick classification algorithm to see if some machine learning can find structure in these words that separates one location from another:&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;mod&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;LinearSVC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;.1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;cv&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;StratifiedShuffleSplit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;targets&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n_iter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;test_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;.2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;coefs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;tr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tt&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;cv&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;mod&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;counts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;tr&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;targets&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;tr&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;coefs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mod&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;coef_&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mod&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;score&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;counts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;tt&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;targets&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;tt&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;span class="n"&gt;coefs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;coefs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Doesn’t look like it (those are horrible generalization scores), but we’ll look at what coefficients it considered important anyway:&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;icoef&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vec_tar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;classes_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;coefs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;cut&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;percentile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;icoef&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;99&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;important&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;icoef&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;cut&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;{0}&lt;/span&gt;&lt;span class="s1"&gt;: &lt;/span&gt;&lt;span class="si"&gt;{1}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vec&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inverse_transform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;important&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;You may note that these are quite similar to the words that were unique to each location as noted above - such is the power of machine learning :)&lt;/p&gt;
&lt;section id="so-what-have-we-learned"&gt;
&lt;h2&gt;So what have we learned?&lt;/h2&gt;
&lt;p&gt;Well, you might say that we’ve merely quantified what everybody already knows: San Francisco is expensive, really expensive. If you’re looking for a place in the Bay Area, you can expect to shell out a lot more for the same square footage.&lt;/p&gt;
&lt;p&gt;However, what’s also interesting is that apartments in the Bay Area don’t seem to obey the same rules that other regions do - they don’t necessarily become more economically efficient as the place gets bigger. This is in stark contrast to the south bay, where places are pretty expensive in general, but in ways that you’d expect for an apartment.&lt;/p&gt;
&lt;p&gt;Finally, there are probably lots of other cool things that you could do with these datasets, especially if you wanted to break things down by neighborhood and collect more data.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://chrisholdgraf.com/blog/2015/2015-09-27-craigslist_data_analysis/" rel="alternate"/>
    <summary>In the last post I showed how to use a simple python bot to scrape data from Criagslist. This is a quick follow-up to take a peek at the data.Note - data that you scrape from Craigslist is pretty limited. They tend to clear out old posts, and you can only scrape from recent posts anyway to avoid them blocking you.</summary>
    <category term="dataanalysis" label="data analysis"/>
    <category term="python" label="python"/>
    <category term="scraping" label="scraping"/>
    <category term="visualization" label="visualization"/>
    <published>2015-09-27T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://chrisholdgraf.com/blog/2015/2015-10-29-nih_grant_analysis/</id>
    <title>NIH grant analysis</title>
    <updated>2015-10-29T00:00:00+00:00</updated>
    <content type="html">&lt;section id="nih-fellowship-success-rates"&gt;

&lt;p&gt;As I’m entering the final years of graduate school, I’ve been applying for a few typical “pre-doc” fellowships. One of these is the NRSA, which is notorious for requiring you to wade through forests of beaurocratic documents (seriously, their “guidelines” for writing an NRSA are over 100 pages!). Doing so ends up taking a LOT of time.&lt;/p&gt;
&lt;p&gt;This got me wondering what kind of success rates these grants have in the first place. For those who haven’t gone through the process before, it’s a bit opaque:&lt;/p&gt;
&lt;section id="how-the-nrsa-works"&gt;
&lt;h2&gt;How the NRSA works&lt;/h2&gt;
&lt;p&gt;Basically, each NRSA grant is reviewed by a panel of people. They individually review your proposal (which is upwards of 20 pages), and assign it a score in one of several categories. The group then meets, and they give your proposal an “impact score”. This score is then compared with the distribution of scores for all the other proposals in your category, and then a cutoff is made based on the percentiles that they will fund.&lt;/p&gt;
&lt;p&gt;Each year, they change the cutoff, and thus the number of NRSAs, that will be funded. Importantly, this also differs significantly by the NIH branch that oversees your application. Some have much higher success rates than others. For those who are curious, I’m putting a list of the NIH acronyms and their respective centers at the end.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="some-data"&gt;
&lt;h2&gt;Some data!&lt;/h2&gt;
&lt;p&gt;I did a bit of digging and found a dataset for NRSA success rates over the last few years. It’s broken down by grant type, as well as by NIH branch. The results are interesting so I thought I’d put them out there.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; - this dataset and a few others can be found on the NIH website &lt;a class="reference external" href="https://report.nih.gov/funding/nih-budget-and-spending-data-past-fiscal-years/success-rates"&gt;here&lt;/a&gt;. I encourage you to check it out! Thank god for open data (even if it’s really hard to find).&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# First we&amp;#39;ll import a few helpful tools for cleaning and plotting&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;matplotlib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;pyplot&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;seaborn&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;sns&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="k"&gt;matplotlib&lt;/span&gt; inline
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Load the data - note that each row is a grant type/year/agency&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_excel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;./data/nih_nrsa_success_rates.xls&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;convert_objects&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;convert_numeric&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;div class="output text_html"&gt;&lt;div&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;Fiscal Year&lt;/th&gt;
      &lt;th&gt;Activity Code&lt;/th&gt;
      &lt;th&gt;NIH Institute/Center&lt;/th&gt;
      &lt;th&gt;Number of Applications Reviewed&lt;/th&gt;
      &lt;th&gt;Number of Applications Awarded&lt;/th&gt;
      &lt;th&gt;Success Rate2&lt;/th&gt;
      &lt;th&gt;Total Funding3&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;2005&lt;/td&gt;
      &lt;td&gt;F05&lt;/td&gt;
      &lt;td&gt;NCCAM&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;0.285714&lt;/td&gt;
      &lt;td&gt;123572&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;2005&lt;/td&gt;
      &lt;td&gt;F05&lt;/td&gt;
      &lt;td&gt;NINDS&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;0.750000&lt;/td&gt;
      &lt;td&gt;163368&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;2005&lt;/td&gt;
      &lt;td&gt;F05&lt;/td&gt;
      &lt;td&gt;Total&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;0.454545&lt;/td&gt;
      &lt;td&gt;286940&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;2005&lt;/td&gt;
      &lt;td&gt;F30&lt;/td&gt;
      &lt;td&gt;NIDA&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;0.545455&lt;/td&gt;
      &lt;td&gt;189408&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;2005&lt;/td&gt;
      &lt;td&gt;F30&lt;/td&gt;
      &lt;td&gt;NIDCD&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;0.285714&lt;/td&gt;
      &lt;td&gt;53713&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;First, we’ll do some cleaning to remove annoying things like special characters and spaces. We’ll focus on the “success rate2” variable, which describes the % of proposals that were funded that year.&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Make the columns easier to play with&lt;/span&gt;
&lt;span class="n"&gt;col_mapping&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;_&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;\
               &lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;\
               &lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;col&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rename&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;col_mapping&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Remove missing values for success rate&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dropna&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;success_rate2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                           &lt;span class="s1"&gt;&amp;#39;fiscal_year&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                           &lt;span class="s1"&gt;&amp;#39;nih_institute_center&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="c1"&gt;# Remove all non-word characters from names&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;nih_institute_center&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;nih_institute_center&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;\
    &lt;span class="n"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;[^a-zA-Z]&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;# Remove center values that aren&amp;#39;t as useful&lt;/span&gt;
&lt;span class="n"&gt;remove_centers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Total&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ODOther&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;nih_institute_center not in @remove_centers&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;First, let’s take a look at some general trends over time&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;axs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplots&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;figsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;combined&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groupby&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fiscal_year&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;coltypes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;number_of_applications_reviewed&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;number_of_applications_awarded&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;total_funding3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;coltype&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;axs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;coltypes&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;combined&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;coltype&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;coltype&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fontsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tight_layout&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;img alt="../_images/79fa811b8d2df68810245ec8db5e6e39714f6bc2c49d1091ce36afa1dea96e28.png" src="../_images/79fa811b8d2df68810245ec8db5e6e39714f6bc2c49d1091ce36afa1dea96e28.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Eyeballing it, it looks like applications have been slightly increasing per year, while applications awarded have remained relatively flat. Let’s dig into that a little bit more. Rather than looking at the raw numbers, we’ll focus on the success rate, or the % of applications that were funded.&lt;/p&gt;
&lt;p&gt;We’ll plot the success rates per year, per activity code. I’ll plot a scatter + line for each NIH institute (in color) as well as the mean + a 3rd order polynomial fit for all of them lumped together (in black)&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;grant&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gvals&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groupby&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;activity_code&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;gvals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;mn_grp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gvals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groupby&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fiscal_year&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;lm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lmplot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fiscal_year&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;success_rate2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;gvals&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;hue&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;nih_institute_center&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ci&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                        &lt;span class="n"&gt;line_kws&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;alpha&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;.5&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;scatter_kws&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;alpha&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;.5&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
                        &lt;span class="n"&gt;legend&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ax&lt;/span&gt;
        &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;figure&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_size_inches&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# If we have enough data, fit a fancier function to all points&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;gvals&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;mn_reg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;regplot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="s1"&gt;&amp;#39;fiscal_year&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;success_rate2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;gvals&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;scatter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;line_kws&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;linewidth&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;k&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="n"&gt;order&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Grant Activity Code: &lt;/span&gt;&lt;span class="si"&gt;{0}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;grant&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;fontsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ylim&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mn_reg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;collections&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;k&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;alpha&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;.1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;legend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;right&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bbox_to_anchor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;.5&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
          &lt;span class="n"&gt;ncol&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fancybox&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;shadow&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;frameon&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fontsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tight_layout&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;img alt="../_images/a600e0ef50f561e17f0555afd170a8cdded883becd14501fa8144526a903f5ef.png" src="../_images/a600e0ef50f561e17f0555afd170a8cdded883becd14501fa8144526a903f5ef.png" /&gt;
&lt;img alt="../_images/a9d9bc5c58ff7b27bf5995cd77d9b632fbe69d8d3bb9a88ca65cd0d9a9c177b6.png" src="../_images/a9d9bc5c58ff7b27bf5995cd77d9b632fbe69d8d3bb9a88ca65cd0d9a9c177b6.png" /&gt;
&lt;img alt="../_images/cdf4a2dfef10dd2935382f54c30f08f0291b1a407a6950e8843d0144726fbc2c.png" src="../_images/cdf4a2dfef10dd2935382f54c30f08f0291b1a407a6950e8843d0144726fbc2c.png" /&gt;
&lt;img alt="../_images/9f834a0e724c525da8cbbebf38e872e546488743b8f4994ddf9aa24505b777c1.png" src="../_images/9f834a0e724c525da8cbbebf38e872e546488743b8f4994ddf9aa24505b777c1.png" /&gt;
&lt;img alt="../_images/2854afa23e661229a60bc8bc0a86fe3e97dc16ef448273590b80365dc7031bc6.png" src="../_images/2854afa23e661229a60bc8bc0a86fe3e97dc16ef448273590b80365dc7031bc6.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;As you can see - some of these data aren’t well-modeled by a line in the first place. That’s because there’s a lot of missing data in here. However, especially for the more common grants (F31, F32) you can see some interesting (and mostly downward) trends.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="digging-in-to-specific-grants"&gt;
&lt;h1&gt;Digging in to specific grants&lt;/h1&gt;
&lt;p&gt;Next, we’ll take a look at some more specific information about a select grant type. I’ll focus on the F31 and F32 because that’s most related to what I’m applying for.&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Pull the subset of data we want&lt;/span&gt;
&lt;span class="n"&gt;grant_type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;F31&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;F32&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;subset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;activity_code in @grant_type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Average out the grant type column&lt;/span&gt;
&lt;span class="n"&gt;subset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subset&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groupby&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fiscal_year&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;nih_institute_center&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reset_index&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;We’ll plot the successrate (y-axis) as a function of year (color) for each NIH center (x-axis).&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;variable_types&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;success_rate2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;number_of_applications_reviewed&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;n_yrs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subset&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fiscal_year&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unique&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="n"&gt;pal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;color_palette&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;RdBu_r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n_colors&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;n_yrs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;variable_types&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplots&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;figsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;sns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;barplot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;nih_institute_center&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;subset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hue&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fiscal_year&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;palette&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;pal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_xticklabels&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;rotation&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fontsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_yticklabels&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;fontsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;legend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;right&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bbox_to_anchor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;.5&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
          &lt;span class="n"&gt;ncol&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fancybox&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;shadow&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;frameon&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fontsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fontsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;img alt="../_images/85ae3ca07e43c4d6e7065452439bd93ccb042231c5ac8d5f1eb8a5392a7a1ea5.png" src="../_images/85ae3ca07e43c4d6e7065452439bd93ccb042231c5ac8d5f1eb8a5392a7a1ea5.png" /&gt;
&lt;img alt="../_images/408bdc4feaa9f046066b67b2b454a0548df3db2dde54574031701781b3276405.png" src="../_images/408bdc4feaa9f046066b67b2b454a0548df3db2dde54574031701781b3276405.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Is there anything that we can learn from this? Let’s look at how the finding changed for each year:&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;yearly_change&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subset&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_index&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;nih_institute_center&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;fiscal_year&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;success_rate2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;\
    &lt;span class="n"&gt;unstack&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;nih_institute_center&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;sns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_palette&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;color_palette&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;rainbow&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;yearly_change&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;yearly_change&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;figsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;legend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;upper center&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bbox_to_anchor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.05&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
          &lt;span class="n"&gt;ncol&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fancybox&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;shadow&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;frameon&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;img alt="../_images/bab5d94029b8ae2df9e4a2de632dcae33e14f820fa939d1e5f9c5a8ed651aaae.png" src="../_images/bab5d94029b8ae2df9e4a2de632dcae33e14f820fa939d1e5f9c5a8ed651aaae.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;To make things more comparable, we can normalize each timeseries by its first value, this will give everything the same starting point. We’ll also smooth the curves a little bit to get an idea for general trends. We’ll apply an exponentially-weighted moving average so recent points factor more into the average&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Normalize data and apply a bit of smoothing&lt;/span&gt;
&lt;span class="n"&gt;yearly_change_norm&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;yearly_change&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;yearly_change&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iloc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;yearly_change_norm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stats&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;moments&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ewma&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;span&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;\
    &lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;figsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;legend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;upper center&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bbox_to_anchor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.05&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
          &lt;span class="n"&gt;ncol&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fancybox&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;shadow&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;frameon&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;img alt="../_images/59baa5fa6801a3ebcf7b7cefe2ac336ea82354d0b7f624e8fc0f3ad87969f563.png" src="../_images/59baa5fa6801a3ebcf7b7cefe2ac336ea82354d0b7f624e8fc0f3ad87969f563.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;It seems like some NIH groups have made out better than others. Maybe this simply because the number of total applications each received changed from one year to another.&lt;/p&gt;
&lt;p&gt;As a final analysis, we can look at how the yearly change in applications is correlated with a success rate.&lt;/p&gt;
&lt;p&gt;Positive lines mean that more applications tend to have a higher success rate, negative lines mean more apps have a lower success rate. I’ll also color each point by the fiscal year it came from - hotter colors mean more recent years.&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;grp_cent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subset&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groupby&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;nih_institute_center&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;n_cl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="n"&gt;n_rw&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ceil&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;grp_cent&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n_cl&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;astype&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;axs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplots&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n_rw&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n_cl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;figsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;n_cl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;n_rw&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vals&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;grp_cent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;axs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ravel&lt;/span&gt;&lt;span class="p"&gt;()):&lt;/span&gt;
    &lt;span class="n"&gt;yr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;vals&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fiscal_year&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
    &lt;span class="n"&gt;corr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;corrcoef&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;vals&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;number_of_applications_reviewed&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;success_rate2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;lc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;where&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;corr&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;g&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;sns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;regplot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;number_of_applications_reviewed&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;success_rate2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;vals&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;scatter_kws&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;s&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;yr&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;yr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;cmap&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RdBu_r&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
                &lt;span class="n"&gt;line_kws&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;lc&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;ci&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ylim&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;.8&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="c1"&gt;#     sns.corrplot(vals.set_index([&amp;#39;fiscal_year&amp;#39;]), cbar=False, ax=ax)&lt;/span&gt;
    &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fontsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;annotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Corr: &lt;/span&gt;&lt;span class="si"&gt;{0: .02f}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;corr&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;.9&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="n"&gt;xycoords&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;axes fraction&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fontsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tight_layout&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setp&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_xticklabels&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_yticklabels&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
              &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;axs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ravel&lt;/span&gt;&lt;span class="p"&gt;()],&lt;/span&gt; &lt;span class="n"&gt;fontsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setp&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xaxis&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yaxis&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;fontsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;img alt="../_images/77999b0240b768ee21da9254480d6f53fcc5ff791db0b0bfaf7572dec72d92ee.png" src="../_images/77999b0240b768ee21da9254480d6f53fcc5ff791db0b0bfaf7572dec72d92ee.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;So what did we learn from any of this? Well, it seems like the funding landscape at the NIH is changing, and some groups are making out better than others.&lt;/p&gt;
&lt;p&gt;There are power players who’ve been around for a while, like the NINDS, who haven’t seen a huge change in their granting behavior. Other groups, such as NIAAA, have seen their success rates decline steadily w/ increased applications. On the other hand, there are some centers that have actually shown both an increase in applications AND an increase in success rates (such as the NHGRI), which may reflect increased interest in those research endeavors from congress etc.&lt;/p&gt;
&lt;p&gt;There’s a lot more to be read into this data, so I encourage people to check it out for themselves, or suggest things to try out on top of what’s already here. It’s been fun learning a bit about the landscape of grants at the NIH.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="appendix"&gt;
&lt;h1&gt;Appendix&lt;/h1&gt;
&lt;section id="nih-acronym-lookup"&gt;
&lt;h2&gt;NIH acronym lookup&lt;/h2&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;nih_institute_center&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unique&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;nih_centers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;NCCAM&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;National Center for Complementary and Alternative Medicine&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;NINDS&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;National Institute on Neurological Disorders and Stroke&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;NIDA&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;National Institute on Drug Abuse&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;NIDCD&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;National Institute on Deafness and Other Communication Disorders&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;NIDCR&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;National Institute of Dental and Craniofacial Research&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;NIEHS&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;National Institute of Environmental Health Sciences&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;NIMH&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="s1"&gt;&amp;#39;National Institute of Mental Health&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;NIAAA&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;National Institute on Alcohol Abuse and Alcoholism&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;NIA&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;National Institute on Aging&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;NIAID&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;National Institute of Allergy and Infectious Diseases&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;NIAMS&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;National Institute of Arthritis and Musculoskeletal and Skin Diseases&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;NCI&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;National Cancer Institute&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;NIDDK&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;National Institute of Diabetes and Digestive and Kidney Diseases&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;NIBIB&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;National Institute of Biomedical Imaging and Bioengineering&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;NEI&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;National Eye Institute&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;NIGMS&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;National Institute of General Medical Sciences&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;NICHD&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;National Institute of Child Health and Human Development&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;NHGRI&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;National Human Genome Research Institute&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;NHLBI&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;National Heart, Lung, and Bloog Institute&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;NINR&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;National Institute of Nursing Research&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;NCRR&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;National Center for Research Resources&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="sa"&gt;u&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;NLM&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;National Library of Medicine&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;ac&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cent&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;nih_centers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iteritems&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;{0}&lt;/span&gt;&lt;span class="s1"&gt;:&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="si"&gt;{1}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ac&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cent&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://chrisholdgraf.com/blog/2015/2015-10-29-nih_grant_analysis/" rel="alternate"/>
    <summary>As I’m entering the final years of graduate school, I’ve been applying for a few typical “pre-doc” fellowships. One of these is the NRSA, which is notorious for requiring you to wade through forests of beaurocratic documents (seriously, their “guidelines” for writing an NRSA are over 100 pages!). Doing so ends up taking a LOT of time.This got me wondering what kind of success rates these grants have in the first place. For those who haven’t gone through the process before, it’s a bit opaque:</summary>
    <category term="grants" label="grants"/>
    <category term="python" label="python"/>
    <category term="statistics" label="statistics"/>
    <category term="visualization" label="visualization"/>
    <published>2015-10-29T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://chrisholdgraf.com/blog/2016/2016-07-02-fft_time/</id>
    <title>The beauty of computational efficiency</title>
    <updated>2016-07-02T00:00:00+00:00</updated>
    <content type="html">&lt;section id="the-beauty-of-computational-efficiency-and-the-fft"&gt;

&lt;p&gt;When we discuss “computational efficiency”, you often hear people throw around phrases like $O(n^2)$ or $O(nlogn)$. We talk about them in the abstract, and it can be hard to appreciate what these distinctions mean and how important they are. So let’s take a quick look at what computational efficiency looks like in the context of a very famous algorithm: The Fourier Transform.&lt;/p&gt;
&lt;section id="a-short-primer-on-the-fourier-transform"&gt;
&lt;h2&gt;A short primer on the Fourier Transform&lt;/h2&gt;
&lt;p&gt;Briefly, A Fourier Transform is used for uncovering the spectral information that is present in a signal. AKA, it tells us about oscillatory components in the signal, and has &lt;a class="reference external" href="http://dsp.stackexchange.com/questions/69/why-is-the-fourier-transform-so-important"&gt;a wide range&lt;/a&gt; of uses in communications, signal processing, and even neuroscience analysis.&lt;/p&gt;
&lt;p&gt;Here’s a &lt;a class="reference external" href="https://www.quora.com/What-is-an-intuitive-way-of-explaining-how-the-Fourier-transform-works"&gt;Quora post&lt;/a&gt; that discusses Fourier Transforms more generally. The first explanation is fantastic and full of history and detail.&lt;/p&gt;
&lt;p&gt;The challenge with the Fourier Transform is that it can take a really long time to compute. If you h ave a signal of length $n$, then you’re calculating $n$ Fourier components for each point in the (length $n$) signal. This means that the number of operations required to calculate a fourier transform is $n * n$ or $O(n^2)$.&lt;/p&gt;
&lt;p&gt;For a quick intuition into what a difference this makes. Consider two signals, one of length 10, and the other of length 100. Since the Fourier Transform is $O(n^2)$, the length 100 signal will take &lt;em&gt;2 orders of magnitude&lt;/em&gt; longer to compute, even though it is only &lt;em&gt;1 order of magnitude longer in length&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Think this isn’t a big deal? Let’s see what happens when the signal gets longer. First off, a very short signal:&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# We can use the `time` and the `numpy` module to time how long it takes to do an FFT&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;seaborn&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;sns&lt;/span&gt;
&lt;span class="n"&gt;sns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_style&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;white&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# For a signal of length ~1000. Say, 100ms of a 10KHz audio sample.&lt;/span&gt;
&lt;span class="n"&gt;signal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1009&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fft&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fft&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;stop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;It takes &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s1"&gt; seconds to do the FFT&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stop&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;That’s not too bad - ~.003 seconds is pretty fast. But here’s where the $O(n^2)$ thing really gets us…&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# We&amp;#39;ll test out how long the FFT takes for a few lengths&lt;/span&gt;
&lt;span class="n"&gt;test_primes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;101&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1009&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10009&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100019&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Let&amp;#39;s try a few slightly longer signals&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i_length&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;test_primes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# Calculate the number of factors for this length (we&amp;#39;ll see why later)&lt;/span&gt;
    &lt;span class="n"&gt;factors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ii&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;ii&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i_length&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;ii&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="c1"&gt;# Generate a random signal w/ this length&lt;/span&gt;
    &lt;span class="n"&gt;signal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i_length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# Now time the FFT&lt;/span&gt;
    &lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fft&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fft&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;signal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;stop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;With data of length &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s1"&gt; (&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s1"&gt; factors), it takes &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s1"&gt; seconds to do the FFT&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;i_length&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;factors&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;stop&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Whoah wait a sec, that last one took way longer than everything else. We increased the length of the data by a factor of 10, but the time it took went up by a factor of 100. Not good. That means that if we want to perform an FFT on a signal that was 10 times longer, it’d take us about 42 minutes. 100 times longer? That’d take &lt;em&gt;~3 days.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Given how important the Fourier Transform is, it’d be great if we could speed it up somehow.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;&lt;em&gt;You’ll notice that I chose a very particular set of numbers above. Specifically, I chose numbers that were primes (or nearly primes) meaning that they couldn’t be broken down into products of smaller numbers. That turns out to be really important in allowing the FFT to do its magic. When your signal length is a prime number, then you don’t gain any speedup from the FFT, as I’ll show below.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;/section&gt;
&lt;section id="enter-the-fast-fourier-transform"&gt;
&lt;h2&gt;Enter the Fast Fourier Transform&lt;/h2&gt;
&lt;p&gt;The Fast Fourier Transform (FFT) is one of the most important algorithms to come out of the last century because it drastically speeds up the performance of the Fourier Transform. It accomplishes this by breaking down all those $n^2$ computations into a smaller number of computations, and then putting them together at the end to get the same result. This is called &lt;strong&gt;factorizing&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;You can think of factorizing like trying to move a bunch of groceries from your car to your fridge. Say you have 20 items in your car. One way to do this is to individually take each item, pull it from the car, walk to the house, place it in the fridge. It’d take you 20 trips to do this. Factorizing is like putting your 20 items into 2 grocery bags. Now you only need to make 2 trips to the house - one for each grocery bag. The first approach requires 20 trips to the house, and the second requires 2 trips. You’ve just reduced the number of trips by an order of magnitude!&lt;/p&gt;
&lt;p&gt;The FFT accomplishes its factorization by recognizing that signals of a certain length can be broken down (factorized) into smaller signals. How many smaller signals? Well, that depends on the length of the original signal. If a number has many &lt;em&gt;factors&lt;/em&gt;, it means that it can be broken down into a product of many different, smaller, signals.&lt;/p&gt;
&lt;p&gt;In practice, this means that if the input to an FFT has a lot of factors, then you gain a bigger speedup from the FFT algorithm. On one end, a signal with a length == a power of two will have a ton of factors, and yield the greatest speedups. A signal with length == a prime number will be the slowest because it has no factors. Below is a quick simulation to see how much of a difference this makes.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;Here are some useful links explaining Fourier Transforms, as well as the FFT:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.quora.com/What-is-an-intuitive-explanation-of-the-FFT-algorithm"&gt;A Quora post&lt;/a&gt; with some great answers on the intuition behind the Fast Fourier Transform.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Fast_Fourier_transform"&gt;The wikipedia entry&lt;/a&gt; for FFTs also has some nice links.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://jakevdp.github.io/blog/2013/08/28/understanding-the-fft/"&gt;A post on the FFT&lt;/a&gt; from Jake Vanderplas is also a great explanation of how it works.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sklearn&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;linear_model&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;matplotlib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;pyplot&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;
&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="k"&gt;matplotlib&lt;/span&gt; inline
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="the-beautiful-efficiency-of-the-fft"&gt;
&lt;h2&gt;The beautiful efficiency of the FFT&lt;/h2&gt;
&lt;p&gt;To see what the FFT’s efficiency looks like, we’ll simulate data of different lengths and see how long it takes to compute the FFT at each length. We’ll create a random vector of gaussian noise ranging from length 1 to 10,000. For each vector, we’ll compute the FFT, and time how long it took to compute. I’ve already taken the liberty of doing this (repeated 3 times, and then averaged together). Those times are stored in fft_times.csv.&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Let&amp;#39;s read in the data and see how it looks&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;../data/fft_times.csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index_col&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;apply&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_numeric&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_frame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;time&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;astype&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;length&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# First off, it&amp;#39;s clear that computation time grows nonlinearly with signal length&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;length&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;time&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;figsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;img alt="../_images/ed0a1e43a49f42359fb675ae8d07a7d38ee4f06e23b873fb9b0fb2a2bfdc9d86.png" src="../_images/ed0a1e43a49f42359fb675ae8d07a7d38ee4f06e23b873fb9b0fb2a2bfdc9d86.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# However, upon closer inspection, it&amp;#39;s clear that there&amp;#39;s much variability&lt;/span&gt;
&lt;span class="n"&gt;winsize&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;
&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;winsize&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iloc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;time&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;figsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;img alt="../_images/1cb9a307c6d3b18d4082263601ba05b3a354caa7da41016f3d8ef53ef1c5b86b.png" src="../_images/1cb9a307c6d3b18d4082263601ba05b3a354caa7da41016f3d8ef53ef1c5b86b.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;As you can see, there appear to be multiple trends in the data. There seems to be a “most inefficient” line of growth in the data, as well as a “more efficient” and a “most efficient” trend. These correspond to lengths that are particularly good for an FFT.&lt;/p&gt;
&lt;p&gt;We can use regression to find the “linear” relationship between length of signal and time of FFT. However, if there are any trends in the data that are &lt;strong&gt;nonlinear&lt;/strong&gt;, then they should show up as errors in the regression model. Let’s see if that happens…&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# We&amp;#39;ll use a regression model to try and fit how length predicts time&lt;/span&gt;
&lt;span class="n"&gt;mod&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;linear_model&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LinearRegression&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;xfit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;length&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;xfit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vstack&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;xfit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;xfit&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;xfit&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;xfit&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;
&lt;span class="n"&gt;yfit&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;time&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reshape&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Now fit to our data, and calculate the error for each datapoint&lt;/span&gt;
&lt;span class="n"&gt;mod&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xfit&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;yfit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ypred&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mod&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;predict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xfit&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;diff&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;time&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ypred&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# As the length grows, the trends in the data begin to diverge more and more&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;length&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;diff&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kind&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;scatter&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="n"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;alpha&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;figsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_ylim&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;.05&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Error of linear fit for varying signal lengths&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;img alt="../_images/de95705e3c31a310ab4b0b8bd283c58775c6c6e745cf48ec28e8b85c88363051.png" src="../_images/de95705e3c31a310ab4b0b8bd283c58775c6c6e745cf48ec28e8b85c88363051.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;It looks like there are some clear components of the data that &lt;em&gt;don’t&lt;/em&gt; follow a linear relationship. Moreover, this seems to be systematic. We clearly see several separate traces in the error plot, which means that there are patterns in the data that follow different non-linear trends.&lt;/p&gt;
&lt;p&gt;But we already know that the FFT efficiency will differ depending on the number of factors of the signal’s length. Let’s see if that’s related to the plot above…&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# We&amp;#39;ll write a helper function that shows how many (&amp;lt;100) factors each length has&lt;/span&gt;
&lt;span class="n"&gt;find_n_factors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="c1"&gt;# This tells us the number of factors for all lengths we tried&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;n_factors&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;length&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;find_n_factors&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# We now have a column that tells us how many factors each iteration had&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;div class="output text_html"&gt;&lt;div&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;time&lt;/th&gt;
      &lt;th&gt;length&lt;/th&gt;
      &lt;th&gt;ypred&lt;/th&gt;
      &lt;th&gt;diff&lt;/th&gt;
      &lt;th&gt;n_factors&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;9995&lt;/th&gt;
      &lt;td&gt;0.031189&lt;/td&gt;
      &lt;td&gt;9995&lt;/td&gt;
      &lt;td&gt;0.035864&lt;/td&gt;
      &lt;td&gt;-0.004675&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;9996&lt;/th&gt;
      &lt;td&gt;0.000974&lt;/td&gt;
      &lt;td&gt;9996&lt;/td&gt;
      &lt;td&gt;0.035873&lt;/td&gt;
      &lt;td&gt;-0.034899&lt;/td&gt;
      &lt;td&gt;18&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;9997&lt;/th&gt;
      &lt;td&gt;0.012076&lt;/td&gt;
      &lt;td&gt;9997&lt;/td&gt;
      &lt;td&gt;0.035881&lt;/td&gt;
      &lt;td&gt;-0.023805&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;9998&lt;/th&gt;
      &lt;td&gt;0.080163&lt;/td&gt;
      &lt;td&gt;9998&lt;/td&gt;
      &lt;td&gt;0.035889&lt;/td&gt;
      &lt;td&gt;0.044274&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;9999&lt;/th&gt;
      &lt;td&gt;0.002135&lt;/td&gt;
      &lt;td&gt;9999&lt;/td&gt;
      &lt;td&gt;0.035897&lt;/td&gt;
      &lt;td&gt;-0.033763&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Finally, we can plot time to compue the FFT as a function of the number of factors for that signal length.&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# As we can see, the FFT time drops quickly as a function of the number of factors&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;n_factors&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;time&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;figsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;alpha&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;.1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_xlim&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_ylabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Time for FFT (s)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Time of FFT for varying numbers of factors&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;img alt="../_images/f5aae170755d342ab0cc9dc38e0023a09787353d915c51cfbd19aad61545b2a0.png" src="../_images/f5aae170755d342ab0cc9dc38e0023a09787353d915c51cfbd19aad61545b2a0.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The fewer factors in the length of the signal, the longer the FFT takes.&lt;/p&gt;
&lt;p&gt;Finally, we can show how the length of computation time changes for each group of factors. We’ll plot the signal length along with the time to compute the FFT, this time colored by the number of factors for each point.&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# We&amp;#39;ll plot two zoom levels to see the detail&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;axs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplots&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;figsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;vmin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vmax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;axs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;length&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;time&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;n_factors&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lw&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cmap&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_cmap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;RdYlBu&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vmax&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                                           &lt;span class="n"&gt;figsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;vmin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;vmin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vmax&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;vmax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;alpha&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_xlabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Length of signal (samples)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_ylabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Time to complete FFT (s)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Time to compute the FFT, colored by n_factors&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;axs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;xlim&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;length&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;()])&lt;/span&gt;
&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;axs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;ylim&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;.2&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;axs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;ylim&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;.005&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tight_layout&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;img alt="../_images/c1b0117c0a6c6196e7ce3c909e55b9aea061e73a7780e1dd1f0519cab7c63ac4.png" src="../_images/c1b0117c0a6c6196e7ce3c909e55b9aea061e73a7780e1dd1f0519cab7c63ac4.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Each of those colored traces spreading upwards represents a particular strategy that the FFT uses for that number of factors. As you can see, the FFT will take a lot longer (and scales exponentially) with fewer factors (see the red lines). It takes much less time (and scales more linearly) with more factors (see the blue lines).&lt;/p&gt;
&lt;p&gt;And that right there is the beauty of methods like the FFT. They leverage the structure of mathematics to take a computation that goes on for days, and figure out how to do it in seconds.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://chrisholdgraf.com/blog/2016/2016-07-02-fft_time/" rel="alternate"/>
    <summary>When we discuss “computational efficiency”, you often hear people throw around phrases like $O(n^2)$ or $O(nlogn)$. We talk about them in the abstract, and it can be hard to appreciate what these distinctions mean and how important they are. So let’s take a quick look at what computational efficiency looks like in the context of a very famous algorithm: The Fourier Transform.Briefly, A Fourier Transform is used for uncovering the spectral information that is present in a signal. AKA, it tells us about oscillatory components in the signal, and has a wide range of uses in communications, signal processing, and even neuroscience analysis.</summary>
    <category term="computation" label="computation"/>
    <category term="efficiency" label="efficiency"/>
    <category term="fft" label="fft"/>
    <category term="programming" label="programming"/>
    <category term="python" label="python"/>
    <published>2016-07-02T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://chrisholdgraf.com/blog/2016/2016-07-08-voting_randomness/</id>
    <title>Could Brexit have happened by chance?</title>
    <updated>2016-07-08T00:00:00+00:00</updated>
    <content type="html">&lt;p&gt;As a scientist, watching the Brexit vote was a little bit painful. Though probably not for the reason you’re thinking. No, it wasn’t the politics that bothered me, but the method for making such an incredibly important decision. Let me explain…&lt;/p&gt;
&lt;p&gt;Scientists are a bit obsessed with the concept of error. In the context of collecting data and anaylzing it, this takes the form of our “confidence” in the results. If all the data say the same thing, then we are usually pretty confident in the overall message. If the data is more complicated than this (and it always is), then we need to define &lt;em&gt;how confident&lt;/em&gt; we are in our conclusions.&lt;/p&gt;
&lt;p&gt;Which brings me to this gigantic nation-wide referendum vote. I couldn’t help but notice that the cutoff for winning / losing the vote was set at 50%. To me, this sounds crazy. If I simply flipped a coin at 50% and tallied the results each time, I’d get some difference between # heads and # tails that would vary around 50%. In the context of voting, it means that a yes/no split that’s really close to 50% might actually be too close to call.&lt;/p&gt;
&lt;p&gt;In science, saying that a number is &lt;em&gt;different&lt;/em&gt; from some other number requires that the difference falls outside of a certain region of uncertainty. It’s a way of saying “yeah, I know that random fluctuations cause strange looking data sometimes, but my difference is &lt;em&gt;so far&lt;/em&gt; from those fluctuations that I think there’s something real going on.”&lt;/p&gt;
&lt;p&gt;But this is all a little abstract, so let’s try it out on some voting data…&lt;/p&gt;
&lt;section id="simulating-a-national-referendum-vote"&gt;

&lt;p&gt;For a referendum vote to go through, it seems reasonable to say “the people need to vote in numbers that are significantly different from random chance. To ask what “random chance” looks like, we can use computer simulations.&lt;/p&gt;
&lt;p&gt;We’ll take on the task of assessing what national votes might look like if they happened completely randomly. Then, we can compare the actual results to our simulation in order to decide if we’ve got a “real” result or not.&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# First, import a bunch of stuff that we&amp;#39;ll use later&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;scipy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;stats&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;plt&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;tqdm&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;tqdm&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;seaborn&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;sns&lt;/span&gt;
&lt;span class="n"&gt;sns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_style&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;white&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="k"&gt;matplotlib&lt;/span&gt; inline
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Initializing the simulation&lt;/span&gt;
&lt;span class="c1"&gt;# We&amp;#39;ll simulate ten thousand votes.&lt;/span&gt;
&lt;span class="c1"&gt;# On each iteration, generate random votes and calculate the results &lt;/span&gt;
&lt;span class="n"&gt;n_votes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10000&lt;/span&gt;

&lt;span class="c1"&gt;# This is the actual difference in percentage points that we had between the sides&lt;/span&gt;
&lt;span class="n"&gt;actual_diff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;51.9&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mf"&gt;48.1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;First, we’ll create a completely random vote. Each person randomly chooses between the two options: &lt;em&gt;yes&lt;/em&gt; and &lt;em&gt;no&lt;/em&gt;. Then, we compare the difference in percentage points between the two.&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Create 10,000 citizens and assign each a random vote&lt;/span&gt;
&lt;span class="n"&gt;total_population&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1e4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;diff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n_votes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;ii&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;tqdm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n_votes&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
    &lt;span class="n"&gt;votes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;total_population&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;yes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;votes&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mf"&gt;.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;total_population&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;no&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;votes&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mf"&gt;.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;total_population&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    
    &lt;span class="c1"&gt;# This is the difference in percentage points&lt;/span&gt;
    &lt;span class="n"&gt;diff&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ii&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;yes&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;no&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;diff&lt;/span&gt;&lt;/code&gt; is a list of numbers representing the lead that “yes” has over “no”.  Remember, we’ve randomly chosen these values, so they are the results you’d get if every single person in the country voted completely randomly.&lt;/p&gt;
&lt;p&gt;How can we summarize the “limits of uncertainty” that &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;diff&lt;/span&gt;&lt;/code&gt; defines? We can use percentiles to get an idea for the variability of this number. We’ll take the 1st and the 99th percentile of our simulated differences as a proxy for the limits of what we’d expect if there were &lt;em&gt;no&lt;/em&gt; true opinion in the population&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Here we calculate 98% confidence interval on the difference&lt;/span&gt;
&lt;span class="n"&gt;clo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;chi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;percentile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;diff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;99&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now, we’ll make a plot with 3 things:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;The distribution of all our simulated differences&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A vertical black line for each limit of the confidence interval.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A vertical red line representing the actual difference between yes/no that was reported&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Let&amp;#39;s look at the distribution of differences when voting is *totally* random&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplots&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;figsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;diff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bins&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;axvline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;actual_diff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;--&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;axfill&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fill_between&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;clo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;chi&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_ylim&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;alpha&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;k&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Distribution of totally random splits&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fontsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;legend&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;axfill&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Actual Difference&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Confidence Interval&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;fontsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;xlim&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;img alt="../_images/96ad4c6ce6c84e6e538dcda8722efc5916cc48c7b115a2f25ed8fa9271b9d924.png" src="../_images/96ad4c6ce6c84e6e538dcda8722efc5916cc48c7b115a2f25ed8fa9271b9d924.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;For a vote to be “different” than 50%, it’d need to be outside our margin of error described by the grey rectangle. In this case, it seems that a totally random vote yields about 2% points of spread around 0, and that the recorded vote difference (~4%) is outside of the margin of error for 50%. So maybe we can conclude that the Brexit vote was significantly different from a random 50/50 vote.&lt;/p&gt;
&lt;p&gt;BUT - we also know that people don’t vote completely randomly. They are influenced by external factors, they talk to one another, they tend to vote similarly to those around them. This is why everybody could predict which districts would vote “yes” and which would vote “no” well before the election.&lt;/p&gt;
&lt;p&gt;So, let’s build that in to our simulation…&lt;/p&gt;
&lt;/section&gt;
&lt;section id="simulating-a-not-completely-random-population"&gt;
&lt;h1&gt;Simulating a not-completely-random population&lt;/h1&gt;
&lt;p&gt;So how exactly do we simulate the fact that people don’t vote &lt;em&gt;totally&lt;/em&gt; randomly? There are a lot of ways to do this, but I’ll take the semi-arbitrary decision to say that we could expect the same pattern of voting to occur &lt;em&gt;within a district&lt;/em&gt;. That is - we can simulate random &lt;em&gt;district&lt;/em&gt; votes instead of random &lt;em&gt;individual&lt;/em&gt; votes. Moreover, we’ll then weight that district’s percentage split by an amount proportional to that district’s size. Intuitively it doesn’t seem like this should make much difference in our simulation (we’re still totally randomly choosing the yes/no split), but let’s see what happens…&lt;/p&gt;
&lt;p&gt;First, I grabbed a list of each UK voting district, along with its size…&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# UK Population data pulled from&lt;/span&gt;
&lt;span class="c1"&gt;# https://en.wikipedia.org/wiki/List_of_English_districts_by_population&lt;/span&gt;
&lt;span class="n"&gt;populations&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;../data/uk_population.csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index_col&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;header&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;District&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Population&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Ceremonial_County&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Historic_County&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;English_Region&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;populations&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;header&lt;/span&gt;

&lt;span class="c1"&gt;# Convert population to numbers&lt;/span&gt;
&lt;span class="n"&gt;populations&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Population&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_numeric&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;populations&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Population&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;# Now, turn these populations into percentages&lt;/span&gt;
&lt;span class="n"&gt;n_areas&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;populations&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;total_population&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;populations&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Population&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;populations&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;percent&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;populations&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Population&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;astype&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;total_population&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;populations&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;percent&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Distribution of (sorted) region sizes within the UK&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fontsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;xlabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;District number&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ylabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Population percentage&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;img alt="../_images/fde831fae21e83ea76bf7bc4326991a67436b3d6e1703cdfe8aec7d4b198f91e.png" src="../_images/fde831fae21e83ea76bf7bc4326991a67436b3d6e1703cdfe8aec7d4b198f91e.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now, we’ll run the simulation. On each iteration, all the districts vote totally randomly. Then, the difference between “yes” and “no” is calculated for each. Finally, these differences are combined in a weighted average, where the weights are proportional to the district sizes. This means that bigger districts have a larger influence on the outcome, mimicking the way that the UK tallies votes.&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;diff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n_votes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;ii&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;tqdm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n_votes&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
    &lt;span class="c1"&gt;# Define a random split yes vs. no for each area&lt;/span&gt;
    &lt;span class="n"&gt;area_splits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n_areas&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;area_splits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vstack&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;area_splits&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;area_splits&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;yes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;no&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;area_splits&lt;/span&gt;
    
    &lt;span class="c1"&gt;# Now, calculate the difference and average these together, weighted by the area size&lt;/span&gt;
    &lt;span class="n"&gt;diffs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;yes&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;no&lt;/span&gt;
    &lt;span class="n"&gt;diffs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;average&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;diffs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;weights&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;populations&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;percent&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;diff&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ii&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;diffs&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Here we calculate 99% confidence interval on the difference&lt;/span&gt;
&lt;span class="n"&gt;clo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;chi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;percentile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;diff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;99.5&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Let&amp;#39;s look at the distribution of differences&lt;/span&gt;
&lt;span class="c1"&gt;# This time, voting is randomized for each region&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplots&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;figsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;diff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bins&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;axvline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;actual_diff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;--&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;axfill&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fill_between&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;clo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;chi&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_ylim&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;alpha&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;k&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Distribution of votes randomized by region&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fontsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;legend&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;axfill&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Actual Difference&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Confidence Interval&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;fontsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;xlim&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;img alt="../_images/7fe7d715f6516cbb8d171a3085b4bbbb87c5bf19acff2488503901655d8b904e.png" src="../_images/7fe7d715f6516cbb8d171a3085b4bbbb87c5bf19acff2488503901655d8b904e.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now we see a different sort of picture. Randomizing votes by district instead of by individual greatly increased the variability in the outcome. So much so that the “true” results from the Brexit now fall well within our confidence interval.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="concluding-thoughts"&gt;
&lt;h1&gt;Concluding thoughts?&lt;/h1&gt;
&lt;p&gt;So what can we conclude from something like this? The point of this article isn’t to say that this particular simulation proves anything about the Brexit vote, but it does bring up an important point: we need to account for randomness whenever we aggregate data that we’ve collected.&lt;/p&gt;
&lt;p&gt;When deciding whether to make a gigantic decision that will affect millions of people, we should be reasonably certain that the people’s opinion is clear. Choosing a 50/50 split as a cutoff means that we could potentially make such a decision because of random chance. Doesn’t sound like a great way to conduct national policy to me.&lt;/p&gt;
&lt;p&gt;What could we do instead? There’s the hard part. But the short answer is that we could include some idea of random variability in our voting rules. For example, we could require that this kind of “should we deviate from the norm” decision exceeds the results expected from a totally random vote. Settling on this uncertainty limit is not a simple task, but then again I wouldn’t want to bet 2 trillion dollars worth of global economy on a coin flip.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="extra-adding-a-short-term-swing"&gt;
&lt;h1&gt;Extra: Adding a short term swing&lt;/h1&gt;
&lt;p&gt;As I mentioned above, deciding how to simulate the votes involves making assumptions about how things will go. I tried to keep the simulation as simple as possible in order to make a point, but you could include extra components as well.&lt;/p&gt;
&lt;p&gt;For example, what if we chose a random subset of districts in the UK and swung their vote several percentage points in one random direction? This might happen if an eye-catching event caused sentiment to momentarily swing in one direction or another. In the long run each district’s sentiment would probably ease back into it’s “natural” split, but since votes happen on one day, these short-term factors can play an important role.&lt;/p&gt;
&lt;p&gt;We can build this into our simulation…&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Here we define a percentage of districts that undergo a sudden swing in voter opinion&lt;/span&gt;
&lt;span class="n"&gt;perc_swing_amt&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;.1&lt;/span&gt;
&lt;span class="n"&gt;perc_swing_districts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;.2&lt;/span&gt;
&lt;span class="n"&gt;n_perc_swing_districts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n_areas&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;perc_swing_districts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Now, re-run the simulation including the random swing.&lt;/span&gt;
&lt;span class="n"&gt;diff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n_votes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;ii&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;tqdm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n_votes&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
    &lt;span class="c1"&gt;# Define a random split yes vs. no for each area&lt;/span&gt;
    &lt;span class="n"&gt;area_splits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n_areas&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    
    &lt;span class="c1"&gt;# Define a random swing across a subset of random districts&lt;/span&gt;
    &lt;span class="n"&gt;swing&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;perc_swing_amt&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;ixs_swing&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n_areas&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;n_perc_swing_districts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;area_splits&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ixs_swing&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;swing&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;area_splits&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ixs_swing&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    
    &lt;span class="c1"&gt;# Now calculate the opposing side amount and average&lt;/span&gt;
    &lt;span class="n"&gt;area_splits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;vstack&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;area_splits&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;area_splits&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;yes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;no&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;area_splits&lt;/span&gt;
    
    &lt;span class="c1"&gt;# Now, calculate the difference and average these together, weighted by the area size&lt;/span&gt;
    &lt;span class="n"&gt;diffs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;yes&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;no&lt;/span&gt;
    &lt;span class="n"&gt;diffs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;average&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;diffs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;weights&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;populations&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;percent&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;diff&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ii&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;diffs&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Here we calculate 99% confidence interval on the difference&lt;/span&gt;
&lt;span class="n"&gt;clo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;chi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;percentile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;diff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;99.5&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Let&amp;#39;s look at the distribution of differences&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplots&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;figsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;diff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bins&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;axvline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;actual_diff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;--&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;axfill&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fill_between&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;clo&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;chi&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_ylim&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;alpha&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;k&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Distribution of votes randomized by region&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fontsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;legend&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;axfill&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Actual Difference&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Confidence Interval&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;fontsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;xlim&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;img alt="../_images/51ad4288f43c44d6ecdfe7b351c9b162eff808a1381082b68789cdb845ff0847.png" src="../_images/51ad4288f43c44d6ecdfe7b351c9b162eff808a1381082b68789cdb845ff0847.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;It looks like now our confidence intervals are even wider than before. This is becase basically any change to our voting system that deviates away from a completely random 50/50 split will increase the variability in the outcome.&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="https://chrisholdgraf.com/blog/2016/2016-07-08-voting_randomness/" rel="alternate"/>
    <summary>As a scientist, watching the Brexit vote was a little bit painful. Though probably not for the reason you’re thinking. No, it wasn’t the politics that bothered me, but the method for making such an incredibly important decision. Let me explain…Scientists are a bit obsessed with the concept of error. In the context of collecting data and anaylzing it, this takes the form of our “confidence” in the results. If all the data say the same thing, then we are usually pretty confident in the overall message. If the data is more complicated than this (and it always is), then we need to define how confident we are in our conclusions.</summary>
    <category term="computation" label="computation"/>
    <category term="fft" label="fft"/>
    <category term="python" label="python"/>
    <category term="statistics" label="statistics"/>
    <category term="voting" label="voting"/>
    <published>2016-07-08T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://chrisholdgraf.com/blog/2016/2016-11-01-5_things_scipy_2016/</id>
    <title>5 things I learned at SciPy</title>
    <updated>2016-11-01T00:00:00+00:00</updated>
    <content type="html">&lt;p&gt;I’ve finally decompressed after my first go-around with Scipy. For those who haven’t heard of this conference before, Scipy is an annual meeting where members of scientific community get together to discuss their love of Python, scientific programming, and open science. It spans both academics and people from industry, making it a unique place in terms of how software interfaces with scientific research. (if you’re interested the full set of Scipy conferences, &lt;a class="reference external" href="http://conference.scipy.org/index.html"&gt;check out here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It was an eye-opening experience that I learned a lot from, so here’s a quick recap of some things that I learned during my first rodeo.&lt;/p&gt;
&lt;section id="scientific-conferences-can-be-fun"&gt;

&lt;p&gt;I know I know, everybody has fun at conferences because they’re kind of like mini-vacations. But this is one of the only conferences I’ve been to where people seemed legitimately excited to be &lt;em&gt;at the conference itself&lt;/em&gt;. Austin is a really cool city, but rooms were packed full of people whether it was morning or evening. Everybody was enthusiastic about one another’s work, and it was a rare feeling of community over competitiveness.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="open-science-feels-great"&gt;
&lt;h1&gt;2. Open science feels great&lt;/h1&gt;
&lt;p&gt;Speaking of competition…you know that feeling when you’re walking around a conference, and you’re kind of terrified that you’ll run into somebody else’s poster that covers the same thing you’re studying? That feeling doesn’t exist at scipy. In fact, discovering that somebody has already done what you were working on is &lt;em&gt;great&lt;/em&gt;. It means that you can start building off of their hard work, instead of laying a bunch of groundwork yourself. That’s how science is supposed to work, and is really refreshing coming from a field (neuroscience) that tends to be very cagey and protective of both its data and analyses. It makes me want to encourage these open and collaborative practices in my own field.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="it-s-actually-cutting-edge"&gt;
&lt;h1&gt;3. It’s actually “cutting edge”&lt;/h1&gt;
&lt;p&gt;In the sense that people talk about things that they’re actively developing &lt;em&gt;right now&lt;/em&gt;. A number of times people gave presentations where they explained that they literally just built in XXX feature thirty minutes before the talk began. When I go to scientific conferences I get the feeling that people are mostly talking about projects that are nearly complete or already submitted. Having a conference that is more about where the field is going, rather than just showcasing what it’s already accomplished, makes for a great experience and focuses on what to do next.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="project-jupyter-is-going-to-take-over-the-world"&gt;
&lt;h1&gt;4. Project Jupyter is going to take over the world&lt;/h1&gt;
&lt;p&gt;What began as a side project (IPython) has clearly evolved into an organization/project that is impressively ambitious and productive. Jupyter unveiled their next iteration, called JupyterLab, that makes their browser-based platform &lt;em&gt;much&lt;/em&gt; more flexible and extensible. I’m excited to see what the community starts to cook up. Jupyter also made its way into a ton of other presentations and projects. For example, Jupyter has been used to &lt;a class="reference external" href="https://www.youtube.com/watch?v=bNq8_nSiQXc&amp;amp;index=11&amp;amp;list=PLYx7XA2nY5Gf37zYZMw6OqGFRPjB1jCy6"&gt;manage a cluster of nodes&lt;/a&gt; for parallel computing, to create &lt;a class="reference external" href="https://www.youtube.com/watch?v=Fc2W930NJs8&amp;amp;index=7&amp;amp;list=PLYx7XA2nY5Gf37zYZMw6OqGFRPjB1jCy6"&gt;one-button reproducible workflows&lt;/a&gt;, and to &lt;a class="reference external" href="https://www.youtube.com/watch?v=tKAmwC8ay8E&amp;amp;index=12&amp;amp;list=PLYx7XA2nY5Gf37zYZMw6OqGFRPjB1jCy6"&gt;diff and merge&lt;/a&gt; notebooks. We also showcased our own use of JupyterHub for &lt;a class="reference external" href="https://www.youtube.com/watch?v=4I3ZFbEF7t0&amp;amp;index=25&amp;amp;list=PLYx7XA2nY5Gf37zYZMw6OqGFRPjB1jCy6"&gt;teaching data science to undergraduates at UC Berkeley&lt;/a&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="there-s-a-lot-of-energy-and-excitement-in-science"&gt;
&lt;h1&gt;5. There’s a lot of energy and excitement in science&lt;/h1&gt;
&lt;p&gt;At least, when people have an outlet to show it. I heard all kinds of people excited to share their analyses, projects, and findings from their scientific work (as opposed to their software development). It didn’t have the obligatory “I’m doing this for the purpose of networking” feel that I’ve gotten from many conferences. Instead, people were looking forward to showing off the cool work that they’d done and get feedback from others.&lt;/p&gt;
&lt;p&gt;At the end of the day, Scipy is less of a conference and more of a celebration of the principles that guide the open source and open science community. It turns out that when you base a field off of openness, collaboration, iteration, and empowerment, you create a very energetic and exciting culture. I really enjoyed my first go-around with the scipy community, and I’m looking forward to what comes next.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="some-quick-extras"&gt;
&lt;h1&gt;Some quick extras&lt;/h1&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Scipy still has a &lt;a class="reference external" href="https://gist.github.com/jiffyclub/c1c75641b50a9370bb144f5623e177c4"&gt;long way to go&lt;/a&gt; when it comes to gender parity at Scipy. And it felt even worse for racial diversity.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;People seem really excited about Dask for parallel computing. Here are &lt;a class="reference external" href="https://www.youtube.com/watch?v=PAGjm4BMKlk&amp;amp;index=15&amp;amp;list=PLYx7XA2nY5Gf37zYZMw6OqGFRPjB1jCy6"&gt;two&lt;/a&gt; &lt;a class="reference external" href="https://www.youtube.com/watch?v=jLQ2wAwapRg&amp;amp;index=43&amp;amp;list=PLYx7XA2nY5Gf37zYZMw6OqGFRPjB1jCy6"&gt;talks&lt;/a&gt; that got a lot of buzz.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Austin is &lt;a class="reference external" href="https://www.wunderground.com/history/airport/KATT/2016/7/20/MonthlyCalendar.html?req_city=Austin&amp;amp;req_state=TX&amp;amp;reqdb.zip=78701&amp;amp;reqdb.magic=1&amp;amp;reqdb.wmo=99999#calendar"&gt;really, really hot&lt;/a&gt; in the summertime. Especially when your AirBnB is a 2 mile walk away.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
</content>
    <link href="https://chrisholdgraf.com/blog/2016/2016-11-01-5_things_scipy_2016/" rel="alternate"/>
    <summary>I’ve finally decompressed after my first go-around with Scipy. For those who haven’t heard of this conference before, Scipy is an annual meeting where members of scientific community get together to discuss their love of Python, scientific programming, and open science. It spans both academics and people from industry, making it a unique place in terms of how software interfaces with scientific research. (if you’re interested the full set of Scipy conferences, check out here.It was an eye-opening experience that I learned a lot from, so here’s a quick recap of some things that I learned during my first rodeo.</summary>
    <category term="conferences" label="conferences"/>
    <category term="openscience" label="open science"/>
    <category term="programming" label="programming"/>
    <category term="python" label="python"/>
    <published>2016-11-01T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://chrisholdgraf.com/blog/2016/2016-11-30-funnel_plots/</id>
    <title>Visualizing publication bias</title>
    <updated>2016-11-30T00:00:00+00:00</updated>
    <content type="html">&lt;p&gt;&lt;strong&gt;This article is now interactive! Check out a live Binder instance &lt;a class="reference external" href="http://mybinder.org/repo/choldgraf/choldgraf.github.io/notebooks/notebooks/2016_11_30-funnel_plots.ipynb"&gt;here&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In the next few months, I’ll try to take some time to talk about the things I learn as I make my way through this literature. While it’s easy to make one-off complaints to one another about how “science is broken” without really diving into the details, it’s important learn about &lt;em&gt;how&lt;/em&gt; it’s broken, or at least how we could assess something like this.&lt;/p&gt;
&lt;p&gt;Fortunately, there are a lot of great researchers out there who are studying these very issues. Whether they dedicate all of their research to these “meta science” topics, or simply treat this as a part of their scientific duty on top of their domain-specific work, their work represents a crucial step in reforming our scientific culture.&lt;/p&gt;
&lt;p&gt;I’m not really dredging up anything new here. People have spoken at length about scientific principles and how to improve them for quite a long time. However, I’ve found that these insights often come buried within relatively dense papers that are themselves hidden behind subscription journal paywalls. This is an attempt to make these thoughts a little more digestible, discoverable, and useful.&lt;/p&gt;
&lt;p&gt;Read on below to learn about why funnel plots are a great way to visualize the problems our publishing system faces…&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Some quick imports we&amp;#39;ll use later&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;scipy.stats&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;distributions&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;matplotlib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;pyplot&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;IPython.html.widgets&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;interact&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;IPython.display&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;
&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="k"&gt;matplotlib&lt;/span&gt; inline
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;section id="on-to-funnel-plots"&gt;

&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;(note, all of the plots are taken from the excellent paper &lt;em&gt;&lt;a class="reference external" href="http://pps.sagepub.com/content/7/6/543.full"&gt;The Rules of the Game of Psychological Science&lt;/a&gt;&lt;/em&gt;, though funnel plots date back at least to the book &lt;em&gt;&lt;a class="reference external" href="http://www.hup.harvard.edu/catalog.php?isbn=9780674854314"&gt;Summing Up&lt;/a&gt;&lt;/em&gt; by Light and Lillemer)&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Before diving into the guts of funnel plots, we first need to talk about experiments and effect sizes.&lt;/p&gt;
&lt;p&gt;The (theoretical) goal of science is to observe and accurately describe various phenomena in nature. One way to do this is to conduct some experimental manipulation (e.g., drinking variable amounts of coffee), and measuring its effect on a dependent variable (e.g., how many minutes I spend cleaning my kitchen). Many scientists conduct similar experiments, and report the effect size they found in their papers (e.g., when Chris drinks 2 cups of coffee, he cleans his kitchen an average of 1 hour longer).&lt;/p&gt;
&lt;p&gt;We can aggregate the reported effect size across many papers in order to determine an even “truer” effect, one that removes experimenter bias and noise. This is similar to how poll aggregators theoretically remove noise by combining the results of many different polls (unless of course &lt;a class="reference external" href="http://fivethirtyeight.com/features/the-polls-missed-trump-we-asked-pollsters-why/"&gt;pollsters are systematically biased&lt;/a&gt;). The result is a number that is closer to reality.&lt;/p&gt;
&lt;p&gt;Or is it?&lt;/p&gt;
&lt;p&gt;One big problem with this is that scientists don’t report all of their findings. They only report the ones they (or the journal publishers) deem “significant”. In practice, this means that the effect has to be non-zero, because nobody wants to hear about null results (even though, you know, that’s the vast majority of science). As a result, publishing is skewed in the direction of positive findings, and those that argue for more skepticism about whether an effect actually exists are often asked to please go back to the bench until they can come back with some sexier results.&lt;/p&gt;
&lt;p&gt;Now, on to funnel plots.&lt;/p&gt;
&lt;p&gt;The result of this whole situation is that the scientific literature probably overestimates effect sizes and their “significance”. How much so? Well, with the advent of digital technologies it has become much easier to aggregate information across scientific studies. This means that we can look for patterns in the reported effect sizes, and determine whether there’s something fishy going on (spoiler alert: there usually is.)&lt;/p&gt;
&lt;p&gt;The funnel plot is one tool for visualizing and determining whether there is a positive skew in the literature for a given scientific finding (e.g., the relationship between coffee and my cleaning habits). Here’s what it looks like:&lt;/p&gt;
&lt;img alt="../_images/funnel_plot_no_dists.png" src="../_images/funnel_plot_no_dists.png" /&gt;
&lt;p&gt;It’s a bit busy, but the underlying ideas here are pretty simple.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;The x-axis is the size of an effect (here it’s correlation but it could be any other statistic). 0 in the middle representing “no effect” and the extremes on either end representing the maximum possible effect for correlation values (in this case).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The right y-axis is the statistical power of the study. That is, the likelihood of concluding that an effect is “significantly” different from 0. As power increases and for a fixed effect size, it becomes more likely that we conclude significance.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This is related to the left y-axis, which is the inverse of the sample size. AKA, smaller samples -&amp;gt; higher standard error -&amp;gt; less power -&amp;gt; smaller y-values. Larger samples -&amp;gt; lower standard error -&amp;gt; more power -&amp;gt; higher y-values.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Finally, the shaded region tells us combinations of effect sizes / sample sizes that would be deemed “significant” (and publishable). If we assume a (two-sided) p-value threshold of .05, the area in white wouldn’t make it into literature, while the area in grey would.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A funnel plot visually shows that as our sample size goes down, our statistical power also goes down. This means that with smaller sample sizes, we need a larger effect in order to conclude that our results are significant (and get them into &lt;em&gt;Nature&lt;/em&gt;). Seems reasonable, so where’s the problem?&lt;/p&gt;
&lt;p&gt;The issue lies in the aforementioned positive effect bias in scientific publishing. Because null effects won’t ever make it into the literature, the effect size we aggregate across papers will only draw from those that fall outside of the white inner region.&lt;/p&gt;
&lt;img alt="../_images/funnel_plot_pub_no_pub.png" src="../_images/funnel_plot_pub_no_pub.png" /&gt;
&lt;p&gt;This is a problem because the whole point of science is to estimate the “true” underlying distribution of an effect, as opposed to merely determining whether it is “different from zero”. So, let’s show the “true” and “reported” distributions at the top and see what happens.&lt;/p&gt;
&lt;img alt="../_images/funnel_plot.png" src="../_images/funnel_plot.png" /&gt;
&lt;p&gt;On the top of the funnel plot we can see the two distributions at play. In green is the “null” distribution, meaning the set of results we’d expect to see if there was really no statistical effect. Now we have more explanation for the white region of non-significance in the middle. As we have smaller sample sizes (lower y-values), the noise increases, and we’d expect more variability under the null distribution. This is why we need a really large effect size to conclude that there’s really something going on.&lt;/p&gt;
&lt;p&gt;Now look at the “alternative” hypothesis in red. This is the “experimental” distribution of this statistic, as determined from the results combined across many studies that estimate this effect. From these results, it looks like it is quite different from the “null” distribution. Hooray, science has found an effect!&lt;/p&gt;
&lt;p&gt;But wait a second, there’s something funny about these results. Notice how the datapoints (the effect sizes in reported studies) seem to follow the boundary between the white and the grey regions? Also note that they don’t look symmetric around the mean of the “experimental” distribution. That’s positive publication bias in action.&lt;/p&gt;
&lt;p&gt;The reason that data points follow the boundary between white / grey isn’t because that’s the “truth”, but because our publishing system and scientific incentives suppress findings that lie in the white region. It doesn’t mean these data points don’t exist, they just lie in the filing cabinets of labs all of the world who aren’t able to publish results that aren’t significant. As a result, we get a skewed idea of what the true effect size is.&lt;/p&gt;
&lt;p&gt;There’s another problem with this plot. As we’ve noted, small sample sizes means that you can only write papers with really large effect sizes. Seems reasonable, but if you can’t report non-significant results, it means that studies with a smaller N are the most likely to throw off our belief about the true effect size.&lt;/p&gt;
&lt;section id="getting-our-hands-dirty-with-some-code"&gt;
&lt;h2&gt;Getting our hands dirty with some code&lt;/h2&gt;
&lt;p&gt;But this is all very theoretical…to show how this works, we’ll investigate funnel plots with a quick simulation to drive the point home.&lt;/p&gt;
&lt;p&gt;We’ll simulate 10,000 studies, each with an N ranging from 2 to 50. We’ll ignore all of the “questionable scientific practices” that the article mentions, and only focus on the problem of not reporting scientific results. Let’s see what happens:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note: you can skip reading the code below if you like, as it just defines some functions that will be useful, but feel free to dig into the code if you like&lt;/strong&gt;&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Helper functions to simulate experiments.&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;simulate_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;effect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;variance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Simulate a population of data. We&amp;#39;ll sample from this in each study.&lt;/span&gt;
&lt;span class="sd"&gt;    Note that we&amp;#39;re drawing from a normal distribution.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;true_variance&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;effect&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;simulate_experiments&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n_min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n_max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prefer_low_n&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                         &lt;span class="n"&gt;n_simulations&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Randomly simulates data collection and analyses of many experiments.&lt;/span&gt;
&lt;span class="sd"&gt;    &lt;/span&gt;
&lt;span class="sd"&gt;    On each iteration, it chooses a random sample from data, calculates the&lt;/span&gt;
&lt;span class="sd"&gt;    mean of that sample, as well as a p-value associated with that mean&amp;#39;s&lt;/span&gt;
&lt;span class="sd"&gt;    difference from 0.&lt;/span&gt;
&lt;span class="sd"&gt;    &lt;/span&gt;
&lt;span class="sd"&gt;    data : the full population dataset&lt;/span&gt;
&lt;span class="sd"&gt;    n_min : the minimum sample size for each study.&lt;/span&gt;
&lt;span class="sd"&gt;    n_max : the maximum sample size for each study.&lt;/span&gt;
&lt;span class="sd"&gt;    prefer_low_n : whether lower sample sizes are preferred.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;effects&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n_simulations&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n_simulations&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n_simulations&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;ii&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n_simulations&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# Take a random sample from the population&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;prefer_low_n&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;n_sample&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n_min&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n_max&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;probabilities&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logspace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n_max&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;n_min&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;probabilities&lt;/span&gt; &lt;span class="o"&gt;/=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;probabilities&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;n_sample&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n_min&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n_max&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                                        &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;probabilities&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;ixs_sample&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random_indices&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ii&lt;/span&gt;&lt;span class="p"&gt;][:&lt;/span&gt;&lt;span class="n"&gt;n_sample&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;i_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ixs_sample&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;effects&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ii&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i_data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ii&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;n_sample&lt;/span&gt;
        &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ii&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;calculate_stat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i_data&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i_data&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;n_sample&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;effects&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;calculate_stat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;h0&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Calculate a p-value using a t-test.&lt;/span&gt;
&lt;span class="sd"&gt;    &lt;/span&gt;
&lt;span class="sd"&gt;    Note that this probably *isn&amp;#39;t* the right test to run with data that&lt;/span&gt;
&lt;span class="sd"&gt;    is bounded on either side (in this case, -1 and 1). However, luckily&lt;/span&gt;
&lt;span class="sd"&gt;    this is not a statistics tutorial so I&amp;#39;m just going to be blissfully&lt;/span&gt;
&lt;span class="sd"&gt;    ignorant of this.&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mean&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;h0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;distributions&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pdf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;plot_funnel_plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;effects&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sample_sizes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                     &lt;span class="n"&gt;effects_reported&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sample_sizes_reported&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                     &lt;span class="n"&gt;p_effects_reported&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Creates a funnel plot using a &amp;#39;full&amp;#39; set of effects, corresponding&lt;/span&gt;
&lt;span class="sd"&gt;    to the effects we&amp;#39;d report if all results were published, regardless of&lt;/span&gt;
&lt;span class="sd"&gt;    their &amp;#39;significance&amp;#39;, as well as a &amp;#39;reported&amp;#39; set of effects which made&lt;/span&gt;
&lt;span class="sd"&gt;    it through peer review&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="c1"&gt;# Create a figure w/ 2 axes&lt;/span&gt;
    &lt;span class="n"&gt;fig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;figure&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;figsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;axdist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplot2grid&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;axmesh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplot2grid&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Calculate relevant stats&lt;/span&gt;
    &lt;span class="n"&gt;mn_full&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;effects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;std_full&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;effects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;mn_pub&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;effects_reported&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;std_pub&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;effects_reported&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    
    &lt;span class="n"&gt;mn_diff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mn_full&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;mn_pub&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;std_diff&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;std_full&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;std_pub&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    
    &lt;span class="c1"&gt;# First axis is a histogram of the distribution for true/experimental effects&lt;/span&gt;
    &lt;span class="n"&gt;bins&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;.1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;axdist&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;effects&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;k&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;histtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;stepfilled&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;normed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bins&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;bins&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;axdist&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hlines&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;4.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mn_full&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;std_full&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mn_full&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;std_full&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                      &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lw&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;axdist&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hist&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;effects_reported&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;histtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;step&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lw&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="n"&gt;normed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bins&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;bins&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;axdist&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hlines&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;4.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mn_pub&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;std_pub&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mn_pub&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;std_pub&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                      &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lw&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;axdist&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_ylim&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;axdist&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Distribution of effects&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;Error in mean: &lt;/span&gt;&lt;span class="si"&gt;{:.3f}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;
                     &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;Error in std: &lt;/span&gt;&lt;span class="si"&gt;{:.3f}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mn_diff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;std_diff&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;axdist&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_axis_off&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;# Now make the funnel plot&lt;/span&gt;
    &lt;span class="n"&gt;sig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pvals&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mf"&gt;.05&lt;/span&gt;
    &lt;span class="n"&gt;mesh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;axmesh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contour&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;combinations&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;combinations&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;sig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cmap&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Greys&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                          &lt;span class="n"&gt;vmin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vmax&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rasterized&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    
    &lt;span class="n"&gt;inv_p_effects&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;p_effects_reported&lt;/span&gt;
    &lt;span class="n"&gt;axmesh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;effects&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sample_sizes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                   &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;k&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;alpha&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;.1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;axmesh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;effects_reported&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sample_sizes_reported&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                   &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;inv_p_effects&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                   &lt;span class="n"&gt;vmin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;.95&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vmax&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;1.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cmap&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;viridis&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;axmesh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tight&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;axmesh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_xlabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Effect Size&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;axmesh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_ylabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Sample Size (or statisical power)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;axdist&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;xlim&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;axmesh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_xlim&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fig&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="simulating-the-population"&gt;
&lt;h1&gt;Simulating the population&lt;/h1&gt;
&lt;p&gt;Here we’ll create a population of datapoints corresponding to the effect of each person. Experiments are performed by taking a random sample from that population, and calculating the average effect of the sample. For each experiment we’ll choose a random number for the sample size as well. That means that we’ll get a collection of sample sizes, effect sizes, and p-values. One set for each simulated experiment.&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# This is the true value and variance of our variable of interest.&lt;/span&gt;
&lt;span class="c1"&gt;# Remember, it&amp;#39;s bounded between -2 and 2&lt;/span&gt;
&lt;span class="n"&gt;true_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;.5&lt;/span&gt;
&lt;span class="n"&gt;true_variance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;

&lt;span class="c1"&gt;# This creates the contour to show the &amp;quot;significance edge&amp;quot; of the plot&lt;/span&gt;
&lt;span class="n"&gt;n_simulations&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;
&lt;span class="n"&gt;effect_sizes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;linspace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;.1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;combinations&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;meshgrid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;effect_sizes&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ns&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;pvals&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;calculate_stat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;combinations&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;true_variance&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                       &lt;span class="n"&gt;combinations&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="c1"&gt;# How many simulations will we run, and how large is the full population&lt;/span&gt;
&lt;span class="n"&gt;total_population&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1e5&lt;/span&gt;
&lt;span class="n"&gt;n_min&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n_max&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;

&lt;span class="c1"&gt;# We&amp;#39;ll pre-define these because they take a while&lt;/span&gt;
&lt;span class="n"&gt;population_indices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;total_population&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;astype&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;random_indices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;permutation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;population_indices&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n_simulations&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;

&lt;span class="c1"&gt;# First create our population data&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;simulate_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;true_value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;true_variance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;total_population&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Simulate a bunch of random effects, along w/ sample size and p-value for each&lt;/span&gt;
&lt;span class="n"&gt;effects&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;simulate_experiments&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n_min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;n_min&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n_max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;n_max&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                     &lt;span class="n"&gt;n_simulations&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;n_simulations&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# In this case, the reported and actual effects are the same&lt;/span&gt;
&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plot_funnel_plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;effects&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;effects&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;img alt="../_images/541481ddc18fd244665a1aa9926c1991fb4f3d75b3ef215b477e7b4864ccfc8a.png" src="../_images/541481ddc18fd244665a1aa9926c1991fb4f3d75b3ef215b477e7b4864ccfc8a.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In the funnel plot above, each datapoint corresponds to the effect size found in a single study (x-axis), along with its sample size (y-axis).&lt;/p&gt;
&lt;p&gt;The contour lines show us the “significance cutoffs”.&lt;/p&gt;
&lt;p&gt;The distributions at the top show us the effect size distribution for &lt;em&gt;all&lt;/em&gt; experiments, as well as the distribution for only the &lt;em&gt;reported&lt;/em&gt; experiments. In this case, those distributions are the same because all of our scientific experiments reported their results. We have an accurate idea of the effect size.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="simulate-the-scientific-publishing-world"&gt;
&lt;h1&gt;Simulate the scientific publishing world&lt;/h1&gt;
&lt;p&gt;Now, let’s simulate the scientific publishing process and see what happens. We’ll take a relatively generous take on things, and say that studies with a p-value &amp;gt; .05 still have a small chance of being accepted.&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# This simulates which datapoints we keep and which we throw out&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;simulate_publishing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pvals&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;null_perc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;.01&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pos_p_perc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;super_p_perc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;.9&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Given a collection of p-vals, randomly choose ones to accept for&lt;/span&gt;
&lt;span class="sd"&gt;    publication, with the likelihood of acceptance varying with the size&lt;/span&gt;
&lt;span class="sd"&gt;    of the p-value.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;keep&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zeros_like&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pvals&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;astype&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ip&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pvals&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;flip&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;ip&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mf"&gt;.05&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;this_perc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;null_perc&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;ip&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mf"&gt;.005&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;ip&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mf"&gt;.05&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;this_perc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pos_p_perc&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;this_perc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;super_p_perc&lt;/span&gt;
        &lt;span class="n"&gt;keep&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;flip&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;this_perc&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;keep&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;plot_simulation_results&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p_values&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mask_reported&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;A quick way to viz which papers get accepted and which don&amp;#39;t&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplots&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;sc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p_values&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="n"&gt;p_values&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                      &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;mask_reported&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cmap&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;viridis&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                      &lt;span class="n"&gt;vmin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vmax&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;axhline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;.05&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ls&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;--&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ylabel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;p-value&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;xlabel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;study number&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                 &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Accepted and rejected studies&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;mask_reported&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;simulate_publishing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;null_perc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pos_p_perc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                    &lt;span class="n"&gt;super_p_perc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;.9&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;effects_reported&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;effects&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;mask_reported&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;n_reported&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;mask_reported&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;p_reported&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;mask_reported&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plot_funnel_plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;effects&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;effects_reported&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n_reported&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p_reported&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;img alt="../_images/ad3b081dd1cff353f2d61e0d6f8c8c8bd6f3bbd60218f0e649f19ba8a54129a5.png" src="../_images/ad3b081dd1cff353f2d61e0d6f8c8c8bd6f3bbd60218f0e649f19ba8a54129a5.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;plot_simulation_results&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mask_reported&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;img alt="../_images/5c9824cea919181c9f18a89a6dd27ebb002c1a18d3727eb89bb73a9ef4e79e0e.png" src="../_images/5c9824cea919181c9f18a89a6dd27ebb002c1a18d3727eb89bb73a9ef4e79e0e.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;We can already see that we’ve skewed the distribution of &lt;em&gt;reported&lt;/em&gt; findings (in red) further to the right. This is because it is less likely for experiments inside the contour lines to be reported in the literature, making us think that the effect size is larger than it really is.&lt;/p&gt;
&lt;p&gt;Now, let’s take a more cynical look at scientific publishing by reducing the likelihood that studies are published w/o a “significant” result:&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;mask_reported&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;simulate_publishing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;null_perc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pos_p_perc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;.3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                    &lt;span class="n"&gt;super_p_perc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;.99&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;effects_reported&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;effects&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;mask_reported&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;n_reported&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;mask_reported&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;p_reported&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;mask_reported&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plot_funnel_plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;effects&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;effects_reported&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n_reported&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p_reported&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;img alt="../_images/d165e079bf20e7d3b5a9732689569beea4f692d20b0898d01d8b2e30c80a3767.png" src="../_images/d165e079bf20e7d3b5a9732689569beea4f692d20b0898d01d8b2e30c80a3767.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;It’s skewed even further to the right. As you can see, the harder it is to publish null results, the more overconfident we will be in the significance of what’s in the literature. As you can probably tell, this is especially problematic for effect sizes lie near the boundary between publishable / non-publishable.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="adding-a-low-n-bias"&gt;
&lt;h1&gt;Adding a low-N bias&lt;/h1&gt;
&lt;p&gt;As we mentioned above, there’s one more factor at play that makes things even worse. Smaller studies take less time and less resources to conduct, and in practice there are &lt;em&gt;far&lt;/em&gt; more tiny studies than large, highly-powered ones. Let’s incorporate that into our data simulation and see how that affects things.&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# This simulates data where there is about a 10 times higher chance for a low-n study&lt;/span&gt;
&lt;span class="n"&gt;effects&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;simulate_experiments&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n_min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;n_min&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n_max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;n_max&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                              &lt;span class="n"&gt;prefer_low_n&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  

&lt;span class="n"&gt;mask_reported&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;simulate_publishing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;null_perc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pos_p_perc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;.3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                    &lt;span class="n"&gt;super_p_perc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;.99&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;effects_reported&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;effects&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;mask_reported&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;n_reported&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;mask_reported&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;p_reported&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;mask_reported&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plot_funnel_plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;effects&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;effects_reported&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n_reported&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p_reported&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;img alt="../_images/d3d1e46a74e48bc9b777ace057da9f46f302a09047d150f898f350c3b4279d7f.png" src="../_images/d3d1e46a74e48bc9b777ace057da9f46f302a09047d150f898f350c3b4279d7f.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;It’s even worse. As you can see, both of these factors (studies with a low N, not being able to publish null results) give the scientific community an unrealistic idea of the true effect size. Moreover, we haven’t even incorporated any experimenter-specific biases, such as defining datapoints that nullify an effect as “outliers”, not reporting studies that are significant but in the &lt;em&gt;opposite&lt;/em&gt; direction of what we’d expect, and collecting more data until they achieve a significant p-value. All of these practices would serve to enhance the positive bias seen above.&lt;/p&gt;
&lt;p&gt;In many cases, this might cause us to conclude that there &lt;em&gt;is&lt;/em&gt; an effect, when in reality there is not. Unfortunately, this often has wide-ranging implications for things like policy decisions, and at the least causes scientists to be ineffective and inefficient at asking questions about the world.&lt;/p&gt;
&lt;p&gt;All of this is not to say that science “doesn’t work”, but it’s important to remember that science is about methodology before anything else, and the tools of empiricism and peer review are in constant evolution as we learn more about the pitfalls of our current approach. This is one way to identify these pitfalls, and hopefully in future years the community will adapt in order to avoid them.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="try-it-yourself"&gt;
&lt;h1&gt;Try it yourself!&lt;/h1&gt;
&lt;p&gt;If you’re curious about how all of these factors (effect size, effect variability, sample size, and publishing practices) interact, here’s a quick function to let you play around with each one and determine what the effect would look like in the literature. There are particular circumstances in which these issues are most apparent, and most problematic. See if you can figure out what those circumstances are.&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Create datasets with new effects / variances here&lt;/span&gt;
&lt;span class="n"&gt;effect&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;.5&lt;/span&gt;
&lt;span class="n"&gt;variance&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="n"&gt;n_population&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;1e6&lt;/span&gt;
&lt;span class="n"&gt;n_simulations&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;simulate_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;effect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;variance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n_population&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# We&amp;#39;ll pre-define these because they take a while&lt;/span&gt;
&lt;span class="n"&gt;population_indices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;astype&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;random_indices&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;permutation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;population_indices&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n_simulations&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;

&lt;span class="n"&gt;sample_min&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="n"&gt;sample_max&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
&lt;span class="n"&gt;prefer_low_n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;
&lt;span class="n"&gt;effects&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;simulate_experiments&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n_min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sample_min&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n_max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sample_max&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                     &lt;span class="n"&gt;prefer_low_n&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;prefer_low_n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n_simulations&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;n_simulations&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;plot_simulated_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;null_perc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;.05&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pos_perc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;super_p_perc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;1.&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="sd"&gt;    null_perc = Chance of accepting paper w/ a null result (p&amp;lt;.05)&lt;/span&gt;
&lt;span class="sd"&gt;    pos_perc = Chance of accepting a paper w/ a moderate effect size&lt;/span&gt;
&lt;span class="sd"&gt;    super_p_perc = Chance of accepting a paper w/ a big effect size&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;mask_reported&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;simulate_publishing&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;null_perc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;null_perc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pos_p_perc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;pos_perc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;super_p_perc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;super_p_perc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;effects_reported&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;effects&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;mask_reported&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;n_reported&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;mask_reported&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;p_reported&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;mask_reported&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;plot_funnel_plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;effects&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;effects_reported&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n_reported&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;p_reported&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    
&lt;span class="n"&gt;interact&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;plot_simulated_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="n"&gt;null_perc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;.01&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
         &lt;span class="n"&gt;pos_perc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;.01&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
         &lt;span class="n"&gt;super_p_perc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;.01&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;img alt="../_images/8da922ccfaea3f178314456bdd13f6a69f517c885a348c1b3103e10393810455.png" src="../_images/8da922ccfaea3f178314456bdd13f6a69f517c885a348c1b3103e10393810455.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
</content>
    <link href="https://chrisholdgraf.com/blog/2016/2016-11-30-funnel_plots/" rel="alternate"/>
    <summary>This article is now interactive! Check out a live Binder instance hereIn the next few months, I’ll try to take some time to talk about the things I learn as I make my way through this literature. While it’s easy to make one-off complaints to one another about how “science is broken” without really diving into the details, it’s important learn about how it’s broken, or at least how we could assess something like this.</summary>
    <category term="funnelplots" label="funnel plots"/>
    <category term="openscience" label="open science"/>
    <category term="python" label="python"/>
    <category term="simulations" label="simulations"/>
    <category term="visualizations" label="visualizations"/>
    <published>2016-11-30T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://chrisholdgraf.com/blog/2016/2016-12-19-biorxiv_neuro/</id>
    <title>The bleeding edge of publishing, Scraping publication amounts at biorxiv</title>
    <updated>2016-12-19T00:00:00+00:00</updated>
    <content type="html">&lt;p&gt;Per a recent request somebody posted on Twitter, I thought it’d be fun to write a quick scraper for the &lt;a class="reference external" href="http://biorxiv.org/"&gt;biorxiv&lt;/a&gt;, an excellent new tool for posting pre-prints of articles before they’re locked down with a publisher embargo.&lt;/p&gt;
&lt;p&gt;A big benefit of open science is the ability to use modern technologies (like web scraping) to make new use of data that would originally be unavailable to the public. One simple example of this is information and metadata about published articles. While we’re not going to dive too deeply here, maybe this will serve as inspiration for somebody else interested in scraping the web.&lt;/p&gt;
&lt;p&gt;First we’ll do a few imports. We’ll rely heavily on the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;requests&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;BeautifulSoup&lt;/span&gt;&lt;/code&gt; packages, which together make an excellent one-two punch for doing web scraping. We coud use something like &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;scrapy&lt;/span&gt;&lt;/code&gt;, but that seems a little overkill for this small project.&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;seaborn&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;sns&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bs4&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;bs&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;plt&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;tqdm&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;tqdm&lt;/span&gt;
&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="k"&gt;matplotlib&lt;/span&gt; inline
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;From a quick look at the biorxiv we can see that its search API works in a pretty simple manner. I tried typing in a simple search query and got something like this:&lt;/p&gt;
&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;http://biorxiv.org/search/neuroscience%20numresults%3A100%20sort%3Arelevance-rank&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Here we can see that the term you search for comes just after &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;/search/&lt;/span&gt;&lt;/code&gt;, and parameters for the search, like &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;numresults&lt;/span&gt;&lt;/code&gt;. The keyword/value pairs are separated by a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;%3A&lt;/span&gt;&lt;/code&gt; character, which corresponds to &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;:&lt;/span&gt;&lt;/code&gt; (see &lt;a class="reference external" href="http://www.degraeve.com/reference/urlencoding.php"&gt;this site&lt;/a&gt; for a reference of url encoding characters), and these key/value pairs are separated by &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;%20&lt;/span&gt;&lt;/code&gt;, which corresponds to a space.&lt;/p&gt;
&lt;p&gt;So, let’s do a simple scrape and see what the results look like. We’ll query the biorxiv API to see what kind of structure the result will have.&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;n_results&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;
&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://biorxiv.org/search/neuroscience%20numresults%3A&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;n_results&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;resp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# I&amp;#39;m not going to print this because it messes up the HTML rendering&lt;/span&gt;
&lt;span class="c1"&gt;# But you get the idea...probably better to look in Chrome anyway ;)&lt;/span&gt;
&lt;span class="c1"&gt;# text = bs(resp.text)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;If we search through the result, you may notice that search results are organized into a list (denoted by &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;li&lt;/span&gt;&lt;/code&gt; for each item). Inside each item is information about the article’s title (in a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;div&lt;/span&gt;&lt;/code&gt; of class &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;highwire-cite-title&lt;/span&gt;&lt;/code&gt;) and author information (in a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;div&lt;/span&gt;&lt;/code&gt; of calss &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;highwire-cite-authors&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Let’s use this information to ask three questions:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;How has the rate of publications for a term changed over the years&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Who’s been publishing under that term.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What kinds of things are people publishing?&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For each, we’ll simply use the phrase “neuroscience”, although you could use whatever you like.&lt;/p&gt;
&lt;p&gt;To set up this query, we’ll need to use another part of the biorxiv API, the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;limit_from&lt;/span&gt;&lt;/code&gt; paramter. This lets us constrain the search to a specific month of the year. That way we can see the monthly submissions going back several years.&lt;/p&gt;
&lt;p&gt;We’ll loop through years / months, and pull out the author and title information. We’ll do this with two dataframes, one for authors, one for articles.&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Define the URL and start/stop years&lt;/span&gt;
&lt;span class="n"&gt;stt_year&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2012&lt;/span&gt;
&lt;span class="n"&gt;stp_year&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2016&lt;/span&gt;
&lt;span class="n"&gt;search_term&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;neuroscience&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;url_base&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;http://biorxiv.org/search/&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;search_term&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;url_params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%20li&lt;/span&gt;&lt;span class="s2"&gt;mit_from%3A&lt;/span&gt;&lt;span class="si"&gt;{0}&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="si"&gt;{1}&lt;/span&gt;&lt;span class="s2"&gt;-01&lt;/span&gt;&lt;span class="si"&gt;%20li&lt;/span&gt;&lt;span class="s2"&gt;mit_to%3A&lt;/span&gt;&lt;span class="si"&gt;{0}&lt;/span&gt;&lt;span class="s2"&gt;-&lt;/span&gt;&lt;span class="si"&gt;{2}&lt;/span&gt;&lt;span class="s2"&gt;-01%20numresults%3A100&lt;/span&gt;&lt;span class="si"&gt;%20f&lt;/span&gt;&lt;span class="s2"&gt;ormat_result%3Astandard&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;url_base&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;url_params&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Now we&amp;#39;ll do the scraping...&lt;/span&gt;
&lt;span class="n"&gt;all_articles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="n"&gt;all_authors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;yr&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;tqdm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stt_year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stp_year&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;mn&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# Populate the fields with our current query and post it&lt;/span&gt;
        &lt;span class="n"&gt;this_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;yr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mn&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
        &lt;span class="n"&gt;resp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;this_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;bs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;resp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        
        &lt;span class="c1"&gt;# Collect the articles in the result in a list&lt;/span&gt;
        &lt;span class="n"&gt;articles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;li&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;class&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;search-result&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;article&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;articles&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c1"&gt;# Pull the title, if it&amp;#39;s empty then skip it&lt;/span&gt;
            &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;span&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;class&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;highwire-cite-title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;continue&lt;/span&gt;
            &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            
            &lt;span class="c1"&gt;# Collect year / month / title information&lt;/span&gt;
            &lt;span class="n"&gt;all_articles&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;yr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
            
            &lt;span class="c1"&gt;# Now collect author information&lt;/span&gt;
            &lt;span class="n"&gt;authors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;span&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;class&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;highwire-citation-author&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;authors&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;all_authors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# We&amp;#39;ll collect these into DataFrames for subsequent use&lt;/span&gt;
&lt;span class="n"&gt;authors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;all_authors&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;articles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;all_articles&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;year&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;month&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;To make things easier to cross-reference, we’ll add an &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;id&lt;/span&gt;&lt;/code&gt; column that’s unique for each title. This way we can more simply join the dataframes to do cool things:&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Define a dictionary of title: ID mappings&lt;/span&gt;
&lt;span class="n"&gt;unique_ids&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ii&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;ii&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;articles&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unique&lt;/span&gt;&lt;span class="p"&gt;())}&lt;/span&gt;
&lt;span class="n"&gt;articles&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;unique_ids&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;articles&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;span class="n"&gt;authors&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;unique_ids&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;authors&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now, we can easily join these two dataframes together if we so wish:&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;articles&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;authors&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;div class="output text_html"&gt;&lt;div&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;year&lt;/th&gt;
      &lt;th&gt;month&lt;/th&gt;
      &lt;th&gt;title&lt;/th&gt;
      &lt;th&gt;id&lt;/th&gt;
      &lt;th&gt;name&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;2013&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
      &lt;td&gt;Simultaneous optogenetic manipulation and calc...&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;Frederick B. Shipley&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;2013&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
      &lt;td&gt;Simultaneous optogenetic manipulation and calc...&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;Christopher M. Clark&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;2013&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
      &lt;td&gt;Simultaneous optogenetic manipulation and calc...&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;Mark J. Alkema&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;2013&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
      &lt;td&gt;Simultaneous optogenetic manipulation and calc...&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;Andrew M. Leifer&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;2013&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
      &lt;td&gt;Functional connectivity networks with and with...&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;Satoru Hayasaka&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;section id="question-1-how-has-the-published-articles-rate-changed"&gt;

&lt;p&gt;This one is pretty easy to ask. Since we have both year / month data about each article, we can plot the number or articles for each group of time. To do this, let’s first turn these numbers into an actual “datetime” object. This let’s us do some clever plotting magic with pandas&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Add a &amp;quot;date&amp;quot; column&lt;/span&gt;
&lt;span class="n"&gt;dates&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;yr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mn&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
         &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;yr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mn&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;articles&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;year&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;month&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;articles&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dates&lt;/span&gt;

&lt;span class="c1"&gt;# Now drop the year / month columns because they&amp;#39;re redundant&lt;/span&gt;
&lt;span class="n"&gt;articles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;articles&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drop&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;year&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;month&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now, we can simply group by month, sum the number of results, and plot this over time:&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;monthly&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;articles&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groupby&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_frame&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;monthly&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Articles published per month for term&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;search_term&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;img alt="../_images/c7eb5eb4f433ce9fab991de4b5266f3cc5715e1bb8c81c5726792d23cc2d64a4.png" src="../_images/c7eb5eb4f433ce9fab991de4b5266f3cc5715e1bb8c81c5726792d23cc2d64a4.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;We can also plot the cumulative number of papers published:&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;cumulative&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cumsum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;monthly&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;monthly&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cumulative&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cumulative&lt;/span&gt;

&lt;span class="c1"&gt;# Now plot cumulative totals&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;monthly&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cumulative&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Cumulative number of papers matching term &lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;search_term&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_ylabel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Number of Papers&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;img alt="../_images/93f8cb812633a87fcd2391a6eb6f47b97e26fc770007f10bcfed93ddfa25d171.png" src="../_images/93f8cb812633a87fcd2391a6eb6f47b97e26fc770007f10bcfed93ddfa25d171.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="question-2-which-author-uses-pre-prints-the-most"&gt;
&lt;h1&gt;Question 2: Which author uses pre-prints the most?&lt;/h1&gt;
&lt;p&gt;For this one, we can use the “authors” dataframe. We’ll group by author name, and count the number of publications per author:&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Group by author and count the number of items&lt;/span&gt;
&lt;span class="n"&gt;author_counts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;authors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groupby&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_frame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;count&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# We&amp;#39;ll take the top 30 authors&lt;/span&gt;
&lt;span class="n"&gt;author_counts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;author_counts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort_values&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;count&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ascending&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;author_counts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;author_counts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iloc&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reset_index&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;We’ll use some &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pandas&lt;/span&gt;&lt;/code&gt; magical gugu to get this one done. Who is the greatest pre-print neuroscientist of them all?&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# So we can plot w/ pretty colors&lt;/span&gt;
&lt;span class="n"&gt;cmap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;viridis&lt;/span&gt;
&lt;span class="n"&gt;colors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cmap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;author_counts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;count&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;author_counts&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;count&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;()))&lt;/span&gt;

&lt;span class="c1"&gt;# Make the plot&lt;/span&gt;
&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplots&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;figsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;author_counts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;count&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_xticklabels&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;rotation&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;45&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ha&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;right&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;img alt="../_images/87eaa363bd04535349a1fdc1386d03e9257ed12b875eea53a981f288e7685982.png" src="../_images/87eaa363bd04535349a1fdc1386d03e9257ed12b875eea53a981f288e7685982.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Rather than saying congratulations to #1 etc here, I’ll just take this space to say that all of these researchers are awesome for helping push scientific publishing technologies into the 21st century ;)&lt;/p&gt;
&lt;/section&gt;
&lt;section id="question-3-what-topics-are-covered-in-the-titles"&gt;
&lt;h1&gt;Question 3: What topics are covered in the titles?&lt;/h1&gt;
&lt;p&gt;For this one we’ll use a super floofy answer, but maybe it’ll give us something pretty. We’ll use the wordcloud module, which implements &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;fit&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;predict&lt;/span&gt;&lt;/code&gt; methods similar to scikit-learn. We can train it on the words in the titles, and then create a pretty word cloud using these words.&lt;/p&gt;
&lt;p&gt;To do this, we’ll use the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;wordcloud&lt;/span&gt;&lt;/code&gt; module along with &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;sklearn&lt;/span&gt;&lt;/code&gt;’s stop words (which are also useful for text analysis, incidentally)&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;wordcloud&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;wc&lt;/span&gt; 
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sklearn.feature_extraction.text&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ENGLISH_STOP_WORDS&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# We&amp;#39;ll collect the titles and turn them into one giant string&lt;/span&gt;
&lt;span class="n"&gt;titles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;articles&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;
&lt;span class="n"&gt;titles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;titles&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Then define stop words to use...we&amp;#39;ll include some &amp;quot;typical&amp;quot; brain words&lt;/span&gt;
&lt;span class="n"&gt;our_stop_words&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ENGLISH_STOP_WORDS&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;brain&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;neural&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now, generating a word cloud is as easy as a call to &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;generate_from_text&lt;/span&gt;&lt;/code&gt;. Then we can output in whatever format we like&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# This function takes a buch of dummy arguments and returns random colors&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;color_func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;font_size&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
               &lt;span class="n"&gt;orientation&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;font_path&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;random_state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;rand&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="mf"&gt;.2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;cols&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rainbow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;)[:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;cols&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cols&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;255&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rgb(&lt;/span&gt;&lt;span class="si"&gt;{:.0f}&lt;/span&gt;&lt;span class="s1"&gt;, &lt;/span&gt;&lt;span class="si"&gt;{:.0f}&lt;/span&gt;&lt;span class="s1"&gt;, &lt;/span&gt;&lt;span class="si"&gt;{:.0f}&lt;/span&gt;&lt;span class="s1"&gt;)&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;cols&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Fit the cloud&lt;/span&gt;
&lt;span class="n"&gt;cloud&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;wc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;WordCloud&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stopwords&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;our_stop_words&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                     &lt;span class="n"&gt;color_func&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;color_func&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;cloud&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;generate_from_text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;titles&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Now make a pretty picture&lt;/span&gt;
&lt;span class="n"&gt;im&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cloud&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_array&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplots&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imshow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;im&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cmap&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;viridis&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_axis_off&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;img alt="../_images/e981a3f15afbf3edafb375e19deb3ffea210bfe982d45919a6f6aa719c5e5f77.png" src="../_images/e981a3f15afbf3edafb375e19deb3ffea210bfe982d45919a6f6aa719c5e5f77.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Looks like those cognitive neuroscience folks are leading the charge towards pre-print servers. Hopefully in the coming years we’ll see increased adoption from the systems and cellular fields as well.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="wrapup"&gt;
&lt;h1&gt;Wrapup&lt;/h1&gt;
&lt;p&gt;Here we played with just a few questions that you can ask with some simple web scraping and the useful tools in python. There’s a lot more that you could do with it, but I’ll leave that up to readers to figure out for themselves :)&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="https://chrisholdgraf.com/blog/2016/2016-12-19-biorxiv_neuro/" rel="alternate"/>
    <summary>Per a recent request somebody posted on Twitter, I thought it’d be fun to write a quick scraper for the biorxiv, an excellent new tool for posting pre-prints of articles before they’re locked down with a publisher embargo.A big benefit of open science is the ability to use modern technologies (like web scraping) to make new use of data that would originally be unavailable to the public. One simple example of this is information and metadata about published articles. While we’re not going to dive too deeply here, maybe this will serve as inspiration for somebody else interested in scraping the web.</summary>
    <category term="openscience" label="open science"/>
    <category term="preprints" label="preprints"/>
    <category term="python" label="python"/>
    <category term="visualizations" label="visualizations"/>
    <category term="webscraping" label="web scraping"/>
    <published>2016-12-19T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://chrisholdgraf.com/blog/2016/2016-12-23-christmas_ecog_plot/</id>
    <title>Brainy Jingle Bells</title>
    <updated>2016-12-23T00:00:00+00:00</updated>
    <content type="html">&lt;p&gt;This is a quick demo of how I created &lt;a class="reference external" href="https://www.youtube.com/watch?v=lZS4uaTBrh8"&gt;this video&lt;/a&gt;. Check it out below, or read on to see the code that made it!&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;IPython.display&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;YouTubeVideo&lt;/span&gt;
&lt;span class="n"&gt;YouTubeVideo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;lZS4uaTBrh8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;div class="output text_html"&gt;
        &lt;iframe
            width="400"
            height="300"
            src="https://www.youtube.com/embed/lZS4uaTBrh8"
            frameborder="0"
            allowfullscreen
        &gt;&lt;/iframe&gt;
        &lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;mne&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;scipy.io.wavfile&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;wav&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;plt&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;moviepy.editor&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;VideoClip&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ImageClip&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;AudioFileClip&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;moviepy.video.io.bindings&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;mplfig_to_npimage&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sklearn.preprocessing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MinMaxScaler&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;colorbabel&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;cb&lt;/span&gt;
&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="k"&gt;matplotlib&lt;/span&gt; inline
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;section id="jingle-bells"&gt;

&lt;p&gt;Here’s a quick viz to show off some brainy holiday spirit.&lt;/p&gt;
&lt;p&gt;We’ll use &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;matplotlib&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;MoviePy&lt;/span&gt;&lt;/code&gt; to read in an audio file and generate a scatterplot that responds to the audio qualities.&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Load the audio clip with MoviePy to save to the movie later&lt;/span&gt;
&lt;span class="n"&gt;path_audio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;../../../../data/jinglebells.wav&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;audio_clip&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AudioFileClip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path_audio&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Now load the sound as an array for manipulation&lt;/span&gt;
&lt;span class="n"&gt;sfreq&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;audio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;wav&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path_audio&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;audio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# This is the amount of time the audio takes up&lt;/span&gt;
&lt;span class="n"&gt;time_audio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sfreq&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Total time: &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time_audio&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;# Now read some brain info for plotting&lt;/span&gt;
&lt;span class="c1"&gt;# NOTE: this is broken, but it&amp;#39;s an old post so I&amp;#39;m going to just pretend it isn&amp;#39;t broken :-)&lt;/span&gt;
&lt;span class="c1"&gt;# melec = pd.read_csv(&amp;#39;../../../../data/brain/meta_elec.csv&amp;#39;)&lt;/span&gt;
&lt;span class="c1"&gt;# im = plt.imread(&amp;#39;../../../../data/brain/brain.png&amp;#39;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;We’ll use the spectral content in the audio to drive activity in the electrodes. Here’s what I’m talking about by spectral content:&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# A pretty spectrogram of audio&lt;/span&gt;
&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplots&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;specgram&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;100000&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;200000&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;Fs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sfreq&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cmap&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;viridis&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;autoscale&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tight&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ylim&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8000&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;div class="output text_plain highlight-myst-ansi notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[(0.0, 8000)]
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;img alt="../_images/fc04ada8e753705ea544b45f06c37703b2d5ca7b129a61a5e0151e0649fa09df.png" src="../_images/fc04ada8e753705ea544b45f06c37703b2d5ca7b129a61a5e0151e0649fa09df.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;We’ll extract this information again below so we can make the viz…&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Resample the audio so that it&amp;#39;s not so long to process&lt;/span&gt;
&lt;span class="n"&gt;sfreq_new&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;11025&lt;/span&gt;
&lt;span class="n"&gt;audio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mne&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sfreq_new&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sfreq&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Now extract a spectrogram of the audio&lt;/span&gt;
&lt;span class="n"&gt;decim&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;
&lt;span class="n"&gt;sfreq_amp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sfreq_new&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;decim&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;freqs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logspace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log10&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log10&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6000&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;spec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mne&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time_frequency&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tfr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_compute_tfr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reshape&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt; &lt;span class="n"&gt;freqs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sfreq&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sfreq_new&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;decim&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;decim&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;spec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;squeeze&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Low-pass filter the spectrogram so it varies more smoothly&lt;/span&gt;
&lt;span class="n"&gt;spec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mne&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sfreq_amp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now, we’ll assign each electrode to a particular point on the y-axis of the spectrogram. We’ll assign based off of the height of each electrode.&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Now bin the y-point of each electrode and assign it to a specotrogram bin&lt;/span&gt;
&lt;span class="n"&gt;y_bins&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;linspace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;melec&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;y_2d&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;melec&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;y_2d&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;freqs&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;binned_elecs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;digitize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;melec&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;y_2d&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_bins&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Scale the amplitude of each frequency band and assign them to electrodes&lt;/span&gt;
&lt;span class="n"&gt;scaler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MinMaxScaler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;feature_range&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.6&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;amplitudes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;spec&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;binned_elecs&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;:]&lt;/span&gt;
&lt;span class="n"&gt;amplitudes_scaled&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scaler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fit_transform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;amplitudes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Scaling etc for the scatterplot&lt;/span&gt;
&lt;span class="n"&gt;amplitudes_sizes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;clip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;amplitudes_scaled&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;.01&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
&lt;span class="n"&gt;amplitudes_sizes&lt;/span&gt; &lt;span class="o"&gt;**=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;amplitudes_sizes&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;  &lt;span class="c1"&gt;# Set to 1 to not change size at all&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Set the sampling frequency for the video so it fills up all the audio time&lt;/span&gt;
&lt;span class="n"&gt;n_frames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;amplitudes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;duration&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time_audio&lt;/span&gt;
&lt;span class="n"&gt;sfreq_video&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;n_frames&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;duration&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sfreq_video&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;div class="output stream highlight-myst-ansi notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;27.5642161205%2525250A
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="making-the-movie"&gt;
&lt;h1&gt;Making the movie&lt;/h1&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Here is our colorbar&lt;/span&gt;
&lt;span class="n"&gt;trans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ColorTranslator&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;red&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;green&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;cmap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;trans&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_diverging&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mid_spread&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;.8&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;cb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ColorTranslator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmap&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show_colors&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;img alt="../_images/64e00086d51f2a152d8802296a8dc474116ed0e0a5853e7162319e6432cd1379.png" src="../_images/64e00086d51f2a152d8802296a8dc474116ed0e0a5853e7162319e6432cd1379.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Here&amp;#39;s an example of what the plot looks like&lt;/span&gt;
&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplots&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;figsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imshow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;im&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_axis_off&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;scat&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;melec&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;x_2d&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;y_2d&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;img alt="../_images/73ab1fe96ea1523aa81a3417e4ad580236c0dfaaa7a0943a1ed460f9c0682596.png" src="../_images/73ab1fe96ea1523aa81a3417e4ad580236c0dfaaa7a0943a1ed460f9c0682596.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# This function maps a time (in seconds) onto an index&lt;/span&gt;
&lt;span class="c1"&gt;# It sets the scatterplot sizes from that index&lt;/span&gt;
&lt;span class="c1"&gt;# Then it returns the image of the figure.&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;animate_scatterplot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;ix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;sfreq_video&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;sizes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;amplitudes_sizes&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt; &lt;span class="n"&gt;ix&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;colors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;amplitudes_scaled&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt; &lt;span class="n"&gt;ix&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;scat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_sizes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sizes&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;scat&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_color&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;mplfig_to_npimage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Now we&amp;#39;ll create our videoclip using this function, and give it audio&lt;/span&gt;
&lt;span class="n"&gt;clip&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;VideoClip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;animate_scatterplot&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;duration&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;duration&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;clip&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;audio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;audio_clip&lt;/span&gt;

&lt;span class="c1"&gt;# Finally, write it to disk&lt;/span&gt;
&lt;span class="n"&gt;clip&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write_videofile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;../data/jinglebells.mp4&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sfreq_video&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;audio&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;div class="output stream highlight-myst-ansi notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;%2525255BMoviePy%2525255D%25252520%25252526gt%25252526gt%25252526gt%25252526gt%25252520Building%25252520video%25252520../data/jinglebells.mp4%2525250A%2525255BMoviePy%2525255D%25252520Writing%25252520audio%25252520in%25252520jinglebellsTEMP_MPY_wvf_snd.mp3%2525250A%2525255BMoviePy%2525255D%25252520Done.%2525250A%2525255BMoviePy%2525255D%25252520Writing%25252520video%25252520../data/jinglebells.mp4%2525250A%2525255BMoviePy%2525255D%25252520Done.%2525250A%2525255BMoviePy%2525255D%25252520%25252526gt%25252526gt%25252526gt%25252526gt%25252520Video%25252520ready%2525253A%25252520../data/jinglebells.mp4%25252520%2525250A%2525250A
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;And now you’ve got a great video!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Credit for the nice brain image goes to the excellent &lt;a class="reference external" href="http://benedicterossi.com/"&gt;Benedicte Rossi&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="https://chrisholdgraf.com/blog/2016/2016-12-23-christmas_ecog_plot/" rel="alternate"/>
    <summary>This is a quick demo of how I created this video. Check it out below, or read on to see the code that made it!Here’s a quick viz to show off some brainy holiday spirit.</summary>
    <category term="brains" label="brains"/>
    <category term="holidays" label="holidays"/>
    <category term="openscience" label="open science"/>
    <category term="python" label="python"/>
    <category term="visualizations" label="visualizations"/>
    <published>2016-12-23T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://chrisholdgraf.com/blog/2017/2017-01-04-matplotlib_cycles/</id>
    <title>Matplotlib Cyclers are Great</title>
    <updated>2017-01-04T00:00:00+00:00</updated>
    <content type="html">&lt;section id="matplotlib-cyclers-are-great"&gt;

&lt;p&gt;Every now and then I come across a nifty feature in Matplotlib that I wish I’d known about earlier. The MPL documentation can be a beast to get through, and as a result you miss some cool stuff sometimes.&lt;/p&gt;
&lt;p&gt;This is a quick demo of one such feature: the &lt;strong&gt;cycler&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Have you ever had to loop through a number of plotting parameters in matplotlib? Say you have two datasets and you’d like to compare them to one another. Maybe something like this:&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;plt&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;mne&lt;/span&gt;
&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="k"&gt;matplotlib&lt;/span&gt; inline

&lt;span class="c1"&gt;# Create fake data&lt;/span&gt;
&lt;span class="n"&gt;data1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;data1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mne&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;data2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;.1&lt;/span&gt;

&lt;span class="c1"&gt;# Plot&lt;/span&gt;
&lt;span class="n"&gt;linewidths&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;colors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;k&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;alphas&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;.3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplots&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lw&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;alpha&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;data1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;linewidths&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;alphas&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;450&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lw&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;lw&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;alpha&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;alpha&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;div class="output stream highlight-myst-ansi notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Setting up low-pass filter at 3 Hz

FIR filter parameters
---------------------
Designing a one-pass, zero-phase, non-causal lowpass filter:
- Windowed time-domain design (firwin) method
- Hamming window with 0.0194 passband ripple and 53 dB stopband attenuation
- Upper passband edge: 3.00 Hz
- Upper transition bandwidth: 2.00 Hz (-6 dB cutoff frequency: 4.00 Hz)
- Filter length: 165 samples (1.650 sec)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;img alt="../_images/1a49d155574ef142621815f0f823c023838373d0fc8e64acf60e29da890dddcb.png" src="../_images/1a49d155574ef142621815f0f823c023838373d0fc8e64acf60e29da890dddcb.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;There’s really a lot of unnecessary code going on above. We’re defining objects that share the same name as the kwarg that they represent. We can’t store them as dictionaries, because then we’d have to do some python-fu in order to get them to iterate properly. This is where &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;cycler&lt;/span&gt;&lt;/code&gt; is handy:&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Plot the same thing, but now it&amp;#39;s more readable and compact&lt;/span&gt;
&lt;span class="n"&gt;cycler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cycler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lw&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;k&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;alpha&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;.3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplots&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i_data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;data1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;cycler&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;450&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;img alt="../_images/1a49d155574ef142621815f0f823c023838373d0fc8e64acf60e29da890dddcb.png" src="../_images/1a49d155574ef142621815f0f823c023838373d0fc8e64acf60e29da890dddcb.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;You can even cycle through more complex properties like colormaps. Let’s create one that cycles through several colormaps for a plot:&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;cyc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cycler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;linspace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                 &lt;span class="n"&gt;cmap&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;viridis&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;magma&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;coolwarm&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                 &lt;span class="n"&gt;alpha&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;.25&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;.75&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                 &lt;span class="n"&gt;lw&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;.5&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="c1"&gt;# You can print the cycler, or use nice jupyter notebook support&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cyc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;cyc&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;div class="output stream highlight-myst-ansi notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(((cycler(&amp;#39;s&amp;#39;, [200.0, 125.0, 50.0]) + cycler(&amp;#39;cmap&amp;#39;, [&amp;#39;viridis&amp;#39;, &amp;#39;magma&amp;#39;, &amp;#39;coolwarm&amp;#39;])) + cycler(&amp;#39;alpha&amp;#39;, [0.25, 0.5, 0.75])) + cycler(&amp;#39;lw&amp;#39;, [0, 0.1, 0.5]))
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="output text_html"&gt;&lt;table&gt;&lt;th&gt;'alpha'&lt;/th&gt;&lt;th&gt;'cmap'&lt;/th&gt;&lt;th&gt;'lw'&lt;/th&gt;&lt;th&gt;'s'&lt;/th&gt;&lt;tr&gt;&lt;td&gt;0.25&lt;/td&gt;&lt;td&gt;'viridis'&lt;/td&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;200.0&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;0.5&lt;/td&gt;&lt;td&gt;'magma'&lt;/td&gt;&lt;td&gt;0.1&lt;/td&gt;&lt;td&gt;125.0&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;0.75&lt;/td&gt;&lt;td&gt;'coolwarm'&lt;/td&gt;&lt;td&gt;0.5&lt;/td&gt;&lt;td&gt;50.0&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplots&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;cyc&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;img alt="../_images/017c74aabd82a1dc000f278004c4231c68c947f38c611be7dd68424bb23a5a5a.png" src="../_images/017c74aabd82a1dc000f278004c4231c68c947f38c611be7dd68424bb23a5a5a.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;So there you have it - cyclers are pretty neat. Give them a shot, and buy a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;matplotlib&lt;/span&gt;&lt;/code&gt; dev a beer next time you see them for making such an awesome and often under-appreciated package!&lt;/p&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="admonition-title"&gt;Tip&lt;/p&gt;
&lt;p&gt;You can check out the MPL cycler page &lt;a class="reference external" href="http://matplotlib.org/cycler/"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/section&gt;
</content>
    <link href="https://chrisholdgraf.com/blog/2017/2017-01-04-matplotlib_cycles/" rel="alternate"/>
    <summary>Every now and then I come across a nifty feature in Matplotlib that I wish I’d known about earlier. The MPL documentation can be a beast to get through, and as a result you miss some cool stuff sometimes.This is a quick demo of one such feature: the cycler.</summary>
    <category term="openscience" label="open science"/>
    <category term="python" label="python"/>
    <category term="visualizations" label="visualizations"/>
    <published>2017-01-04T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://chrisholdgraf.com/blog/2017/2017-03-16-dates_in_python/</id>
    <title>Dates in python</title>
    <updated>2017-03-16T00:00:00+00:00</updated>
    <content type="html">&lt;section id="dates-in-python"&gt;

&lt;p&gt;As a part of setting up the website for the &lt;a class="reference external" href="http://docathon.org"&gt;Docathon&lt;/a&gt; I’ve had to re-learn all of my date string formatting rules. It’s one of those little problems you don’t really think about - turning an arbitrary string into something structured like a date - until you’ve actually got to do it.&lt;/p&gt;
&lt;p&gt;There are a bunch of tools in python for using date-like objects, but it’s not always easy to figure out how these work. This post is just a couple of pieces of information I’ve picked up along the process.&lt;/p&gt;
&lt;section id="useful-links"&gt;
&lt;h2&gt;Useful links&lt;/h2&gt;
&lt;p&gt;Here’s a list of useful links I’ve picked up, which I’ll mention below:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="http://strftime.org/"&gt;strftime.org&lt;/a&gt; for remembering how date string formatting works.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="http://pandas.pydata.org/pandas-docs/stable/timeseries.html"&gt;The pandas datetime docs&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones"&gt;A list of time zone names&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.w3.org/TR/NOTE-datetime"&gt;ISO 8601&lt;/a&gt; format explanation&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="a-quick-tour-of-our-tools"&gt;
&lt;h1&gt;A quick tour of our tools&lt;/h1&gt;
&lt;p&gt;In this post we’ll focus on two main tools for date functionality: the datetime module and pandas.&lt;/p&gt;
&lt;section id="datetime"&gt;
&lt;h2&gt;Datetime&lt;/h2&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="k"&gt;matplotlib&lt;/span&gt; inline
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The datetime module is our core definition of how to represent dates in python. We can call datetime directly with a bunch of integers as input, representing years, months, days, etc:&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2016&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;date&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;div class="output text_plain highlight-myst-ansi notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;datetime.datetime(2016, 3, 3, 12, 12, 12)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;We can access components of this date object as attributes:&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;day&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;div class="output text_plain highlight-myst-ansi notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;3
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;attrs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;year&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;month&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;day&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;ii&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;attrs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;---&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ii&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ii&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;div class="output stream highlight-myst-ansi notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;---

year 2016

---

month 2

---

day 12
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;section id="extra-components-of-datetime-objects"&gt;
&lt;h3&gt;Extra components of datetime objects&lt;/h3&gt;
&lt;p&gt;We can also access specific sub-components of the datetime (that is, either the &lt;strong&gt;date&lt;/strong&gt; or the &lt;strong&gt;time&lt;/strong&gt;)&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;div class="output text_plain highlight-myst-ansi notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;datetime.date(2016, 3, 3)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;div class="output text_plain highlight-myst-ansi notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;datetime.time(12, 12, 12)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Datetime objects also have &lt;strong&gt;timezones&lt;/strong&gt;. You can check whether our object already has a timezone with the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;tzinfo&lt;/span&gt;&lt;/code&gt; attribute:&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tzinfo&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;As we can see, there’s nothing in there because we didn’t specify a timezone when we created this object. We need to add a timezone first.&lt;/p&gt;
&lt;p&gt;However, once you start using timezones it is useful to use a more powerful package like pandas. Let’s do a quick intro:&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="datetimes-in-pandas"&gt;
&lt;h2&gt;Datetimes in pandas&lt;/h2&gt;
&lt;p&gt;Pandas (among many, many other things) adds some extra functionality on top of datetime. The most useful function for this is probably &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;to_datetime&lt;/span&gt;&lt;/code&gt;. This will try to be clever about whatever the input is, which lets us do things like give it strings:&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;2017-03-01&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Class: &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;|&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;div class="output stream highlight-myst-ansi notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Class:  &amp;amp;ltclass &amp;#39;pandas.tslib.Timestamp&amp;#39;&amp;amp;gt | 2017-03-01 00:00:00
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Note that this isn’t the same object as the datetime object, but we can usually treat them similarly. It also exposes several new methods that can do useful things, like changing the timezone of our datetime object:&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tz_localize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;UTC&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;date&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;div class="output text_plain highlight-myst-ansi notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Timestamp(&amp;#39;2017-03-01 00:00:00+0000&amp;#39;, tz=&amp;#39;UTC&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;timezone: &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tzinfo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;div class="output stream highlight-myst-ansi notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;timezone:  UTC
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;We used a time zone called “UTC”. That stands for “Coordinated Universal Time”, which is basically the global standard for the “base” time. All other timezones are expressed in reference to this base time. For example, let’s now convert our time to PST:&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tz_convert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;US/Pacific&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;date&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;div class="output text_plain highlight-myst-ansi notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Timestamp(&amp;#39;2017-02-28 16:00:00-0800&amp;#39;, tz=&amp;#39;US/Pacific&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;timezone: &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tzinfo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;div class="output stream highlight-myst-ansi notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;timezone:  US/Pacific
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Notice how we now see the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;-0800&lt;/span&gt;&lt;/code&gt; at the end. This tells us what kind of offset the ‘US/Pacific’ timezone is from ‘UTC’. It’s expressed as &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;-mmss&lt;/span&gt;&lt;/code&gt;, where &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;m&lt;/span&gt; &lt;span class="pre"&gt;=&lt;/span&gt; &lt;span class="pre"&gt;minute&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;s&lt;/span&gt; &lt;span class="pre"&gt;=&lt;/span&gt; &lt;span class="pre"&gt;second&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;One of the really nice things about pandas is that we can represent &lt;strong&gt;ranges&lt;/strong&gt; in python. Let’s generate a range of dates below:&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# The `freq` parameter tells us the size of the jump between items&lt;/span&gt;
&lt;span class="n"&gt;freq&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;H&amp;#39;&lt;/span&gt;  &lt;span class="c1"&gt;# H == hours, D == days&lt;/span&gt;
&lt;span class="n"&gt;dates&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date_range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;2017-03-01&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;2017-03-05&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;freq&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;freq&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tz&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;UTC&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;dates&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;div class="output text_plain highlight-myst-ansi notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;DatetimeIndex([&amp;#39;2017-03-01 00:00:00+00:00&amp;#39;, &amp;#39;2017-03-01 01:00:00+00:00&amp;#39;,
               &amp;#39;2017-03-01 02:00:00+00:00&amp;#39;, &amp;#39;2017-03-01 03:00:00+00:00&amp;#39;,
               &amp;#39;2017-03-01 04:00:00+00:00&amp;#39;],
              dtype=&amp;#39;datetime64[ns, UTC]&amp;#39;, freq=&amp;#39;H&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This lets us do several things, such as create masks for any data we have:&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;dates&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2017-03-02&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;div class="output text_plain highlight-myst-ansi notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;array([ True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False, False, False,
       False, False, False, False, False, False, False], dtype=bool)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;It also lets us plot things across dates:&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;dates&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date_range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;2017-01-01&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;2017-03-06&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;freq&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;H&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tz&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;UTC&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;sr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Series&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dates&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;dates&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;sr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rolling&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# Give us a 30 hour rolling mean&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;div class="output text_plain highlight-myst-ansi notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;amp;ltmatplotlib.axes._subplots.AxesSubplot at 0x1094c3240&amp;amp;gt
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;img alt="../_images/a289273e2ebdd52dbf8d304957f576e5f6b15464ba4df7b93ad2710fb0cc5013.png" src="../_images/a289273e2ebdd52dbf8d304957f576e5f6b15464ba4df7b93ad2710fb0cc5013.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Note that if we now change the timezone, some of the days have changed because of the time shift:&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Original times&lt;/span&gt;
&lt;span class="n"&gt;dates&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;div class="output text_plain highlight-myst-ansi notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;DatetimeIndex([&amp;#39;2017-01-01 00:00:00+00:00&amp;#39;, &amp;#39;2017-01-01 01:00:00+00:00&amp;#39;,
               &amp;#39;2017-01-01 02:00:00+00:00&amp;#39;, &amp;#39;2017-01-01 03:00:00+00:00&amp;#39;,
               &amp;#39;2017-01-01 04:00:00+00:00&amp;#39;],
              dtype=&amp;#39;datetime64[ns, UTC]&amp;#39;, freq=&amp;#39;H&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# New times&lt;/span&gt;
&lt;span class="n"&gt;dates&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tz_convert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;US/Pacific&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)[:&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;div class="output text_plain highlight-myst-ansi notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;DatetimeIndex([&amp;#39;2016-12-31 16:00:00-08:00&amp;#39;, &amp;#39;2016-12-31 17:00:00-08:00&amp;#39;,
               &amp;#39;2016-12-31 18:00:00-08:00&amp;#39;, &amp;#39;2016-12-31 19:00:00-08:00&amp;#39;,
               &amp;#39;2016-12-31 20:00:00-08:00&amp;#39;],
              dtype=&amp;#39;datetime64[ns, US/Pacific]&amp;#39;, freq=&amp;#39;H&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;For more information about date objects in pandas, check out:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="http://pandas.pydata.org/pandas-docs/stable/timeseries.html"&gt;The pandas datetime docs&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And this is useful for figuring out how to convert between timezones:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones"&gt;A list of time zone names&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="parsing-strings-as-a-date"&gt;
&lt;h1&gt;Parsing strings as a date&lt;/h1&gt;
&lt;section id="iso-8601"&gt;
&lt;h2&gt;ISO 8601&lt;/h2&gt;
&lt;p&gt;So how is pandas doing all of these string auto-conversions? Well, there are a few string structures that are classically defined as date-like structures. For example, the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;yyyy-mm-dd&lt;/span&gt;&lt;/code&gt; string I gave above looks fairly straightforward for a date.&lt;/p&gt;
&lt;p&gt;What if we wanted to do something more complex with strings? For this, we use the &lt;a class="reference external" href="https://www.w3.org/TR/NOTE-datetime"&gt;ISO 8601&lt;/a&gt;. It takes the following form:&lt;/p&gt;
&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;YYYY-MM-DDThh:mm:ss&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Most of these are pretty self-explanatory, but of note is the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Z&lt;/span&gt;&lt;/code&gt; at the end. This simply says that there is zero offset for this datetime, AKA it is “UTC” time.&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;2017-03-01T12:34:02Z&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;date&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;div class="output text_plain highlight-myst-ansi notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Timestamp(&amp;#39;2017-03-01 12:34:02&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;section id="arbitrary-strings"&gt;
&lt;h3&gt;Arbitrary strings&lt;/h3&gt;
&lt;p&gt;We can also tell pandas how to parse an arbitrary date string. For this, we use placeholders representing different components of the date, and then construct a “parsing string” that we give to the function. This tells the function how to turn input strings into datetime objects. For example, let’s say we have this string:&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;date_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;02/2016/12&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This is a little tricky, because it’s unclear which is the month and which is the day. By specifying a date parsing string, we can easily parse this. The placeholders that we use are in the &lt;a class="reference external" href="http://strftime.org/"&gt;strftime&lt;/a&gt; website linked above. Here are some useful ones:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;%Y&lt;/span&gt;&lt;/code&gt; = year&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;%m&lt;/span&gt;&lt;/code&gt; = month&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;%d&lt;/span&gt;&lt;/code&gt; = day&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date_string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;%m/%Y/&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;date&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;div class="output text_plain highlight-myst-ansi notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Timestamp(&amp;#39;2016-02-12 00:00:00&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Above we told pandas to parse the date string as &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;{month}/{year}/{day}&lt;/span&gt;&lt;/code&gt;. We can do this with any string structure we like:&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Create a complicated date string&lt;/span&gt;
&lt;span class="n"&gt;date_string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;02/2016/12 and the time is 11 hr 04 min and 02 sec&amp;#39;&lt;/span&gt;

&lt;span class="c1"&gt;# And tell `to_datetime` how to parse it&lt;/span&gt;
&lt;span class="n"&gt;date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date_string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                      &lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;%m/%Y/&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s1"&gt; and the time is %H hr %M min and %S sec&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;date&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;div class="output text_plain highlight-myst-ansi notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Timestamp(&amp;#39;2016-02-12 11:04:02&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="printing-strings"&gt;
&lt;h3&gt;Printing strings&lt;/h3&gt;
&lt;p&gt;The same principle can be applied to printing strings. Any datetime object has a method called &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;strftime&lt;/span&gt;&lt;/code&gt;. This lets you create a &lt;strong&gt;string&lt;/strong&gt; from &lt;strong&gt;time&lt;/strong&gt;. You can pass a similar date parsing string to what we used above, and it will tell the object what kind of string to create:&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;%Y/%m and &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s1"&gt; days&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;div class="output text_plain highlight-myst-ansi notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;#39;2016/02 and 12 days&amp;#39;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;You can also use this to do some nice formatting, e.g.:&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strftime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;%A, %B &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s1"&gt;, %Y&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;div class="output text_plain highlight-myst-ansi notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;#39;Friday, February 12, 2016&amp;#39;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;You can also pass these parsing strings to the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;format&lt;/span&gt;&lt;/code&gt; method of python strings. For example:&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;mystring&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Today&amp;#39;s date is...{:%A, %B &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s2"&gt;, %Y}&amp;quot;&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mystring&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;div class="output stream highlight-myst-ansi notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Today&amp;#39;s date is...Friday, February 12, 2016
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="and-that-s-it-sort-of"&gt;
&lt;h2&gt;And that’s it…sort of&lt;/h2&gt;
&lt;p&gt;In reality this is the tip of the iceberg when it comes to using datetime objects, but this should be enough to get you started. Make sure that any time you read in new data, you double check whether it is timezone encoded. If it isn’t, then figure out what timezone you can assume (often it is UTC), and encoding it yourself to avoid confusion.&lt;/p&gt;
&lt;p&gt;Datetime objects are incredibly useful, but can be a little confusing, so I hope this helps clear some things up!&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://chrisholdgraf.com/blog/2017/2017-03-16-dates_in_python/" rel="alternate"/>
    <summary>As a part of setting up the website for the Docathon I’ve had to re-learn all of my date string formatting rules. It’s one of those little problems you don’t really think about - turning an arbitrary string into something structured like a date - until you’ve actually got to do it.There are a bunch of tools in python for using date-like objects, but it’s not always easy to figure out how these work. This post is just a couple of pieces of information I’ve picked up along the process.</summary>
    <category term="openscience" label="open science"/>
    <category term="python" label="python"/>
    <published>2017-03-16T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://chrisholdgraf.com/blog/2017/2017-11-02-dates_multiple_plots/</id>
    <title>Combining dates with analysis visualization in python</title>
    <updated>2017-11-02T00:00:00+00:00</updated>
    <content type="html">&lt;section id="combining-dates-with-analysis-visualization-in-python"&gt;

&lt;p&gt;Sometimes you want to do two things:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Plot a timeseries that handles datetimes in a clever way (e.g., with Pandas or Matplotlib)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Plot some kind of analysis on top of that timeseries.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Sounds simple right? It’s not.&lt;/p&gt;
&lt;p&gt;The reason for this is that plotting libraries don’t &lt;em&gt;really&lt;/em&gt; plot human-readable dates, they convert dates to numbers, then change the xtick labels so that they’re human readable. This means that if you want to plot something &lt;em&gt;on top&lt;/em&gt; of dates, it’s quite confusing.&lt;/p&gt;
&lt;p&gt;To demonstrate this, let’s grab the latest stock market prices for a couple companies and
fit regression lines to them…&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;seaborn&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;sns&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;plt&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas_datareader.data&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;web&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ion&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2010&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2017&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;companies&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;AAPL&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;IBM&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;web&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataReader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;companies&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;google&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;prep_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort_index&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;D&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reset_index&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dropna&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;High&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-=&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;High&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplots&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;figsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;company&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;companies&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;this_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;prep_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt; &lt;span class="p"&gt;:,&lt;/span&gt; &lt;span class="n"&gt;company&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;this_data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;High&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;company&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;img alt="../_images/a5e3e8e77eaaf3179af34196eaac86273f44b3b5e7e58b872fbbb3ea52e3d634.png" src="../_images/a5e3e8e77eaaf3179af34196eaac86273f44b3b5e7e58b872fbbb3ea52e3d634.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Let’s say we want to fit a regression line to each stock, should be simple, right?&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplots&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;figsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;company&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;companies&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;this_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;prep_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt; &lt;span class="p"&gt;:,&lt;/span&gt; &lt;span class="n"&gt;company&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;this_data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;High&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;company&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;sns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;regplot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;High&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;this_data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Date &amp;gt; &amp;quot;2017-04-01&amp;quot; and Date &amp;lt; &amp;quot;2017-09-01&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;Exception&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;ee&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;***ERROR: &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="n"&gt;ee&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;***&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;div class="output stream highlight-myst-ansi notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;***ERROR:  reduction operation &amp;#39;mean&amp;#39; not allowed for this dtype ***
***ERROR:  reduction operation &amp;#39;mean&amp;#39; not allowed for this dtype ***
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;img alt="../_images/a5e3e8e77eaaf3179af34196eaac86273f44b3b5e7e58b872fbbb3ea52e3d634.png" src="../_images/a5e3e8e77eaaf3179af34196eaac86273f44b3b5e7e58b872fbbb3ea52e3d634.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;We got an error! That’s because seaborn was treating the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Date&lt;/span&gt;&lt;/code&gt; column as a number, when in fact it was a datetime object.&lt;/p&gt;
&lt;section id="how-do-we-fix-this"&gt;
&lt;h2&gt;How do we fix this?&lt;/h2&gt;
&lt;p&gt;To fix this, we need to convert the datetime labels to their ordinal (numeric) representation. There are a number of ways to convert dates to numbers. Fortunately, Matplotlib has a convenience function to convert datetime objects to their numeric representation.&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.dates&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;date2num&lt;/span&gt;
&lt;span class="n"&gt;date2num&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;this_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;div class="output text_plain highlight-myst-ansi notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;736270.0
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Here&amp;#39;s how we convert the Period object to a date:&lt;/span&gt;
&lt;span class="n"&gt;sample_ordinal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;this_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;date2num&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;sample_ordinal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;div class="output text_plain highlight-myst-ansi notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;0    736270.0
1    736271.0
2    736272.0
5    736275.0
6    736276.0
Name: Date, dtype: float64
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Below we’ll insert this into our plotting code to see what happens.&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplots&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;figsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;ii&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;company&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;companies&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;this_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;prep_data&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt; &lt;span class="p"&gt;:,&lt;/span&gt; &lt;span class="n"&gt;company&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;this_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Date_Ord&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;this_data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;date2num&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;this_data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;High&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;company&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;C&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ii&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;sns&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;regplot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Date_Ord&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;High&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;this_data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Date &amp;gt; &amp;quot;2017-04-01&amp;quot; and Date &amp;lt; &amp;quot;2017-09-01&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                &lt;span class="n"&gt;truncate&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;C&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ii&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;img alt="../_images/cce7cbd45b5c65f378d72af5e2d300e811328122121b5ce3c57f6a75e08c078d.png" src="../_images/cce7cbd45b5c65f378d72af5e2d300e811328122121b5ce3c57f6a75e08c078d.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;And there you have it - mixed datetime visualization across multiple libraries.&lt;/p&gt;
&lt;p&gt;Note that this is &lt;em&gt;not&lt;/em&gt; the same thing as plotting an actual
datetime object, we’re plotting a datetime &lt;em&gt;period&lt;/em&gt; above, which is the only way I’ve figure
out how to make this work.&lt;/p&gt;
&lt;p&gt;Of course, this is all unnecessarily complicated, and hopefully we’ll see some patches
that ease this in the future. But in the meantime you can refer to the above method
for your datetime viz needs.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://chrisholdgraf.com/blog/2017/2017-11-02-dates_multiple_plots/" rel="alternate"/>
    <summary>Sometimes you want to do two things:Plot a timeseries that handles datetimes in a clever way (e.g., with Pandas or Matplotlib)</summary>
    <category term="openscience" label="open science"/>
    <category term="python" label="python"/>
    <published>2017-11-02T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://chrisholdgraf.com/blog/2018/devopsdays-sv-2018/</id>
    <title>An academic scientist goes to DevOps Days</title>
    <updated>2018-05-18T00:00:00+00:00</updated>
    <content type="html">&lt;section id="an-academic-scientist-goes-to-devops-days"&gt;

&lt;p&gt;Last week I took a few days to attend &lt;a class="reference external" href="https://www.devopsdays.org/events/2018-silicon-valley/program/"&gt;DevOpsDays Silicon Valley&lt;/a&gt;. My goal
was to learn a bit about how the DevOps culture works, what are the things
people are excited about and discuss in this community. I’m also interested in
learning a thing or two that could be brought back into the scientific / academic world.
Here are a couple of thoughts from the experience.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;&lt;strong&gt;tl;dr&lt;/strong&gt;: DevOps is more about culture and team process than it is about technology, maybe science should be too…&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;section id="what-is-devops-anyway"&gt;
&lt;h2&gt;What is DevOps anyway?&lt;/h2&gt;
&lt;p&gt;This one is going to be hard to define (&lt;a class="reference external" href="https://theagileadmin.com/what-is-devops/"&gt;though here’s one definition&lt;/a&gt;),
as I’m new to the community as well.
But, my take on this is that DevOps is a coming-together of what was once
a bunch of different roles within companies. The process of releasing technology
(or doing anything really) involves many different steps with different specializations
needed at each step. The ‘old way’ of doing things involved teams that’d build
prototypes, teams that would adapt those prototypes to a company’s infrastructure,
teams that would maintain and service the “production” deployments, etc. The whole
process was quite slow, partially because of the lack of communication between these
very different kinds of groups.&lt;/p&gt;
&lt;p&gt;Instead, DevOps attempts to encapsulate this entire process under one moniker. It is
generally recognized that people do have different skills and roles, but they should
be working &lt;em&gt;together&lt;/em&gt; in a group to create, mature, and ship new code iteratively
and as a single continuous process. DevOps is intently focused on “&lt;a class="reference external" href="https://www.versionone.com/agile-101/"&gt;agile processes&lt;/a&gt;”,
and values being quick and lightweight, focusing on metrics like “time between development
and deployment.” This is only possible with a large focus on team dynamics and
how the relationships between people with different skillsets and responsibilities
should work with one another effectively. Perhaps unsurprisingly, this is the
kind of thing that people talk about &lt;strong&gt;a lot&lt;/strong&gt; at DevOps conferences (well, at least
at the one I went to).&lt;/p&gt;
&lt;/section&gt;
&lt;section id="devopsdays-was-more-about-people-than-tech"&gt;
&lt;h2&gt;DevOpsDays was more about people than tech&lt;/h2&gt;
&lt;p&gt;More than anything else, what struck me was how little emphasis was paid on
the technology itself. There are a billion moving parts in the cloud orchestration
and container technology space, but they got relatively little discussion time at
the conference (with the exception of &lt;a class="reference external" href="https://twitter.com/&amp;#64;jkc137"&gt;Jennelle Crothers&lt;/a&gt;
talking about how Microsoft was trying to make its Windows containers super lightweight,
which was pretty neat). In general the only people consistently talking about
the greatness of XXX new software/tool/etc were salespeople trying to
get you to buy their product. Instead, the vast majority of conversations,
discussions, brainstorms, etc were about &lt;strong&gt;people&lt;/strong&gt; and &lt;strong&gt;process&lt;/strong&gt;, not
technology per-se.&lt;/p&gt;
&lt;p&gt;Obviously, it’s difficult to disentangle the tech from the people when
you’re in the tech industry, but it was illustrative to see the
relative focus that got placed on the “squishier” questions. For example,
a few that came up pretty frequently:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;How can we disseminate information across a distributed team most effectively?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How can we create a team culture that welcomes newcomers?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How can we avoid alienating members of the team?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How can we avoid single points of failure in the team?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How can we do things faster, more efficiently, and more reliably as a team?&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It’s no coincidence that the word “team” was in each of the bullet points above.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="scientific-devops"&gt;
&lt;h2&gt;Scientific DevOps?&lt;/h2&gt;
&lt;p&gt;As a member of the scientific / academic community, this is quite interesting
to me. A whole conference where people talk about creating positive culture and effective
yeams? Yes please. However, I realize that the incentives and
problems associated with DevOps are not the same as those faced by scientists. For
example, a big part of DevOps (and SREs more generally) is ensuring that services,
tools, and sites are reliable and stable over time. You can design tech around this
idea all you want, but at some point you’ll need a team of people to manage that tech.
The DevOps world has seemed to realize that this means the social dynamics of that
team are just as important as the technology itself, which is a breath of fresh
air.&lt;/p&gt;
&lt;p&gt;I wonder what scientific DevOps would look like. Scientists are theoretically also
operating in team-based environments (at least, the ones in scientific labs). The
incentives of reward and recognition are totally misaligned, but it’s still the
case that successful teams produce more effective work in general. Perhaps it’s
worth exploring how the DevOps take on operations and team dynamics ports to
the academic scientific community.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="open-and-relatively-diverse-culture"&gt;
&lt;h2&gt;Open and (relatively) diverse culture&lt;/h2&gt;
&lt;p&gt;A final point that I noticed was that, relative to other tech conferences I’ve
attended, this one had a general air of positivity and open culture. There were
all kinds of people there, and while the general makeup of attendees definitely
still had a lot of white dudes in it, the room nonetheless never felt like it was
&lt;em&gt;dominated&lt;/em&gt; by this group of people. There was also a great culture of supporting
people as they were giving talks - some of the speakers were clearly more nervous
than others, and the audience did a good job of trying to disarm their anxiety.
Perhaps this is the kind of culture that comes with a profession that depends on
(and focuses on) team dynamics and culture.&lt;/p&gt;
&lt;p&gt;Ultimately, as with any good conference, I left having more questions than answers.
How can scientists improve their own team dynamics using principles from the
DevOps community? How can the open-source community do the same but for distributed team
workloads and responsibility? Where is the balance between “solve this with tech” and
“solve this with people”? How can we encourage more cross-talk between the world of
scientific research and the world of tech? Either way, it was an interesting and
informative experience, and I’m looking forward to learning more about this community.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="highlights-and-takeaways"&gt;
&lt;h2&gt;Highlights and takeaways&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Amy Nguyen and Adam Barber shared their strategies for taking a &lt;a class="reference external" href="https://www.devopsdays.org/events/2018-silicon-valley/program/amy-nguyen-adam-barber/"&gt;data-driven approach&lt;/a&gt; to user interface / experience design.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Always collect data&lt;/em&gt; from people you design things for.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Put in the legwork to interview and gather diverse perspectives before you build tools.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fatema Boxwala (&lt;a class="reference external" href="https://twitter.com/&amp;#64;fatty_box"&gt;&amp;#64;fatty_box&lt;/a&gt;) shared her experience as an intern, and gave some pointers for how to create a welcoming and productive environment for intern positions.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Don’t forget that interns have lives too. If they just moved to a new city, help them settle in.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Align your intern’s project with something a team member (or yourself) will be actively work on.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Katy Farmer (&lt;a class="reference external" href="https://twitter.com/&amp;#64;TheKaterTot"&gt;&amp;#64;TheKaterTot&lt;/a&gt;) reminded everybody that teams shouldn’t &lt;em&gt;automatically&lt;/em&gt; aspire to use the workflows that gigantic tech companies use.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Just because it works for a big tech company doesn’t mean it’ll work for you.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Being a smaller-sized company isn’t better or worse, it’s just different. Don’t treat company size as a reflection of quality, and don’t assume larger companies do operations more effectively.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Frances Hocutt reassured everybody that it’s OK if your tests wouldn’t satisfy a production-level standard &lt;em&gt;all the time&lt;/em&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Make sure your tests reflect &lt;em&gt;the current state of your code&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Don’t let perfect be an enemy of good. Testing 10% of the code is still better than testing 0%.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Jennelle Crothers (&lt;a class="reference external" href="https://twitter.com/&amp;#64;jkc137"&gt;&amp;#64;jkc137&lt;/a&gt;) described how Windows is trying to shrink images that run Windows so that you can run them in containers more easily.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;It turns out that shrinking something from several GB to a few hundred MB makes it much easier to ship around :-)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;As an aside, it’s fascinating to see Microsoft focus on integrating itself with the container ecosystem (as opposed to trying to replace or compete with it). Maybe they really have learned something from their “&lt;a class="reference external" href="https://www.theregister.co.uk/2001/06/02/ballmer_linux_is_a_cancer/"&gt;linux is a cancer&lt;/a&gt;” debacle.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Adrian Cockcroft (&lt;a class="reference external" href="https://twitter.com/&amp;#64;adrianco"&gt;&amp;#64;adrianco&lt;/a&gt;) explained the importance of creating a &lt;a class="reference external" href="https://www.devopsdays.org/events/2018-silicon-valley/program/adrian-cockcroft/"&gt;culture of reporting and logging&lt;/a&gt; incidents, even the small ones!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Instrument and study the “non-events” - look for “near-misses” and outliers. Never throw away information just because something catastrophic didn’t happen.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Plan and practice for chaos! What will your team do if “everything goes wrong”?&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://chrisholdgraf.com/blog/2018/devopsdays-sv-2018/" rel="alternate"/>
    <summary>Last week I took a few days to attend DevOpsDays Silicon Valley. My goal
was to learn a bit about how the DevOps culture works, what are the things
people are excited about and discuss in this community. I’m also interested in
learning a thing or two that could be brought back into the scientific / academic world.
Here are a couple of thoughts from the experience.tl;dr: DevOps is more about culture and team process than it is about technology, maybe science should be too…</summary>
    <category term="devops" label="devops"/>
    <category term="jupyterhub" label="jupyterhub"/>
    <category term="openscience" label="open science"/>
    <category term="python" label="python"/>
    <category term="teams" label="teams"/>
    <published>2018-05-18T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://chrisholdgraf.com/blog/2018/jekyllmarkdown/</id>
    <title>Blogging with Jupyter Notebooks and Jekyll using nbconvert templates</title>
    <updated>2018-05-23T00:00:00+00:00</updated>
    <content type="html">&lt;section id="blogging-with-jupyter-notebooks-and-jekyll-using-nbconvert-templates"&gt;

&lt;p&gt;Here’s a quick (and hopefully helpful) post for those wishing to blog in
Jekyll using Jupyter notebooks. As some of you may know, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;nbconvert&lt;/span&gt;&lt;/code&gt; can
easily convert your &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;.ipynb&lt;/span&gt;&lt;/code&gt; files to markdown, which Jekyll can easily
turn into blog posts for you.&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;nbconvert&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;markdown&lt;/span&gt; &lt;span class="n"&gt;myfile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ipynb&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;However, an annoying part of this is that Markdown doesn’t include classes
for input and outputs, which means they each get treated the same in the
output. Not ideal.&lt;/p&gt;
&lt;p&gt;Fortunately, &lt;a class="reference external" href="https://nbconvert.readthedocs.io/en/latest/external_exporters.html"&gt;you can customize nbconvert extensively&lt;/a&gt;.
First, it’s possible to &lt;a class="reference external" href="https://nbconvert.readthedocs.io/en/latest/external_exporters.html#writing-a-custom-exporter"&gt;create your &lt;em&gt;own&lt;/em&gt; exporter class&lt;/a&gt;, but this is a bit heavy for what we want to do. In our case, we’d
simply like to &lt;em&gt;extend&lt;/em&gt; the markdown exporter so that it outputs Jekyll-friendly
markdown.&lt;/p&gt;
&lt;section id="extending-nbconvert-s-markdown-template"&gt;
&lt;h2&gt;Extending &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;nbconvert's&lt;/span&gt;&lt;/code&gt; markdown template&lt;/h2&gt;
&lt;p&gt;Because &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;nbconvert&lt;/span&gt;&lt;/code&gt; uses Liquid Templates for its exporters, this is
relatively easy! For example,
&lt;a class="reference external" href="https://github.com/jupyter/nbconvert/blob/master/nbconvert/templates/markdown.tpl"&gt;here is &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;nbconvert&lt;/span&gt;&lt;/code&gt;’s markdown template&lt;/a&gt;.
You can see how it extends another template, then adds some modifications of
its own. What we need to do is create a new template that slightly modifies
the functionality of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;nbconvert&lt;/span&gt;&lt;/code&gt;’s markdown template. Then we can use the same
markdown exporter, but with our custom template defining how the markdown is
created.&lt;/p&gt;
&lt;p&gt;To treat input and output text differently, we’ll extend &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;nbconvert&lt;/span&gt;&lt;/code&gt;’s base
markdown template by creating a template file of our own. Simply write the
following lines into a file called &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;mytemplate.tpl&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;{% highlight html %}
{% raw %}
{% extends ‘markdown.tpl’ %}&lt;/p&gt;
  &lt;!-- Add Div for input area --&gt;
&lt;p&gt;{% block input %}&lt;/p&gt;
  &lt;div class="input_area" markdown="1"&gt;
  {{ super() }}
  &lt;/div&gt;
  {% endblock input %}
  &lt;!-- Remove indentations for output text and add div classes  --&gt;
&lt;p&gt;{% block stream %}
{:.output_stream}&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;{% endblock stream %}&lt;/p&gt;
&lt;p&gt;{% block data_text %}
{:.output_data_text}&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;text/plain&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;{% endblock data_text %}&lt;/p&gt;
&lt;p&gt;{% block traceback_line  %}
{:.output_traceback_line}&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;{{&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;strip_ansi&lt;/span&gt; &lt;span class="p"&gt;}}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;{% endblock traceback_line  %}&lt;/p&gt;
  &lt;!-- Tell Jekyll not to render HTML output blocks as markdown --&gt;
&lt;p&gt;{% block data_html %}&lt;/p&gt;
  &lt;div markdown="0"&gt;
  {{ output.data['text/html'] }}
  &lt;/div&gt;
  {% endblock data_html %}
{% endraw %}
{% endhighlight %}
&lt;p&gt;Above, we’re doing two things:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Overriding the input area block so that it is now wrapped in &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;&lt;/code&gt; tags.
Note that we can set a custom class, and set &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;markdown=&amp;quot;1&amp;quot;&lt;/span&gt;&lt;/code&gt; so that the
markdown conversion occurs within the div.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Overriding various output text blocks so that we remove the indentation
that was used to denote a “code” cell. Instead, we’ll wrap the output text
in more common &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;```&lt;/span&gt;&lt;/code&gt; characters, and use a trick to add a class to
code blocks: &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;{:.class_name}&lt;/span&gt;&lt;/code&gt; syntax.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We can then directly reference this template when we call &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;nbconvert&lt;/span&gt;&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;nbconvert&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;markdown&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;template&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mytemplate&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tpl&lt;/span&gt; &lt;span class="n"&gt;myfile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ipynb&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;As a result, we now have classes around each of these divs that we can style
however we like. For example, here are the CSS rules I added to remove the
theme’s “code box” around each of the output areas:&lt;/p&gt;
&lt;div class="highlight-css notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;input_area&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;highlighter-rouge&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;#f7f7f7&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;output_stream&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;output_data_text&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;output_traceback_line&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;margin-left&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="kt"&gt;%&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;none&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;border-radius&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;#fafafa&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;box-shadow&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;none&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;output_stream&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;before&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;output_data_text&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;before&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;output_traceback_line&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;before&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;none&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cp"&gt;!important&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;It took me a while to figure out this pattern, so hopefully other people find
it useful as well!&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://chrisholdgraf.com/blog/2018/jekyllmarkdown/" rel="alternate"/>
    <summary>Here’s a quick (and hopefully helpful) post for those wishing to blog in
Jekyll using Jupyter notebooks. As some of you may know, nbconvert can
easily convert your .ipynb files to markdown, which Jekyll can easily
turn into blog posts for you.However, an annoying part of this is that Markdown doesn’t include classes
for input and outputs, which means they each get treated the same in the
output. Not ideal.</summary>
    <category term="blogging" label="blogging"/>
    <category term="jekyll" label="jekyll"/>
    <category term="python" label="python"/>
    <published>2018-05-23T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://chrisholdgraf.com/blog/2018/2018-06-04-makeitpop/</id>
    <title>Introducing _makeitpop_, a tool to perceptually warp your data!</title>
    <updated>2018-06-04T00:00:00+00:00</updated>
    <content type="html">&lt;section id="introducing-makeitpop-a-tool-to-perceptually-warp-your-data"&gt;

&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;It should go without saying, but &lt;strong&gt;you should never do the stuff that you’re about to read about here&lt;/strong&gt;. Data is meant to speak for itself, and our visualizations should accurately reflect the data above all else.*&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;When I was in graduate school, I tended to get on my soapbox and tell everybody
why they should &lt;a class="reference external" href="http://jakevdp.github.io/blog/2014/10/16/how-bad-is-your-colormap/"&gt;stop using Jet&lt;/a&gt;
and adopt a “perceptually-flat” colormap like &lt;a class="reference external" href="https://bids.github.io/colormap/"&gt;viridis, magma, or inferno&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Surprisingly (ok, maybe not so surprisingly) I got a lot of pushback from people. Folks would say &lt;em&gt;“But I like &lt;strong&gt;jet&lt;/strong&gt;, it really highlights my data, it makes the images ‘pop’ more effectively than viridis!”&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Unfortunately it turns out that when a colormap “makes your data pop”, it really just means “&lt;a class="reference external" href="https://bids.github.io/colormap/"&gt;warps your perception of the visualized data so that you see non-linearities when there are none&lt;/a&gt;”. AKA, a colormap like Jet actually &lt;em&gt;mis-represents&lt;/em&gt; the data.&lt;/p&gt;
&lt;p&gt;But what does this really mean? It’s difficult to talk and think about coor - especially when it comes to relating color with objective relationships
between data. Rather than talking about colormaps in the abstract, what if we could &lt;em&gt;visualize&lt;/em&gt; the warping that is performed by colormaps like Jet?&lt;/p&gt;
&lt;p&gt;In this post I’ll show that this is possible! Introducing &lt;strong&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;makeitpop&lt;/span&gt;&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;section id="what-does-makeitpop-do"&gt;
&lt;h2&gt;What does &lt;em&gt;makeitpop&lt;/em&gt; do?&lt;/h2&gt;
&lt;p&gt;Makeitpop lets you apply the same perceptual warping that would &lt;em&gt;normally&lt;/em&gt; be accomplished
with a colormap like Jet, but applies this warping to &lt;em&gt;the data itself&lt;/em&gt;! This lets us
get the same effect with a nice linear colormap like &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;viridis&lt;/span&gt;&lt;/code&gt;!&lt;/p&gt;
&lt;p&gt;For example, let’s take a look at the &lt;a class="reference external" href="https://matplotlib.org/gallery/images_contours_and_fields/image_demo.html#sphx-glr-gallery-images-contours-and-fields-image-demo-py"&gt;image demo in matplotlib&lt;/a&gt;. In it, we create two blobs that are meant to be visualized as an image. We’ll visualize this with our old friend viridis.&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Create a mesh grid with two gaussian blobs&lt;/span&gt;
&lt;span class="n"&gt;delta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.025&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;3.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;3.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;delta&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;meshgrid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Z1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Y&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Z2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Y&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Z1&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;Z2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;

&lt;span class="c1"&gt;# Visualize it&lt;/span&gt;
&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplots&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;figsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imshow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Z&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cmap&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;viridis&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="n"&gt;origin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;lower&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;extent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
          &lt;span class="n"&gt;vmax&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Z&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;vmin&lt;/span&gt;&lt;span class="o"&gt;=-&lt;/span&gt;&lt;span class="nb"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Z&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Original data&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;linear colormap&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tight_layout&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;img alt="../_images/740ee63ac731761d28669ee426c17caf515cab36f3fca6e8c675430eef5521f8.png" src="../_images/740ee63ac731761d28669ee426c17caf515cab36f3fca6e8c675430eef5521f8.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Hmmm, not too bad…but it’s a bit &lt;em&gt;boring&lt;/em&gt;, no? Why can’t we make it snazzier? I know, let’s use Jet!&lt;/p&gt;
&lt;div class="cell tag_hide-input docutils container"&gt;
&lt;details class="hide above-input"&gt;
&lt;summary aria-label="Toggle hidden content"&gt;
&lt;span class="collapsed"&gt;Show code cell source&lt;/span&gt;
&lt;span class="expanded"&gt;Hide code cell source&lt;/span&gt;
&lt;/summary&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Visualize our data&lt;/span&gt;
&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplots&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;figsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imshow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Z&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cmap&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="n"&gt;origin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;lower&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;extent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
          &lt;span class="n"&gt;vmax&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Z&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;vmin&lt;/span&gt;&lt;span class="o"&gt;=-&lt;/span&gt;&lt;span class="nb"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Z&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Original data&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;non-linear colormap&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tight_layout&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;img alt="../_images/d4804b5e53c6821f455edcedcb7642e4fe4ad7a08fb3cbd431a825a6880395eb.png" src="../_images/d4804b5e53c6821f455edcedcb7642e4fe4ad7a08fb3cbd431a825a6880395eb.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Oooh now that’s what I’m talking about. You can clearly see two peaks of significant results
at the center of each circle. Truly this is fit for publishing in &lt;em&gt;Nature&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;But…as you all know, this data only &lt;em&gt;looks&lt;/em&gt; better because we’ve used a colormap that distorts
our perception of the underlying data.&lt;/p&gt;
&lt;p&gt;Let’s illustrate this by &lt;strong&gt;making it pop&lt;/strong&gt;!&lt;/p&gt;
&lt;div class="cell tag_hide-input docutils container"&gt;
&lt;details class="hide above-input"&gt;
&lt;summary aria-label="Toggle hidden content"&gt;
&lt;span class="collapsed"&gt;Show code cell source&lt;/span&gt;
&lt;span class="expanded"&gt;Hide code cell source&lt;/span&gt;
&lt;/summary&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Pop the data!&lt;/span&gt;
&lt;span class="n"&gt;Z_popped&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;makeitpop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Z&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;jet&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;scaling_factor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Visualize the warped data&lt;/span&gt;
&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplots&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;figsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imshow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Z_popped&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cmap&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;viridis&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
          &lt;span class="n"&gt;origin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;lower&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;extent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
          &lt;span class="n"&gt;vmax&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Z&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;vmin&lt;/span&gt;&lt;span class="o"&gt;=-&lt;/span&gt;&lt;span class="nb"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Z&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Warped data&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;linear colormap&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tight_layout&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;img alt="../_images/6837576f1a6283c3390257b536a6038fe0bcc7408aa0ffe4593f4a12a5c356db.png" src="../_images/6837576f1a6283c3390257b536a6038fe0bcc7408aa0ffe4593f4a12a5c356db.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Excellent! We’re using a nice, perceptually-flat colormap like viridis, but we’ve attained
an effect similar to the one that &lt;em&gt;Jet&lt;/em&gt; would have created!&lt;/p&gt;
&lt;p&gt;Now let’s visualize all three next to each other so that we can see the total effect:&lt;/p&gt;
&lt;div class="cell tag_hide-input docutils container"&gt;
&lt;details class="hide above-input"&gt;
&lt;summary aria-label="Toggle hidden content"&gt;
&lt;span class="collapsed"&gt;Show code cell source&lt;/span&gt;
&lt;span class="expanded"&gt;Hide code cell source&lt;/span&gt;
&lt;/summary&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;axs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplots&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;figsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;sharey&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;kws_img&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;extent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;origin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;lower&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
               &lt;span class="n"&gt;vmax&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Z&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;vmin&lt;/span&gt;&lt;span class="o"&gt;=-&lt;/span&gt;&lt;span class="nb"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Z&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

&lt;span class="c1"&gt;# Raw data with a perceptually-flat colormap&lt;/span&gt;
&lt;span class="n"&gt;axs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imshow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Z&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cmap&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;viridis&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kws_img&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;axs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Original data&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;linear colormap&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Raw data with a perceptually-distorted colormap&lt;/span&gt;
&lt;span class="n"&gt;axs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imshow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Z&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cmap&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;jet&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kws_img&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;axs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Original data&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;non-linear colormap&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Distorted data with a perceptually-flat colormap&lt;/span&gt;
&lt;span class="n"&gt;axs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;imshow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Z_popped&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cmap&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;viridis&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kws_img&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;axs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Warped data&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;linear colormap&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tight_layout&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;img alt="../_images/cebd30f79ac58a4ff7f04b3a21f773d135c55307a17685bad3acbed633159825.png" src="../_images/cebd30f79ac58a4ff7f04b3a21f773d135c55307a17685bad3acbed633159825.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="let-s-see-it-in-the-real-world"&gt;
&lt;h2&gt;Let’s see it in the real world&lt;/h2&gt;
&lt;p&gt;Thus far I’ve been using toy examples to illustrate how makeitpop works. Let’s see how
things look on an actual dataset collected in the wild.&lt;/p&gt;
&lt;p&gt;For this, we’ll use the excellent &lt;a class="reference external" href="https://nilearn.github.io/"&gt;nilearn&lt;/a&gt; package. This has a
few datasets we can download to demonstrate our point. First we’ll load the data and prep it:&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;nilearn&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;datasets&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;nilearn&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;plotting&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;nibabel&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;nb&lt;/span&gt;

&lt;span class="c1"&gt;# Load a sample dataset&lt;/span&gt;
&lt;span class="n"&gt;tmap_filenames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datasets&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetch_localizer_button_task&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tmaps&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;tmap_filename&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tmap_filenames&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# Threshold our data for viz&lt;/span&gt;
&lt;span class="n"&gt;brain&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tmap_filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;brain_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;brain&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_fdata&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;mask&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logical_or&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;brain_data&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;.01&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;brain_data&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mf"&gt;.01&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;div class="output stderr highlight-myst-ansi notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/home/choldgraf/anaconda/envs/dev/lib/python3.6/site-packages/h5py/__init__.py:36: FutureWarning: Conversion of the second argument of issubdtype from `float` to `np.floating` is deprecated. In future, it will be treated as `np.float64 == np.dtype(float).type`.
  from ._conv import register_converters as _register_converters
/home/choldgraf/anaconda/envs/dev/lib/python3.6/site-packages/numpy/lib/npyio.py:2266: VisibleDeprecationWarning: Reading unicode strings without specifying the encoding argument is deprecated. Set the encoding, use None for the system default.
  output = genfromtxt(fname, **kwargs)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Next, we’ll create a “popped” version of the data, where we apply the non-linear warping
properties of &lt;em&gt;Jet&lt;/em&gt; to our data, so that we can visualize the same effect in linear space.&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Create a copy of the data, then pop it&lt;/span&gt;
&lt;span class="c1"&gt;# We&amp;#39;ll use a scaling factor to highlight the effect&lt;/span&gt;
&lt;span class="n"&gt;brain_popped&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;brain_data&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;copy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;brain_popped&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;mask&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;makeitpop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;brain_popped&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;mask&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;colormap&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;jet&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;scaling_factor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;75&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;brain_popped&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Nifti1Image&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;brain_popped&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;brain&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;affine&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now, I’ll plot the results for each.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;First, we’ll see the raw data on a linear colormap. This is the way we’d display the data to show the true underlying relationships between datapoints.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next, we’ll show the same data plotted with &lt;em&gt;Jet&lt;/em&gt;. See how many more significant voxels there are! (/s)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Finally, we’ll plot the “popped” data using a linear colormap (viridis). This accurately represents the underlying data, but the data &lt;em&gt;itself&lt;/em&gt; has been distorted!&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="cell tag_hide-input docutils container"&gt;
&lt;details class="hide above-input"&gt;
&lt;summary aria-label="Toggle hidden content"&gt;
&lt;span class="collapsed"&gt;Show code cell source&lt;/span&gt;
&lt;span class="expanded"&gt;Hide code cell source&lt;/span&gt;
&lt;/summary&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i_brain&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;brain&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;original&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;brain&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;original (jet)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;brain_popped&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;popped brain&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)]:&lt;/span&gt;
    &lt;span class="n"&gt;cmap&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;jet&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;original (jet)&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;viridis&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;plotting&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot_stat_map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i_brain&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cmap&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;cmap&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vmax&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;display_mode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                           &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cut_coords&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;linspace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dtype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;img alt="../_images/14811d2b7a96bc1a5878964b791fae388d72263cf1da2960c9a581cc1f5fd13c.png" src="../_images/14811d2b7a96bc1a5878964b791fae388d72263cf1da2960c9a581cc1f5fd13c.png" /&gt;
&lt;img alt="../_images/d176c9bc84f687ea2c16df88d4acfb39b73081b784ce392ea99c1fbf46ffc604.png" src="../_images/d176c9bc84f687ea2c16df88d4acfb39b73081b784ce392ea99c1fbf46ffc604.png" /&gt;
&lt;img alt="../_images/9db4e875cd984d0924e9ee51b1f496e3dcc921dc81f3a902ae08c114775c3a05.png" src="../_images/9db4e875cd984d0924e9ee51b1f496e3dcc921dc81f3a902ae08c114775c3a05.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;As you can see, different kinds of results show up when your perception of the data is affected by the colormap.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="how-does-this-work"&gt;
&lt;h2&gt;How does this work?&lt;/h2&gt;
&lt;p&gt;OK, so what is the black voodoo magic that makes it possible to “make your data pop”?&lt;/p&gt;
&lt;p&gt;It all comes down to your visual system. I won’t go into a ton of detail
because Nathaniel Smith and Stefan van der Walt &lt;a class="reference external" href="https://www.youtube.com/watch?v=xAoljeRJ3lU"&gt;already gave a great talk about this&lt;/a&gt;, however here is a lay-person’s take:&lt;/p&gt;
&lt;p&gt;When we use color to represent data, we are mapping a range of data values onto
a range of color values. Usually this means defining a min / max for our data, then mapping data
values linearly from 0 to 1, and finally mapping those values onto RGB values in a colormap.&lt;/p&gt;
&lt;p&gt;Implicit in this process is the idea that stepping across our space in the &lt;em&gt;data&lt;/em&gt; equates to
an equal step in our &lt;em&gt;perception&lt;/em&gt; of the color that is then chosen. We want a one-to-one mapping between the two.&lt;/p&gt;
&lt;p&gt;Unfortunately, this isn’t how our visual system works.&lt;/p&gt;
&lt;p&gt;In reality, our brains do all kinds of strange things when interpreting color. They are biased to detect changes between particular kinds of colors, and biased to miss the transition between others.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Jet&lt;/em&gt; uses a range of colors that highlight this fact. It transitions through colors such that &lt;em&gt;linear&lt;/em&gt; changes in our data are perceived as &lt;em&gt;nonlinear&lt;/em&gt; changes when we look at the visualization. That’s what makes the data “pop”.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="perceptual-delta-curves"&gt;
&lt;h2&gt;Perceptual “delta” curves&lt;/h2&gt;
&lt;p&gt;You can determine the extent to which a colormap “warps” your perception of the data by calculating the “perceptual deltas” as you move across the values of a colormap (e.g. as you move from 0 to 1, and their corresponding colors).&lt;/p&gt;
&lt;p&gt;These deltas essentially mean “how much is the &lt;em&gt;next&lt;/em&gt; color in the colormap perceived as different from the &lt;em&gt;current&lt;/em&gt; color?” If your colormap is perceptually flat, the delta will be the &lt;em&gt;same&lt;/em&gt; no matter where you are on the range from 0 to 1.&lt;/p&gt;
&lt;p&gt;Let’s see what the deltas look like for &lt;em&gt;Jet&lt;/em&gt;:&lt;/p&gt;
&lt;div class="cell tag_hide-input docutils container"&gt;
&lt;details class="hide above-input"&gt;
&lt;summary aria-label="Toggle hidden content"&gt;
&lt;span class="collapsed"&gt;Show code cell source&lt;/span&gt;
&lt;span class="expanded"&gt;Hide code cell source&lt;/span&gt;
&lt;/summary&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;plot_colormap_deltas&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;deltas&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cmap&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplots&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;figsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;xrange&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;derivatives&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;sc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;deltas&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vmin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;xrange&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;vmax&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;xrange&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
                    &lt;span class="n"&gt;cmap&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_cmap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmap&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xrange&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;deltas&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;k&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;alpha&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;.1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;

&lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plot_colormap_deltas&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;derivatives&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;jet&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;jet&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ylim&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_ylim&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# So we can compare with other colormaps&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Perceptual deltas with Jet&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;div class="output text_plain highlight-myst-ansi notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[Text(0.5,1,&amp;#39;Perceptual deltas with Jet&amp;#39;)]
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;img alt="../_images/a4dcbb1814e8d6e94fd6c01116d5ae2aed02711b691f825766b3c10e693a696d.png" src="../_images/a4dcbb1814e8d6e94fd6c01116d5ae2aed02711b691f825766b3c10e693a696d.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Oops.&lt;/p&gt;
&lt;p&gt;As you can see, Jet does &lt;strong&gt;not&lt;/strong&gt; have a flat line for perceptual deltas. Each “jump” you see above is a moment where Jet is actually &lt;em&gt;mis-representing&lt;/em&gt; differences in the data. For shame, Jet.&lt;/p&gt;
&lt;p&gt;Now let’s see what this looks like for viridis:&lt;/p&gt;
&lt;div class="cell tag_hide-input docutils container"&gt;
&lt;details class="hide above-input"&gt;
&lt;summary aria-label="Toggle hidden content"&gt;
&lt;span class="collapsed"&gt;Show code cell source&lt;/span&gt;
&lt;span class="expanded"&gt;Hide code cell source&lt;/span&gt;
&lt;/summary&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plot_colormap_deltas&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;derivatives&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;viridis&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;viridis&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ylim&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ylim&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Perceptual deltas with viridis&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;img alt="../_images/6840ed9526e0166eb7547b5c1f5d6c30dc763d58226a2afafe8828c57814e8b2.png" src="../_images/6840ed9526e0166eb7547b5c1f5d6c30dc763d58226a2afafe8828c57814e8b2.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Ahhh, sweet, sweet linear representation of data.&lt;/p&gt;
&lt;p&gt;In case you’re curious, here are the “perceptual deltas” for several colormaps.
In this case, I’ve centered them and scaled each by the variance of the largest colormap,
so that they are easier to compare.&lt;/p&gt;
&lt;div class="cell tag_hide-input docutils container"&gt;
&lt;details class="hide above-input"&gt;
&lt;summary aria-label="Toggle hidden content"&gt;
&lt;span class="collapsed"&gt;Show code cell source&lt;/span&gt;
&lt;span class="expanded"&gt;Hide code cell source&lt;/span&gt;
&lt;/summary&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplots&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;figsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;cmap&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;deltas&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;derivatives_scaled&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;cmap&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;linear&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;continue&lt;/span&gt;
    &lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plot_colormap_deltas&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;deltas&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cmap&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Scaled perceptual deltas for a bunch of colormaps&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;img alt="../_images/8a5d08db012083fcd4adf6721b51137dd4b72c532a7d2be57e7c76db9302cba8.png" src="../_images/8a5d08db012083fcd4adf6721b51137dd4b72c532a7d2be57e7c76db9302cba8.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="we-can-even-warp-1-dimensional-data"&gt;
&lt;h2&gt;We can even warp 1-dimensional data!&lt;/h2&gt;
&lt;p&gt;Let’s see how this principle affects our perception with a different kind of visual
encoding. Now that we know these perceptual warping functions, we can get all the
data-warping properties of jet, but in one dimension!&lt;/p&gt;
&lt;p&gt;Here’s a line.&lt;/p&gt;
&lt;div class="cell tag_hide-input docutils container"&gt;
&lt;details class="hide above-input"&gt;
&lt;summary aria-label="Toggle hidden content"&gt;
&lt;span class="collapsed"&gt;Show code cell source&lt;/span&gt;
&lt;span class="expanded"&gt;Hide code cell source&lt;/span&gt;
&lt;/summary&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplots&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;figsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;linspace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;k-&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lw&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;alpha&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;.4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;True Data&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Totally boring line.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;Nothing to see here.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;img alt="../_images/769d81fbe761e875d34d6358b36722fe6d3d413cb754e04ba01763d0b48d55c0.png" src="../_images/769d81fbe761e875d34d6358b36722fe6d3d413cb754e04ba01763d0b48d55c0.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Ew. Boring.&lt;/p&gt;
&lt;p&gt;Now, let’s make it pop! We’ll loop through a few colormaps, applying its color
warping function to the y-axis of our line as we step through it.&lt;/p&gt;
&lt;div class="cell tag_hide-input docutils container"&gt;
&lt;details class="hide above-input"&gt;
&lt;summary aria-label="Toggle hidden content"&gt;
&lt;span class="collapsed"&gt;Show code cell source&lt;/span&gt;
&lt;span class="expanded"&gt;Hide code cell source&lt;/span&gt;
&lt;/summary&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;jet&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;viridis&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rainbow&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;spring&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hsv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplots&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;figsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;linspace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;k-&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lw&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;alpha&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;.4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;True Data&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;nm&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;makeitpop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;colormap&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;nm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;scaling_factor&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;nm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lw&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;legend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.05&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;.6&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Making data &amp;quot;pop&amp;quot; is fun!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;div class="output text_plain highlight-myst-ansi notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Text(0.5,1,&amp;#39;Making data &amp;quot;pop&amp;quot; is fun!&amp;#39;)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;img alt="../_images/8db2970eea53db79607379499a6c328c322a488e70fec7dc97893b94421064cc.png" src="../_images/8db2970eea53db79607379499a6c328c322a488e70fec7dc97893b94421064cc.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;As you can see, data looks much more interesting when it’s been non-linearly warped!
It looks particularly striking when you see it on a 1-D plot. This is effectively
what colormaps such as Jet are doing in 2 dimensions! We’re simply bringing the fun
back to 1-D space.&lt;/p&gt;
&lt;p&gt;Let’s see how it looks on some scatterplots. We’ll plot the raw data in the background in grey,
and the “popped” data in front in color. Notice how some colormaps distort the y-values more
than others.&lt;/p&gt;
&lt;div class="cell tag_hide-input docutils container"&gt;
&lt;details class="hide above-input"&gt;
&lt;summary aria-label="Toggle hidden content"&gt;
&lt;span class="collapsed"&gt;Show code cell source&lt;/span&gt;
&lt;span class="expanded"&gt;Hide code cell source&lt;/span&gt;
&lt;/summary&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;viridis&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;jet&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rainbow&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;spring&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;hsv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;axs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplots&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;figsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;sharex&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sharey&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;linspace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;.2&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;names&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;axs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;    
    &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;k&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;80&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;alpha&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;.2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;makeitpop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;alpha&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;.8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cmap&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_cmap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;img alt="../_images/c4d8738c872eb10855eaaf4419c88a16fe142678c23ed9398597dc0ac92a57dd.png" src="../_images/c4d8738c872eb10855eaaf4419c88a16fe142678c23ed9398597dc0ac92a57dd.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="so-what-should-we-do"&gt;
&lt;h2&gt;So what should we do?&lt;/h2&gt;
&lt;p&gt;The reason that I wrote this blog post (and made this silly package) is to illustrate what we’re really
doing when we use a colormap like &lt;em&gt;Jet&lt;/em&gt;, and to highlight the importance of using a perceptually-flat colormap.  Sure, we want to choose the visualization that best-makes our point,
but a colormap like Jet is &lt;em&gt;actively mis-representing your data&lt;/em&gt;. You’d &lt;em&gt;never&lt;/em&gt; consider changing the raw
data values so that an effect popped out, and you’d &lt;em&gt;never&lt;/em&gt; alter the y-values of a scatterplot so that something shows up. Well, this is perceptually what you’re doing when you visualize 2-D data with Jet.&lt;/p&gt;
&lt;p&gt;Here are a few things to keep in mind moving forward:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Don’t use Jet&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you review a paper or are an editor for a journal, consider asking authors to use a perceptually flat colormap (this is usually just a matter of changing &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;cmap='viridis'&lt;/span&gt;&lt;/code&gt;!)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Be aware of the effects that color has on the point you’re trying to make. Perceptual warping is
just one of many potential issues with choosing the right color.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="wrapping-up"&gt;
&lt;h2&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;I hope that this post has been a fun and slightly informative take on the nuances of colormaps, and the unintended effects that they might have.&lt;/p&gt;
&lt;p&gt;So, &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;tl;dr&lt;/span&gt;&lt;/code&gt;:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Jet (and many other colormaps) mis-represent your perception of the data&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Perceptually flat colormaps like Viridis, Magma, Inferno, or Parula minimize this effect&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can calculate the &lt;em&gt;extent&lt;/em&gt; to which this mis-representation happens as you move along the colormap&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We can then use this function to &lt;em&gt;distort&lt;/em&gt; data so that the data itself contains this mis-representation&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;But doing so would be super unethical, so in the end &lt;strong&gt;you should stop using jet and use a perceptually-flat colormap like viridis.&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you’d like to check out the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;makeitpop&lt;/span&gt;&lt;/code&gt; package, see the &lt;a class="reference external" href="https://github.com/choldgraf/makeitpop"&gt;GitHub repo here&lt;/a&gt;. In addition, all of the examples in this post are runnable
on Binder! You can launch an interactive session with this code by clicking on the Binder button
at the top of this page!&lt;/p&gt;
&lt;/section&gt;
&lt;section id="addendum-ok-but-how-does-makeitpop-actually-work"&gt;
&lt;h2&gt;Addendum: Ok but how does &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;makeitpop&lt;/span&gt;&lt;/code&gt; &lt;em&gt;actually&lt;/em&gt; work?&lt;/h2&gt;
&lt;p&gt;In this section I’ll describe the (admittedly hacky) way that I’ve written &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;makeitpop&lt;/span&gt;&lt;/code&gt;.
As I mentioned before, &lt;a class="reference external" href="https://github.com/choldgraf/makeitpop"&gt;all the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;makeitpop&lt;/span&gt;&lt;/code&gt; code is on GitHub&lt;/a&gt; and
Pull Requests are more than welcome to improve the process (I’m looking at you, “histogram matching” people!)&lt;/p&gt;
&lt;p&gt;Here’s what &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;makeitpop&lt;/span&gt;&lt;/code&gt; does:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Collects a list of the “perceptual deltas”. These are calculated from the equations given in &lt;a class="reference external" href="https://github.com/matplotlib/viscm"&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;viscm&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;, which was released as a part of the original work that created &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;viridis&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Centers each colormap’s deltas at 0.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Scales each colormap’s deltas by the &lt;em&gt;largest variance&lt;/em&gt; across all colormaps. This is to make sure that warping the data is done with the relative differences of each colormap in mind.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;makeitpop&lt;/span&gt;&lt;/code&gt; is called, the function then:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Scales the input data linearly between 0 and 1&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Calculates the point-by-point derivative for linearly spaced points between 0 and 1 (the derivative is the same for all points here).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Multiplies each derivative by the scaled perceptual deltas function, plus an extra scaling factor that accentuates the effect.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Adds each value to the scaled input data.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Un-scales the altered input data so that it has the same min/max as before.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;There are plenty of ways you could do this more effectively (for example, by matching empirical CDFs and
using linear interpolation to map the delta function of one colormap onto the delta function for another
colormap). If you’d like to contribute or suggest something, feel free to do so! However, I’m just creating
this package to highlight an idea, and think this approach gets close enough with relatively little complexity.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="some-extras"&gt;
&lt;h1&gt;Some extras&lt;/h1&gt;
&lt;p&gt;Here’s a viz that will let you visualize how different colormaps distort data. We’ll show a
gradient of linearly-spaced values, both using a warping colormap such as “jet” and a linear
colormap like “vidiris”. Then, we’ll “pop” the data and re-visualize with viridis.&lt;/p&gt;
&lt;div class="cell tag_hide-input docutils container"&gt;
&lt;details class="hide above-input"&gt;
&lt;summary aria-label="Toggle hidden content"&gt;
&lt;span class="collapsed"&gt;Show code cell source&lt;/span&gt;
&lt;span class="expanded"&gt;Hide code cell source&lt;/span&gt;
&lt;/summary&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Create a gradient of datapoints&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;linspace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="c1"&gt;# Pop the data&lt;/span&gt;
&lt;span class="n"&gt;cmap_warping&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;jet&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;scaling_factor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;
&lt;span class="n"&gt;data_popped&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;makeitpop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cmap_warping&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;scaling_factor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Visualize&lt;/span&gt;
&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;axs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplots&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;figsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;sharex&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;axs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pcolormesh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;derivatives_scaled&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vmin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vmax&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cmap&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;cmap_warping&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;axs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Raw data with colormap &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmap_warping&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;axs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;derivatives_scaled&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;derivatives_scaled&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;cmap_warping&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;axs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xlim&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;ylim&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;First row of image&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;axs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pcolormesh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;derivatives_scaled&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vmin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vmax&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cmap&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;viridis&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;axs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Raw data with colormap &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;viridis&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;axs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;derivatives_scaled&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;axs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_xlim&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="n"&gt;axs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pcolormesh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;derivatives_scaled&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)),&lt;/span&gt; &lt;span class="n"&gt;data_popped&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vmin&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vmax&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cmap&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;viridis&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;axs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Data warped with colormap &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmap_warping&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;axs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;derivatives_scaled&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data_popped&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;axs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_xlim&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tight_layout&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/details&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;img alt="../_images/4a62bb61b3f1fc2ad9b84402a6c6738ec58a998c11b14ef73f37f89699c62f12.png" src="../_images/4a62bb61b3f1fc2ad9b84402a6c6738ec58a998c11b14ef73f37f89699c62f12.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
</content>
    <link href="https://chrisholdgraf.com/blog/2018/2018-06-04-makeitpop/" rel="alternate"/>
    <summary>It should go without saying, but you should never do the stuff that you’re about to read about here. Data is meant to speak for itself, and our visualizations should accurately reflect the data above all else.*When I was in graduate school, I tended to get on my soapbox and tell everybody
why they should stop using Jet
and adopt a “perceptually-flat” colormap like viridis, magma, or inferno.</summary>
    <category term="pythoncolormaps" label="python colormaps"/>
    <published>2018-06-04T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://chrisholdgraf.com/blog/2018/sphinx-copy-buttons/</id>
    <title>Adding copy buttons to code blocks in Sphinx</title>
    <updated>2018-07-05T00:00:00+00:00</updated>
    <content type="html">&lt;section id="adding-copy-buttons-to-code-blocks-in-sphinx"&gt;

&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;&lt;strong&gt;NOTE: This is now a sphinx extension!&lt;/strong&gt; Thanks to some friendly suggestions, I’ve written
this up as a super tiny sphinx extension. Check it out here: https://github.com/choldgraf/sphinx-copybutton&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;a class="reference external" href="http://www.sphinx-doc.org/en/master/"&gt;Sphinx&lt;/a&gt; is a fantastic way to build
documentation for your Python package. On the Jupyter project, we use it
for almost all of our repositories.&lt;/p&gt;
&lt;p&gt;A common use for Sphinx is to step people through a chunk of code. For example,
in the &lt;a class="reference external" href="https://zero-to-jupyterhub.readthedocs.io/en/latest/"&gt;Zero to JupyterHub for Kubernetes&lt;/a&gt;
guide we step users through a number of installation and configuration steps.&lt;/p&gt;
&lt;p&gt;A common annoyance is that there is a lot of copy/pasting involved. Sometimes
you accidentally miss a character or some whitespace. So, I spent a bit of time
figuring out how to &lt;strong&gt;automatically embed a copy button into code blocks&lt;/strong&gt;. It
turns out this is pretty easy!&lt;/p&gt;
&lt;p&gt;Here’s what the final result will look like (just hover the code block below)&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;wow&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;this_text&lt;/span&gt;
&lt;span class="n"&gt;is_so&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;much&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;more&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;copyable&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;section id="adding-a-copy-button-to-your-sphinx-code-blocks"&gt;
&lt;h2&gt;Adding a copy button to your Sphinx code blocks&lt;/h2&gt;
&lt;p&gt;To accomplish this we’ll use the excellent &lt;a class="reference external" href="https://clipboardjs.com/"&gt;clipboard.js&lt;/a&gt;
which provides the machinery for copying the contents of an HTML element as well
as &lt;a class="reference external" href="https://jquery.com/"&gt;jquery&lt;/a&gt; for modifying our built documentation on-demand.&lt;/p&gt;
&lt;p&gt;The result will be a Sphinx site with code blocks that display a copy button
when you hover over them. You can see how it looks on this very page, which uses a
similar method (but is built with Jekyll).&lt;/p&gt;
&lt;p&gt;Here’s what you should do:&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Add the clipboard.js javascript&lt;/strong&gt;. Create a javascript
script called &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;doc/_static/custom.js&lt;/span&gt;&lt;/code&gt;. In the file, put the following
code (see comments for explanation):&lt;/p&gt;
&lt;div class="highlight-javascript notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;addCopyButtonToCode&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
&lt;span class="c1"&gt;// get all code elements&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;allCodeBlocksElements&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;div.highlight pre&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// For each element, do the following steps&lt;/span&gt;
&lt;span class="nx"&gt;allCodeBlocksElements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;each&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ii&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="c1"&gt;// define a unique id for this element and add it&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;currentId&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;codeblock&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ii&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;attr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;currentId&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="c1"&gt;// create a button that&amp;#39;s configured for clipboard.js&lt;/span&gt;
&lt;span class="c1"&gt;// point it to the text that&amp;#39;s in this code block&lt;/span&gt;
&lt;span class="c1"&gt;// add the button just after the text in the code block w/ jquery&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;clipButton&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;lt;button class=&amp;quot;btn copybtn&amp;quot; data-clipboard-target=&amp;quot;#&amp;#39;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;currentId&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;quot;&amp;gt;&amp;lt;img src=&amp;quot;https://clipboardjs.com/assets/images/clippy.svg&amp;quot; width=&amp;quot;13&amp;quot; alt=&amp;quot;Copy to clipboard&amp;quot;&amp;gt;&amp;lt;/button&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;after&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;clipButton&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;

&lt;span class="c1"&gt;// tell clipboard.js to look for clicks that match this query&lt;/span&gt;
&lt;span class="ow"&gt;new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nx"&gt;Clipboard&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.btn&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;ready&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="c1"&gt;// Once the DOM is loaded for the page, attach clipboard buttons&lt;/span&gt;
&lt;span class="nx"&gt;addCopyButtonToCode&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Add some CSS to make it pretty&lt;/strong&gt;. Create a custom CSS file
called &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;doc/_static/custom.css&lt;/span&gt;&lt;/code&gt; (or add to one you’ve
already got). In the file, put these lines:&lt;/p&gt;
&lt;div class="highlight-css notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;/* Copy buttons */&lt;/span&gt;
&lt;span class="nt"&gt;button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;copybtn&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;webkit-transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;opacity&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;.3&lt;/span&gt;&lt;span class="kt"&gt;s&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;ease-in-out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="kp"&gt;-o-&lt;/span&gt;&lt;span class="k"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;opacity&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;.3&lt;/span&gt;&lt;span class="kt"&gt;s&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;ease-in-out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;transition&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;opacity&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;.3&lt;/span&gt;&lt;span class="kt"&gt;s&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;ease-in-out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;absolute&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;right&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;highlight&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;hover&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;copybtn&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;highlight&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;copybtn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;focus&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;.3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;highlight&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;copybtn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;hover&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;opacity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="nt"&gt;div&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;highlight&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;relative&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;
3. **Link these scripts in your configuration.** You need to link your
 custom JS and CSS scripts, as well as the clipboard.js script so it ships with
 your site. In your `conf.py` file, add the following function/lines (or add to one you&amp;#39;ve already
 got defined).

 ```python
 def setup(app):
     app.add_stylesheet(&amp;#39;custom.css&amp;#39;)
     app.add_javascript(&amp;quot;custom.js&amp;quot;)
     app.add_javascript(&amp;quot;https://cdn.jsdelivr.net/npm/clipboard@1/dist/clipboard.min.js&amp;quot;)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;And that’s it! Once you clear your Sphinx cache and re-build your site, you should
now have buttons that appear when you hover over them, and that copy
the text inside when you click them.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="thanks"&gt;
&lt;h2&gt;Thanks&lt;/h2&gt;
&lt;p&gt;Many thanks to &lt;a class="reference external" href="https://stackoverflow.com/a/48078807/1927102"&gt;this StackOverflow post&lt;/a&gt;
for the majority of the code that led to this hack!&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://chrisholdgraf.com/blog/2018/sphinx-copy-buttons/" rel="alternate"/>
    <summary>NOTE: This is now a sphinx extension! Thanks to some friendly suggestions, I’ve written
this up as a super tiny sphinx extension. Check it out here: https://github.com/choldgraf/sphinx-copybuttonSphinx is a fantastic way to build
documentation for your Python package. On the Jupyter project, we use it
for almost all of our repositories.</summary>
    <category term="blogging" label="blogging"/>
    <category term="documentation" label="documentation"/>
    <category term="python" label="python"/>
    <category term="sphinx" label="sphinx"/>
    <published>2018-07-05T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://chrisholdgraf.com/blog/2018/conferences-summer-2018/</id>
    <title>Summer conference report back</title>
    <updated>2018-08-01T00:00:00+00:00</updated>
    <content type="html">&lt;section id="summer-conference-report-back"&gt;

&lt;p&gt;This is a short update on several of the conferences and workshops over the
summer of this year. There’s all kinds of exciting things going on in open
source and open communities, so this is a quick way for me to collect my
thoughts on some things I’ve learned this summer.&lt;/p&gt;
&lt;section id="scipy"&gt;
&lt;h2&gt;SciPy&lt;/h2&gt;
&lt;section id="the-pangeo-project-demoed-their-jupyterhub-for-big-data-geoscience"&gt;
&lt;h3&gt;The Pangeo project demoed their JupyterHub for big-data geoscience&lt;/h3&gt;
&lt;p&gt;Pangeo is a project that provides
&lt;strong&gt;access to a gigantic geosciences dataset&lt;/strong&gt;. They use lots of tools in the
open-source community, including Dask for efficient numerical computation,
the SciPy stack for a bunch of data analytics, and JupyterHub on
Kubernetes for managing user instances and deploying on remote infrastructure.
Pangeo has a neat demo of their hosted JupyterHub instance that people can use
to access this otherwise-inaccessible dataset! See their video from SciPy below.&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/2rgD5AJsAbE" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/section&gt;
&lt;section id="wholetale-shared-some-ideas-on-getting-data-to-work-with-reproducible-pipelines"&gt;
&lt;h3&gt;Wholetale shared some ideas on getting data to work with reproducible pipelines&lt;/h3&gt;
&lt;p&gt;Wholetale is a collection
of technology that makes it easier to do reproducible work. It is NSF-funded,
so tries to be fairly open about how it interfaces with the ecosystem around it.
They Wholetale team gave an interesting talk about how to handle &lt;strong&gt;data in
reproducible environments&lt;/strong&gt;. This is a big unsolved problem in the space, since
datasets are often difficult to ship around or copy, and it doesn’t usually make
sense to bake them into things like container images.&lt;/p&gt;
&lt;p&gt;Check out their presentation below&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/X0UX4bW_4w0" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/section&gt;
&lt;section id="binder-2-0-was-unveiled"&gt;
&lt;h3&gt;Binder 2.0 was unveiled!&lt;/h3&gt;
&lt;p&gt;Min Ragan-Kelley and I presented Binder 2.0 on
behalf of the Binder community. We talked a bit about the philosophy behind Binder,
how we connect with the broader open-source ecosystem (hint: BinderHub is 70% jupyterhub),
dove into the technical pieces a bit, and laid out some ideas for how Binder can
grow in the future. We’d love to see a world where there are &lt;strong&gt;BinderHubs all over
the scientific landscape&lt;/strong&gt; (e.g. “binder.berkeley.edu”) that users can select based
on their institutional affiliation or address.&lt;/p&gt;
&lt;p&gt;In addition, the Binder team collaborated on &lt;a class="reference external" href="https://github.com/scipy-conference/scipy_proceedings/pull/386"&gt;a “Binder 2.0”
paper&lt;/a&gt;,
which will be published in the proceedings from SciPy. Hooray citable
research artifacts!&lt;/p&gt;
&lt;p&gt;Here’s our Binder talk:&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/KcC0W5LP9GM" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="pearc"&gt;
&lt;h2&gt;PEARC&lt;/h2&gt;
&lt;p&gt;PEARC is a scientific and research computing conference held each year. It’s
interesting because it exists at the intersection of a few different communities.
As the scientific world has become more “data-intensive”, new parts of the academy
overlap with technical infrastructure that was traditionally just for physics/
astronomy/simulation kinds of folks. PEARC is (sort of) where a lot of “old school”
and “new school” parts of research infrastructure intersect.&lt;/p&gt;
&lt;section id="lots-of-high-performance-computing-centers-use-jupyterhub"&gt;
&lt;h3&gt;Lots of high-performance computing centers use JupyterHub&lt;/h3&gt;
&lt;p&gt;Perhaps the most exciting thing I noticed was how much chatter is in the HPC
world around JupyterHub on high-performance compute. I think this makes sense,
since JupyterHub provides an interface people are familiar with, and obviates
the need to be a skilled computer scientist just to interact with high-performance
hardware.  In particular, the &lt;a class="reference external" href="https://www.msi.umn.edu/"&gt;Minnesota Supercomputing Institute&lt;/a&gt;
and the &lt;a class="reference external" href="http://www.nersc.gov/"&gt;National Energy Research Scientific Computing Center&lt;/a&gt;
showed some promising examples of providing access to large-scale compute via an
interactive environment that was hosted by JupyterHub.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="hpc-centers-are-curious-about-kubernetes"&gt;
&lt;h3&gt;HPC centers are curious about Kubernetes&lt;/h3&gt;
&lt;p&gt;There was also a lot of talk about Kubernetes at the conference, though it was
clear that many people simply didn’t have the experience with it to know whether
it was a “good” option or not. Systems administrators tend to be lower-case “c”
conservative when it comes to technology, and it seems that this community
is lagging behind the tech world by many years when it comes to the adoption
of “cloud” technologies. Hopefully we’ll see more experiments with Kubernetes
in the HPC world, and that people report back their experiences as this happens.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="research-computing-has-a-weird-relationship-with-cloud-companies"&gt;
&lt;h3&gt;Research computing has a weird relationship with cloud companies&lt;/h3&gt;
&lt;p&gt;A lot of research computing folks also expressed some combination of excitement
and hesitation at outsourcing their computing to large-scale cloud companies
(such as Google, Amazon, or Microsoft). On the one hand, paying Google to
run your compute means you can accomplish some things for less money. On the other,
it’s hard to avoid building an institutional dependency on a single company’s
technical infrastructure. Once you’ve got that 100 petabyte dataset hosted with
one company, it’ll probably be staying there for quite a long time. All the cloud
companies are offering “free” services to cool-sounding research projects right now,
but never forget that many of these companies have built business models on converting
“free-tier” customers into locked-in paying customers. A few HPC people shared
stories along the lines of “well they said it would be free to host our scientific
data, until they started sending us bills for it several years later.”&lt;/p&gt;
&lt;/section&gt;
&lt;section id="we-gave-a-jupyterhub-and-binderhub-on-kubernetes-tutorial"&gt;
&lt;h3&gt;We gave a JupyterHub and BinderHub on Kubernetes tutorial&lt;/h3&gt;
&lt;p&gt;Last week, Aaron Culich, Jessica Forde, Felix-Antoine Fortin, and I presented a
day-long tutorial on deploying JupyterHub and BinderHub with Kubernetes. You can
&lt;a class="reference external" href="https://bit.ly/pearc-2018-jhub"&gt;find a copy of our slides here&lt;/a&gt;. In particular, I’m
excited to see some improvement in the methods for deploying Kubernetes on
OpenStack. OpenStack is &lt;em&gt;much&lt;/em&gt; more common in scientific research, and exists
on pre-existing hardware. Deploying &lt;strong&gt;Kubernetes on OpenStack&lt;/strong&gt; would open up this
technology to the academic community in a way that won’t happen with cloud
companies any time soon. In particular, Felix shared &lt;a class="reference external" href="https://github.com/etiennedub/terraform-binderhub"&gt;Etienne’s terraform scripts
to deploy Kubernetes on OpenStack&lt;/a&gt;.
I’d love to see people try this out and report back their experiences.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="open-source-alliance-for-open-scholarship"&gt;
&lt;h2&gt;Open Source Alliance for Open Scholarship&lt;/h2&gt;
&lt;p&gt;Finally, I attended &lt;a class="reference external" href="https://osaos.org/convening-the-community-looking-towards-the-future/"&gt;a meeting in New York
City&lt;/a&gt; organized
by &lt;a class="reference external" href="https://osaos.org/about-us/"&gt;OSAOS&lt;/a&gt;. What’s OSAOS? My take is that it’s an
organization dedicated to building connections, best-practices, and leadership
between organizations in open scholarship (AKA, organizations that operate on
open principles with a goal of creating and sharing knowledge). More than anything,
I am thrilled to see more interest in the “soft skills” side of open communities.
It’s easy to treat all of these things as technical projects, but in my experience
the biggest challenges are social and systemic, and won’t be solved with code.
However, leaders of open groups are often isolated, underappreciated, and don’t
have a lot of training in how to lead communities and projects. It’s great to see
organizations such as OSAOS trying to improve this!&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://chrisholdgraf.com/blog/2018/conferences-summer-2018/" rel="alternate"/>
    <summary>This is a short update on several of the conferences and workshops over the
summer of this year. There’s all kinds of exciting things going on in open
source and open communities, so this is a quick way for me to collect my
thoughts on some things I’ve learned this summer.Pangeo is a project that provides
access to a gigantic geosciences dataset. They use lots of tools in the
open-source community, including Dask for efficient numerical computation,
the SciPy stack for a bunch of data analytics, and JupyterHub on
Kubernetes for managing user instances and deploying on remote infrastructure.
Pangeo has a neat demo of their hosted JupyterHub instance that people can use
to access this otherwise-inaccessible dataset! See their video from SciPy below.</summary>
    <category term="communities" label="communities"/>
    <category term="conferences" label="conferences"/>
    <category term="jupyter" label="jupyter"/>
    <category term="python" label="python"/>
    <published>2018-08-01T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://chrisholdgraf.com/blog/2018/circle-docs/</id>
    <title>Using CircleCI to preview documentation in Pull Requests</title>
    <updated>2018-10-16T00:00:00+00:00</updated>
    <content type="html">&lt;section id="using-circleci-to-preview-documentation-in-pull-requests"&gt;

&lt;p&gt;Writing documentation is important - it’s the first point of contact between many users and your
project, and can be a pivotal moment in whether they decide to adopt your tech or become a contributor.&lt;/p&gt;
&lt;p&gt;However, it can be a pain to iterate on documentation, as it is often involves a lot of rapid iteration
locally, followed by a push to GitHub where you “just trust” that the author has done a good job of
writing content, design, etc.&lt;/p&gt;
&lt;p&gt;A really helpful tip here is to use Continuous Integration to build and preview your documentation. This
allows you to generate a link to the build docs, which is a much better way of reviewing than looking at
the raw text.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="../_images/sphinx-circle-logos.png" /&gt;&lt;/p&gt;
&lt;p&gt;Here’s a simple CircleCI configuration that you can use to build documentation with Sphinx and store it
as an artifact in the build that you can then preview. To set this up, follow these steps:&lt;/p&gt;
&lt;section id="configure-circleci"&gt;
&lt;h2&gt;Configure CircleCI&lt;/h2&gt;
&lt;p&gt;First off, you need to configure CircleCI to build your page. This involves creating a file called &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;.circle/config.yml&lt;/span&gt;&lt;/code&gt;
that Circle will use to decide what to do each time your page is built. You then need to go to the CircleCI
website and tell it to build your site.&lt;/p&gt;
&lt;p&gt;Here’s a skeleton configuration that will build the documentation with Sphinx:&lt;/p&gt;
&lt;div class="highlight-yaml notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;2&lt;/span&gt;
&lt;span class="nt"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;# Define a &amp;quot;build_docs&amp;quot; job to be run with Circle&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;build_docs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;# This is the base environment that Circle will use&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;docker&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;circleci/python:3.6-stretch&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;# Get our data and merge with upstream&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;sudo apt-get update&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;checkout&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;# Update our path&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;echo &amp;quot;export PATH=~/.local/bin:$PATH&amp;quot; &amp;gt;&amp;gt; $BASH_ENV&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;# Restore cached files to speed things up&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;restore_cache&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;cache-pip&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;# Install the packages needed to build our documentation&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;# This will depend on your particular package!&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pip install --user sphinx_rtd_theme sphinx pytest memory_profiler recommonmark sphinx_copybutton jupyterhub&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;# Cache some files for a speedup in subsequent builds&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;save_cache&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;key&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;cache-pip&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;paths&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;~/.cache/pip&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;# Build the docs&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Build docs to store&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;|&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="no"&gt;cd doc&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="no"&gt;make html&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;# Tell Circle to store the documentation output in a folder that we can access later&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;store_artifacts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;doc/_build/html/&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;destination&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;html&lt;/span&gt;

&lt;span class="c1"&gt;# Tell CircleCI to use this workflow when it builds the site&lt;/span&gt;
&lt;span class="nt"&gt;workflows&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;2&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;build_docs&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;See the comments above for what each step does.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="tell-circleci-to-build-pull-requests-for-your-repository"&gt;
&lt;h2&gt;Tell CircleCI to build Pull Requests for your repository&lt;/h2&gt;
&lt;p&gt;Because we’re doing this in order to preview changes to the documentation in a Pull Request,
we now need to tell CircleCI to run builds on PRs to your repo. To do so, go to the CircleCI UI, click on “Jobs”, then click
your project name, then click the settings button here:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="../_images/sphinx-circle-settings.png" /&gt;&lt;/p&gt;
&lt;p&gt;In the next page, click on &lt;strong&gt;Advanced Settings&lt;/strong&gt;, and finally switch on &lt;strong&gt;Build forked pull requests&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Now, Circle will build against the PRs of your repository.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="make-a-pull-request"&gt;
&lt;h2&gt;Make a Pull Request&lt;/h2&gt;
&lt;p&gt;Now it’s time to test things out. Make a Pull Request for your repository. GitHub should automatically
detect a CircleCI configuration, and run the job with the configuration you’ve specified.&lt;/p&gt;
&lt;p&gt;Once the documentation is built (or if it fails) you can click on the CircleCI link from the GitHub UI
in order to see what happened.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="../_images/sphinx-circle-github-pr.png" /&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;section id="view-your-artifacts"&gt;
&lt;h2&gt;View your artifacts&lt;/h2&gt;
&lt;p&gt;You should be taken to a page that shows a summary of the recent CircleCI build for this PR.&lt;/p&gt;
&lt;p&gt;If your documentation successfully built (and if you’ve told Sphinx to put the built site in &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;doc/_build/&lt;/span&gt;&lt;/code&gt;) then
you can now click on the &lt;strong&gt;Artifacts&lt;/strong&gt; tab. You should see a drop-down list of artifacts that CircleCI has
stored for you. Click on &lt;strong&gt;index.html&lt;/strong&gt; and you should see a preview of your built documentation:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="../_images/sphinx-circle-artifacts.png" /&gt;&lt;/p&gt;
&lt;p&gt;And that’s it! Obviously you can configure CircleCI in many more ways, but this is just a barebones example
to get you started. I hope you’ve found it useful!&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://chrisholdgraf.com/blog/2018/circle-docs/" rel="alternate"/>
    <summary>Writing documentation is important - it’s the first point of contact between many users and your
project, and can be a pivotal moment in whether they decide to adopt your tech or become a contributor.However, it can be a pain to iterate on documentation, as it is often involves a lot of rapid iteration
locally, followed by a push to GitHub where you “just trust” that the author has done a good job of
writing content, design, etc.</summary>
    <category term="documentation" label="documentation"/>
    <category term="sphinx" label="sphinx"/>
    <published>2018-10-16T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://chrisholdgraf.com/blog/2018/rust_governance/</id>
    <title>I like Rust’s governance structure</title>
    <updated>2018-10-18T00:00:00+00:00</updated>
    <content type="html">&lt;section id="i-like-rust-s-governance-structure"&gt;

&lt;p&gt;Recently I’ve been reading up on governance models for several large-ish open
source projects. This is partially because I’m involved in a bunch of
these projects myself, and partially because it’s fascinating to see distributed groups
of people organizing themselves in effective (or not) ways on the internet.&lt;/p&gt;
&lt;section id="why-is-governance-in-open-projects-important"&gt;
&lt;h2&gt;Why is governance in open projects important?&lt;/h2&gt;
&lt;p&gt;Governance is tricky, because there is an inherent tension between:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Being able to make important, complex, or sensitive decisions quickly&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Being transparent and inclusive in the decision-making process&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For most companies and organizations, the above is (sort-of) solved with a relatively
hierarchical decision-making structure. The “Chief Executive Officer” can
decide high-level directions for the whole company. The team manager can
define the priorities for the group.&lt;/p&gt;
&lt;p&gt;This generally isn’t the case in open-source, where nobody is beholden to the
opinion of anybody else. In this case, leading and decision-making are done
by persuading others and building coalitions. The effects of this difference often
aren’t felt in the early days of an open-source project, when the team is
small, everybody knows one another, and developers often have the same perspective.
However, as a project grows in its size and complexity, it becomes more important
to create an organizational structure that recognizes, manages, and &lt;em&gt;leverages&lt;/em&gt; that complexity.&lt;/p&gt;
&lt;p&gt;So, this is why I like Rust’s governance model.&lt;/p&gt;
&lt;p&gt;I won’t go into detail about what “Rust” is, except to say that it’s an open-source
language that has had a lot of support from the Mozilla foundation. In this case,
I’m less interested in the specific technical pieces of that project, and want
to focus on the people and the organizations in it.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Rust teams" src="../_images/2018-10-19-rust_logo.png" /&gt;&lt;/p&gt;
&lt;p&gt;Here’s the challenge that the Rust community faces:&lt;/p&gt;
&lt;p&gt;Because Rust is an open-source language, it has a lot of technical pieces to it that
are very diverse in the kinds of demands they have. People working on low-level kernel
implementation will have a different perspective from those designing libraries for
the language. Moreover, because this language is used by many organizations, there’s
a strong diversity in the type of user that make up the Rust community. A open-source
lead in a company has a different incentive structure than a researcher at a university.&lt;/p&gt;
&lt;p&gt;This means that a single decision-making body would&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;have most of its members unable
to make strong technical decisions about most of the sub-communities within Rust (e.g.,
a libraries and APIs person making decisions about kernel implementations).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;would be susceptible to inertia in decision-making because of the size needed to represent
all of the Rust community with a single group of people.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;would probably be skewed towards one set of decisions over another (since whoever was
most powerful within this group would set the “agenda” for the whole project)&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So, here are two ways that Rust tries to address this problem:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Divide the governance structure into sub-teams and a “core” team.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use an explicit “Request for Comments” process to handle all non-trivial decisions.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I’ll describe each of these as I understand them so far:&lt;/p&gt;
&lt;/section&gt;
&lt;section id="the-rust-governance-structure-sub-teams-and-communities"&gt;
&lt;h2&gt;The Rust Governance structure - sub-teams and communities&lt;/h2&gt;
&lt;p&gt;The Rust governance structure is based on the idea that most decisions should
not need to be escalated to the highest decision-making authority in the community.
Moreover, these decisions need to be made by people with a keen understanding of the
details of the problem. Finally, these problems are &lt;em&gt;not just technical in nature&lt;/em&gt;, but
also span community operations, organization, communication, etc.&lt;/p&gt;
&lt;p&gt;So, Rust is divided into sub-teams that are broken down by topic. By my count, there are
&lt;strong&gt;15 teams&lt;/strong&gt; in total. Each team is tasked with a specific &lt;strong&gt;responsibility&lt;/strong&gt; to
oversee in the Rust community. For example, the &lt;em&gt;language team&lt;/em&gt; is responsible for
&lt;em&gt;designing new language features&lt;/em&gt;. The &lt;em&gt;release team&lt;/em&gt; is responsible for
&lt;em&gt;tracking regressions, stabilizations, and producing Rust releases&lt;/em&gt;. The &lt;em&gt;community team&lt;/em&gt;
is responsible for &lt;em&gt;coordinating events, outreach, commercial users, teaching materials, and exposure&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.rust-lang.org/en-US/team.html"&gt;Here is a page with all the Rust teams&lt;/a&gt; (and their
members).&lt;/p&gt;
&lt;p&gt;&lt;img alt="Rust teams" src="../_images/2018-10-19-rust_teams.png" /&gt;&lt;/p&gt;
&lt;p&gt;My favorite thing about this structure is that roles within the Rust community are
&lt;strong&gt;explicitly stated&lt;/strong&gt; and people performing those roles are &lt;strong&gt;explicitly credited&lt;/strong&gt; with
that work. You may notice that a lot of the teams that are listed involve work that is
&lt;strong&gt;not&lt;/strong&gt; releasing features of Rust, or writing code. This kind of work is crucial for a
community to grow, but is often unrecognized or underappreciated (which has all kinds of
implications for diversity and inclusion, but that’s another conversation).&lt;/p&gt;
&lt;p&gt;OK, so these teams exist, but do they actually do? That takes us to the second part:&lt;/p&gt;
&lt;/section&gt;
&lt;section id="the-rust-request-for-comments-process"&gt;
&lt;h2&gt;The Rust “Request for Comments” process&lt;/h2&gt;
&lt;p&gt;All significant design changes in the Rust community are &lt;strong&gt;not&lt;/strong&gt; be submitted directly
as a PR to the codebase. Instead, Rust has &lt;a class="reference external" href="https://github.com/rust-lang/rfcs"&gt;a separate repository&lt;/a&gt; called &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;rfcs&lt;/span&gt;&lt;/code&gt;. This
repository manages the process by which Rust sub-teams decide whether to support the high-level
design of a feature. It’s a process to make a decision about whether something is worth doing (note here that
when I say “feature” I don’t just mean code. In fact, the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;rfcs&lt;/span&gt;&lt;/code&gt; process &lt;em&gt;itself&lt;/em&gt; was
an &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;rfc&lt;/span&gt;&lt;/code&gt; at one point). Here’s how it works:&lt;/p&gt;
&lt;p&gt;If someone wants to make a change within the Rust community, they must make a Pull Request
to the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;rfcs&lt;/span&gt;&lt;/code&gt; repository that proposes this change. They &lt;a class="reference external" href="https://github.com/rust-lang/rfcs/blob/master/0000-template.md"&gt;fill out a template&lt;/a&gt; (in markdown)
that covers things like “why should this change be made?”, “what is this change?”, “what
are the alternatives?”, “what happens if we do nothing?” etc.&lt;/p&gt;
&lt;p&gt;This person fills out the form and submits a Pull Request. At this point, one of the members
of the sub-team associated with the topic of the PR is assigned to be the &lt;strong&gt;shephard&lt;/strong&gt; of the RFC.
This simply means that their job is to ensure the conversation moves forward in a
transparent and inclusive manner. They are &lt;em&gt;not&lt;/em&gt; tasked with deciding or implementing the feature.&lt;/p&gt;
&lt;p&gt;Once the PR is made, the pull request enters an “open comments” period where people can
discuss the proposal. Often this results in modifications to the PR as new ideas come up
and old ideas get refined. Throughout this process, the shephard’s responsibility is to keep
things moving forward productively.&lt;/p&gt;
&lt;p&gt;Once a member of the sub-team (usually the shephard) believes that enough discussion has
happened, they call for a “final comments”
period. This is their formal statement that “we’re ready to make a decision, so speak now or
forever hold your peace”. If no &lt;em&gt;major&lt;/em&gt; new concerns are brought up, the sub-team associated
with the RFC then must reach a consensus about whether to &lt;em&gt;merge&lt;/em&gt; or &lt;em&gt;close&lt;/em&gt; the PR. If the
PR is merged, then the Rust community has now officially “supported the idea” &lt;em&gt;in theory&lt;/em&gt;. Often
this is just the beginning of the hard work, and specific implementations get hashed out in the
PR to the codebase.&lt;/p&gt;
&lt;p&gt;This process is about giving &lt;em&gt;more power to the Rust sub-teams&lt;/em&gt;. In fact,
&lt;a class="reference external" href="https://github.com/rust-lang/rfcs#sub-team-specific-guidelines"&gt;sub-teams can also modify this RFC process for their own purposes&lt;/a&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="how-do-these-teams-stay-on-the-same-page"&gt;
&lt;h2&gt;How do these teams stay on the same page?&lt;/h2&gt;
&lt;p&gt;One question you may have from all of this is “how does the Rust community stay cohesive
when all the teams are making decisions on their own?”. That’s what the &lt;strong&gt;core team&lt;/strong&gt; is
for. In short, the core team is &lt;em&gt;at least&lt;/em&gt; made up of leaders from each of the sub-teams
within Rust. The job of the core team is to have a &lt;em&gt;global&lt;/em&gt; perspective on the Rust
community. They make decisions about &lt;em&gt;values&lt;/em&gt; that Rust uses in making decisions, and high-level goals that the community should pursue. They also perform project-wide decision making such
as creating (or shutting down) specific sub-teams.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="wrapping-up"&gt;
&lt;h2&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;I like the Rust community governance structure because it is flexible, transparent, and explicit.&lt;/p&gt;
&lt;p&gt;It’s flexible because this structure treats the complexity of Rust as a feature, not a bug.
By giving decision-making power to the sub-teams within the community, they’re recognizing
the unique perspective those teams bring to the table, and credit them with the ability to
make the right decision over their domains.&lt;/p&gt;
&lt;p&gt;The governance structure is explicit in that it formally defines roles in the Rust
community so it’s clear “who is responsible for what”. Note that many of these roles
are of a non-technical nature. These are often “glossed over” in other projects, but they
are a crucial part of building an open community.&lt;/p&gt;
&lt;p&gt;Finally, the RFC process is transparent in that all discussion happens in the open (on the Pull Request).
Moreover, it is also explicit because there’s a clearly-stated process for how these
decisions happen. This curbs the possibility that decisions will be seen as made in “back-room”
conversations and builds trust in the process.&lt;/p&gt;
&lt;p&gt;Over the next few weeks I’ll keep exploring the Rust community’s structure because I think
it’s fascinating. Some questions that I’ve still got are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;What does it look like when sub-teams make decisions that span the whole community?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Is there tension between the core team and individual community members (because there’s
an extra layer of bureaucracy in the sub-teams)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How do they ensure that these teams are comprised of stakeholders from different perspectives?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What’s going wrong with this structure? What are the downsides?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Who decides the membership of the teams? How do the grow / shrink / disappear?&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If anybody has thoughts or comments on the above, I’d love to hear them!&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://chrisholdgraf.com/blog/2018/rust_governance/" rel="alternate"/>
    <summary>Recently I’ve been reading up on governance models for several large-ish open
source projects. This is partially because I’m involved in a bunch of
these projects myself, and partially because it’s fascinating to see distributed groups
of people organizing themselves in effective (or not) ways on the internet.Governance is tricky, because there is an inherent tension between:Rust teams</summary>
    <category term="community" label="community"/>
    <category term="governance" label="governance"/>
    <category term="python" label="python"/>
    <published>2018-10-18T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://chrisholdgraf.com/blog/2018/kinds-of-openness/</id>
    <title>How do projects signal how “open” they are?</title>
    <updated>2018-10-26T00:00:00+00:00</updated>
    <content type="html">&lt;section id="how-do-projects-signal-how-open-they-are"&gt;

&lt;p&gt;How do open projects signal their “openness” to the outside community? This is
a really hard question, particularly because nowadays “open” has become a buzzword
that doesn’t just signal a project’s position to the community, but is also used
as a marketing term to increase support, users, or resources.&lt;/p&gt;
&lt;p&gt;I was thinking about this the other day, so decided to take to twitter:&lt;/p&gt;
&lt;p&gt;{% twitter https://twitter.com/choldgraf/status/1054478362209480704 %}&lt;/p&gt;
&lt;p&gt;I was surprised at how much this question resonated with people. Here are a few
highlights from the (very interesting) conversation that came out of that question.&lt;/p&gt;
&lt;section id="some-discussion-threads"&gt;
&lt;h2&gt;Some discussion threads&lt;/h2&gt;
&lt;section id="wishes-vs-reality"&gt;
&lt;h3&gt;Wishes vs. reality&lt;/h3&gt;
&lt;p&gt;Tal immediately brought up a really important point: many projects &lt;em&gt;want&lt;/em&gt; to be
inclusive and welcoming to others, but they don’t have time to do so.&lt;/p&gt;
&lt;p&gt;{% twitter https://twitter.com/talyarkoni/status/1054484496769314818 %}&lt;/p&gt;
&lt;p&gt;I think this is an important distinction, and something that should be signaled
clearly. One the one hand, if a person generally wants others to contribute to
the project, then they’re some degree of openness higher than a project that
actively discourages this.&lt;/p&gt;
&lt;p&gt;On the other hand, running open projects &lt;em&gt;does take work&lt;/em&gt;,
and a project that says “well I’d like to be open but can’t commit the time to do it”
also isn’t &lt;em&gt;that&lt;/em&gt; open in practice. No hard feelings there, but I think that
the goal of defining a “degree of openness” isn’t to signal a value judgment on the
people related to the project, but on the project itself. If you really want to
grow an open community around a project, you need to dedicate time and resources to
the community itself, not just the technical pieces of the tool.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="metrics-of-openness"&gt;
&lt;h2&gt;Metrics of openness&lt;/h2&gt;
&lt;p&gt;That leaves open the question: “how do we measure the &lt;strong&gt;practical&lt;/strong&gt; openness of a project,
rather than just what it &lt;strong&gt;says&lt;/strong&gt;?”. A few folks mentioned that the CHAOSS project
does a lot of work in this gneeral space:&lt;/p&gt;
&lt;p&gt;{% twitter https://twitter.com/abbycabs/status/1054492219808403457 %}&lt;/p&gt;
&lt;p&gt;CHAOSS defines standards for metrics to collect about communities. They don’t necessarily
say what others should &lt;strong&gt;do&lt;/strong&gt; with those metrics, so perhaps that’s on the open community
to define for themselves.&lt;/p&gt;
&lt;p&gt;Personally, I’d love to see more tooling that makes it possible to scrape activity
statistics from open repositories. Tal and others suggested a few things:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;time to initial response to new issues (maybe separated by new vs. old contributors)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;inequality coefficient for contributor commits&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;number of unique organizations/email domains in contrbutors&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;use of positive/welcoming language&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;explicit roles defined, and pathways towards working more with the community&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I’d love to see more thoughts along these lines. If we could define a collection of
metrics around openness, it’d paint a much more rich picture than simply “does this
project have a permissive license.”&lt;/p&gt;
&lt;p&gt;There was also a specific metric around governance that’s worth highlighting:&lt;/p&gt;
&lt;p&gt;{% twitter https://twitter.com/GeorgLink/status/1054621070945329152 %}&lt;/p&gt;
&lt;p&gt;The paper linked above is a study that investigated “open governance” in a number of
open-source mobile projects. It’s an interesting exploration of the ways that
decision-making is made (and signaled) in several projects. Perhaps unsurprisingly, they
conclude that “more open” projects are most-likely to be successful in the long term
(with a few exceptions).&lt;/p&gt;
&lt;p&gt;Finally, apparently there’s also a “badge” to signal the status of a repository (is it
active, vaporware, abandoned, etc):&lt;/p&gt;
&lt;p&gt;{% twitter https://twitter.com/parente/status/1055053470808580098 %}&lt;/p&gt;
&lt;p&gt;I’d love to see more of these semi-automated signals to help guide the open source community
in deciding what projects to adopt and contribute to. As more and more people do
their work online and in the open, it also creates a challenge of sifting through the noise
to make the most of your (limited) time and energy. Having better metrics like these will
make these decisions easier.&lt;/p&gt;
&lt;section id="mozilla-s-archetypes-of-open-projects"&gt;
&lt;h3&gt;Mozilla’s archetypes of open projects&lt;/h3&gt;
&lt;p&gt;One of the most fascinating links I found was Mozilla’s “archetypes of open projects”
document:&lt;/p&gt;
&lt;p&gt;{% twitter https://twitter.com/neuromusic/status/1054517145436975104 %}&lt;/p&gt;
&lt;p&gt;Briefly, this is an internal document that Mozilla made public. It attempts to define
the different kinds of open projects that exist. Importantly, it also explains the
value propositions of each, how it can be used strategically within an organization, and
how it supports (or doesn’t) an open community around it.&lt;/p&gt;
&lt;p&gt;I added some thoughts about how Project Jupyter fits into these archetypes on the
&lt;a class="reference external" href="https://github.com/jupyter/governance/issues/60#issuecomment-432766439"&gt;Jupyter governance research issue&lt;/a&gt;
and I’d love to think more about how these archetypes fit into the pre-existing open communities
that are out there. If anybody wants to brainstorm how these archetypes fit into the scientific
open community, I’d love to chat :-)&lt;/p&gt;
&lt;p&gt;On that note, I want to give a brief shout-out to Mozilla in general, which has
either conducted or sponsored a bunch of interesting work in open projects.
For example, they have a whole wiki dedicated to working openly:&lt;/p&gt;
&lt;p&gt;{% twitter https://twitter.com/alex__morley/status/1054483982040121344 %}&lt;/p&gt;
&lt;p&gt;and they also run lots of training and community programs such as the
&lt;a class="reference external" href="https://foundation.mozilla.org/opportunity/mozilla-open-leaders/"&gt;Mozilla Open Leaders&lt;/a&gt; program.
Project Jupyter is in this year’s cohort and &lt;a class="reference external" href="https://github.com/jupyter/governance/issues/57"&gt;keeping track of its progress here&lt;/a&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="importance-of-ethnography"&gt;
&lt;h3&gt;Importance of ethnography:&lt;/h3&gt;
&lt;p&gt;A final note on the importance of ethnography:&lt;/p&gt;
&lt;p&gt;{% twitter https://twitter.com/mmmpork/status/1054745690897711104 %}&lt;/p&gt;
&lt;p&gt;For all of my talk about metrics above, I’ve come to appreciate that numbers
are &lt;strong&gt;never&lt;/strong&gt; sufficient to describe the complexities of a community or group.
Over the last several years at the &lt;a class="reference external" href="https://bids.berkeley.edu"&gt;Berkeley Institute for Data Science&lt;/a&gt;,
I’ve had the pleasure of working with several ethnographers who have shared their
perspective on how to study communities. Semi-automatically-calculated numbers can
be a great way to see relatively coarse-level view of a community, but if you really
wany to understand what’s going on, you need to dig in there, conduct qualitative interviews,
operate in the community, and create some stories that back up (or not) the quantitative
data that you collect. We’d all be better off if there were more ethnographers in our
respective communities &amp;lt;3.&lt;/p&gt;
&lt;p&gt;OK, that’s enough for now - I hope these links are useful and I’ll try to
update them over time if I hear of some new projects along these lines.
If you have any suggestions, feel free to leave ‘em in the comments!&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://chrisholdgraf.com/blog/2018/kinds-of-openness/" rel="alternate"/>
    <summary>How do open projects signal their “openness” to the outside community? This is
a really hard question, particularly because nowadays “open” has become a buzzword
that doesn’t just signal a project’s position to the community, but is also used
as a marketing term to increase support, users, or resources.I was thinking about this the other day, so decided to take to twitter:</summary>
    <category term="community" label="community"/>
    <category term="governance" label="governance"/>
    <category term="opensource" label="open source"/>
    <published>2018-10-26T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://chrisholdgraf.com/blog/2018/my-workflow/</id>
    <title>My weekly workflow</title>
    <updated>2018-10-26T00:00:00+00:00</updated>
    <content type="html">&lt;section id="my-weekly-workflow"&gt;

&lt;p&gt;I’ve had a bunch of conversations with friends who were interested in how to
keep track of the various projects they’re working on, and to prioritize their
time over the course of a week. I thought it might be helpful to post my own
approach to planning time throughout the week in case it’s useful for others to
riff off of.&lt;/p&gt;
&lt;section id="general-principles"&gt;
&lt;h2&gt;General principles&lt;/h2&gt;
&lt;p&gt;First off, a few general principles that I use to guide my thinking on planning
out the week.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Be intentional.&lt;/strong&gt; This seems obvious, but I find that if I don’t explicitly define
what I want to work on, I have more of those “where the heck did the day go” kinds
of weeks.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Be strategic.&lt;/strong&gt; There are only so many hours in the day, which means that I need to be
careful about what I commit to spending time on. I try to figure out what are the most
important things to do, and ensure I make space for this work before other stuff.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Be (conservatively) realistic.&lt;/strong&gt; I often get too optimistic with my time and energy levels.
Sometimes you’re tired, sometimes you get distracted, sometimes new work pops up you didn’t
account for. For this reason, I only budget about &lt;strong&gt;20 hours of diligent work a week&lt;/strong&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Be flexible.&lt;/strong&gt; Finally, don’t worry about following the plan obsessively. Use it as a guide,
not a set of chains. If it’s worth re-prioritizing, that’s fine!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Be diligent.&lt;/strong&gt; That said, whenever the plans &lt;em&gt;do&lt;/em&gt; change, make sure that this is written down
somewhere so that I know I’m being intentional about it.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
&lt;section id="what-tools-do-i-use"&gt;
&lt;h2&gt;What tools do I use?&lt;/h2&gt;
&lt;p&gt;OK so what does this process actually look like? Here’s a general approach:&lt;/p&gt;
&lt;p&gt;I use &lt;a class="reference external" href="https://trello.com/"&gt;&lt;strong&gt;Trello&lt;/strong&gt;&lt;/a&gt; for managing most of the projects that I work on each week. For those who aren’t familiar,
Trello is a web app that lets you organize “cards” into vertical lists. It’s useful for Kanban-style
project management, and is super popular in technical circles.&lt;/p&gt;
&lt;p&gt;I use two kinds of Trello boards, “project” boards, and my “weekly” board.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="project-boards"&gt;
&lt;h2&gt;Project boards&lt;/h2&gt;
&lt;p&gt;Project boards are project-specific. They’re organized in four primary columns.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Info&lt;/strong&gt; has cards with information about that project. For example, links, notes, attachments, etc.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;ToDo&lt;/strong&gt; has cards representing tasks that I’ll do eventually. These tend to be more abstract and
will evolve over time.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Next&lt;/strong&gt; has cards representing actionable tasks that I’ll do soon.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Doing&lt;/strong&gt; is a special list that I’ll explain later. It’s where cards go when I’m working on them currently.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The other major component of the projcet board is a collection of “Done” lists. At the end of each
week, and cards that are finished get moved into a list named like so: &lt;strong&gt;Done - Week NN&lt;/strong&gt; where “NN” is the
number of the current week.&lt;/p&gt;
&lt;p&gt;I keep a short-list of currently-active projects that I’m working on. These are “starred” and show up at
the top of the Trello board list to the left.&lt;/p&gt;
&lt;p&gt;Here’s an example of a project board:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="../_images/trello-board-project.png" /&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;section id="weekly-board"&gt;
&lt;h2&gt;Weekly board&lt;/h2&gt;
&lt;p&gt;The other major Trello board that I use is my “weekly” board. This is basically a to-do list for my week.
It’s got one list per project, and each card represents a to-do item for that project. There is one-to-one
mapping between lists in this board and project boards that the cards come from.&lt;/p&gt;
&lt;p&gt;As I work on cards throughout the week, I move them into another list called “Done”. Once the card is there,
it means that I’ve finished that task for the week.&lt;/p&gt;
&lt;p&gt;An additional component is that each card is assigned a number of &lt;strong&gt;hours needed to complete the card&lt;/strong&gt;.
I try to keep the total number of hours on this board to &amp;lt;= 20. I’ve found that this is a realistic
balance between “enough hours to actually get stuff done” and “not so many hours that I won’t finish them”.&lt;/p&gt;
&lt;p&gt;To assign and keep track of the hours with each card, I use a chrome extension called &lt;a class="reference external" href="https://chrome.google.com/webstore/detail/plus-for-trello-time-trac/gjjpophepkbhejnglcmkdnncmaanojkf?hl=en"&gt;&lt;strong&gt;Plus for Trello&lt;/strong&gt;&lt;/a&gt;. This
adds fields for “estimated” and “spent” hours that I update over the week.&lt;/p&gt;
&lt;p&gt;Here’s an example of a weekly board:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="../_images/trello-board-active.png" /&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;section id="how-does-this-work-in-practice"&gt;
&lt;h2&gt;How does this work in practice?&lt;/h2&gt;
&lt;p&gt;I use a tool called &lt;a class="reference external" href="https://butlerfortrello.com/"&gt;&lt;strong&gt;Butler for Trello&lt;/strong&gt;&lt;/a&gt; (BFT) to manage how cards flow through this system.
Lets you automate various tasks in Trello by writing messages that it parses as instructions.&lt;/p&gt;
&lt;p&gt;Remember that “Doing” list that I mentioned in each project board? Any time I move a card into
a “Doing” list on a project board, the following happens:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;BFT adds a custom field to the card that has the Project Board ID that it came from&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;BFT moves the card to the “weekly” board, to a list with the same name as the project board&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Moreover, remember that there was a “Done” list in my weekly board? That also does something
special. I have a BFT link that, whenever clicked, does the following:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Loop through every card in the “Done” list&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For each card, find the Board ID that represents the board the card came from&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Move the card to that board, put it in a “Done” list that is automatically created using the
number of the current active week.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, the general flow of cards through this system looks like this:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Create cards in a project board that represent things to be done.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When it’s time to work on a task, move it to the “Doing” list&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;BFT moves that card to my “Weekly” board, to a list w/ the project name&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This happens at the beginning of the week, along with an estimation of the time needed for
each card.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;As the week progresses, I mark off the hours that I’ve spent on each card.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When the card’s hours remaining reaches 0, I move it to the “Done” list&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;At the end of the week, I click my “board cleanup” link, and it returns each card to its
original project board.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next week, I repeat this cycle.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And that’s about it - I’ve found that this process is a nice way to keep both a high-level
view of what needs to be done for my various projects (on each project board). It also allows
my to dig into specific to-do items throughout the week (on my weekly board).&lt;/p&gt;
&lt;p&gt;I’d love to hear feedback and thoughts about how other people manage their time throughout
the week! Hopefully some of you all find this useful.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="extras"&gt;
&lt;h2&gt;Extras&lt;/h2&gt;
&lt;p&gt;Butler for Trello commands can be a little bit difficult to compose. Below I’ll post the
two main commands that I use to handle all the card-moving described above.&lt;/p&gt;
&lt;section id="the-weekly-board"&gt;
&lt;h3&gt;The weekly board&lt;/h3&gt;
&lt;p&gt;The weekly board has a “butler” list where the command is defined in a card (that’s how
you define board-specific BFT commands). Here’s the command:&lt;/p&gt;
&lt;p&gt;{% raw %}&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;script&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;each&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Return&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;remove&lt;/span&gt; &lt;span class="nb"&gt;all&lt;/span&gt; &lt;span class="n"&gt;labels&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;move&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Returned | Week &lt;/span&gt;&lt;span class="si"&gt;{weeknumber}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;board&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;{{&lt;/span&gt;&lt;span class="si"&gt;%ho&lt;/span&gt;&lt;span class="s2"&gt;meboard}}&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;move&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Returned | Week &lt;/span&gt;&lt;span class="si"&gt;{weeknumber}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;board&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;{{&lt;/span&gt;&lt;span class="si"&gt;%ho&lt;/span&gt;&lt;span class="s2"&gt;meboard}}&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;position&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;clear&lt;/span&gt; &lt;span class="n"&gt;custom&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;homeboard&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;{% endraw %}&lt;/p&gt;
&lt;/section&gt;
&lt;section id="a-global-command-for-project-boards"&gt;
&lt;h3&gt;A global command for project boards&lt;/h3&gt;
&lt;p&gt;I also use a global BFT command that moves the cards from each project board to the weekly
board when the card is moved to the “Doing” category.&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;when&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;added&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Doing&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt; &lt;span class="n"&gt;me&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt; &lt;span class="n"&gt;custom&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;homeboard&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{boardlink}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;move&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;card&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;top&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{boardname}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;board&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Active&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;move&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{boardname}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt; &lt;span class="n"&gt;board&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Active&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;position&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://chrisholdgraf.com/blog/2018/my-workflow/" rel="alternate"/>
    <summary>I’ve had a bunch of conversations with friends who were interested in how to
keep track of the various projects they’re working on, and to prioritize their
time over the course of a week. I thought it might be helpful to post my own
approach to planning time throughout the week in case it’s useful for others to
riff off of.First off, a few general principles that I use to guide my thinking on planning
out the week.</summary>
    <category term="productivity" label="productivity"/>
    <published>2018-10-26T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://chrisholdgraf.com/blog/2018/free-labor-partners/</id>
    <title>Open communities need to be partners, not sources of free labor</title>
    <updated>2018-12-05T00:00:00+00:00</updated>
    <content type="html">&lt;section id="open-communities-need-to-be-partners-not-sources-of-free-labor"&gt;

&lt;p&gt;In the last couple of years, we’ve seen an increasing number of organizations start to
spawn products that take a largely open stack (e.g., the SciPy ecosystem) and wrap
it in a thin layer of proprietary/custom interface + infrastructure.
On the face of it, this isn’t a problem - I really want people to be able to
make money using the open source stack - however, there is a big caveat. When you look
at the work that those organizations have done over time, you often see a pretty thin trail
of contributions &lt;em&gt;back&lt;/em&gt; to those open source projects.&lt;/p&gt;
&lt;p&gt;I’d argue that using an open community’s software without contributing back is straight-up
exploitative (legal, sure, but still exploitative), and we should think about ways to
suppress this kind of behavior. This post is a collection of thoughts on that topic.&lt;/p&gt;
&lt;p&gt;But first….&lt;/p&gt;
&lt;section id="why-should-i-care-whether-i-m-being-a-good-citizen-in-the-open-community"&gt;
&lt;h2&gt;Why should I care whether I’m being a “good citizen in the open community”?&lt;/h2&gt;
&lt;p&gt;Organizations are driven by incentives, and ultimately if a behavior isn’t conducive
to the organization’s bottom-line, then we can’t expect them to adopt that behavior.
I’d argue that interacting with the open community has a number of bottom-line benefits, here are a few:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;It makes you a more attractive place to work&lt;/strong&gt;. Operating in open communities is
often where people learn their technical skills, and while people come and go through
organizations, the open community remains. Employees want to interact in these communities,
and employers that have a good relationship with open communities are more attractive
places to work.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Open communities can be a great training resource&lt;/strong&gt;. Have some improvements to make in
your Python or R skills? Need to tool-up on your ability to write CI/CD pipelines? Open
communities are a great place to get feedback and guidance from others with more experience.
The open community is a resource for constantly tooling-up your technical skills. Use it!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Open communities can make better team-members&lt;/strong&gt;. Making complex technical/social decisions
with a diverse community distributed across the world is really difficult! For the communities
that do this well, interacting with them can be a fantastic learning experience in team-work,
communication, coalition-building, critical feedback, and leadership.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Interacting with open communities gives you influence&lt;/strong&gt;. If you’re using an open
tool, don’t you want to have a say in how that tool grows and evolves? Being a passive consumer
of open technology means you’re at the whim of that community’s wishes. If you’re a &lt;em&gt;part&lt;/em&gt; of
that community, you can influence its direction to align with your organization’s goals.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Interacting with open communities means you write less code&lt;/strong&gt;. I suspect that in the long-term,
writing your own code will almost cost more than using somebody else’s code (in terms of
person-hours it requires). If you’ve got a say in an open project, you minimize the chance that
you must either maintain an internal fork w/ significant changes, or create your own new thing
that you must now maintain on your own.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Interacting with open communities can make them more robust&lt;/strong&gt;. Finally, let’s not forget
that communities can and do fail all the time. What happens if a project you depend on
stops making bug fixes? Or doesn’t have bandwidth to maintain security patches? By contributing
resources to these communities, we keep them thriving and healthy creators of open-source
tools. We all benefit from this, and more importantly you don’t have a dead project that your
core product or teams depend on.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Those are just a few benefits, but I’m sure there are others. For more information and ideas about
how open source communities can be a benefit to your organization, I recommend Mozilla’s
&lt;a class="reference external" href="https://blog.mozilla.org/wp-content/uploads/2018/05/MZOTS_OS_Archetypes_report_ext_scr.pdf"&gt;Open Source Archetypes&lt;/a&gt;
research paper.&lt;/p&gt;
&lt;p&gt;Now that we’ve got that out
of the way, let’s move on to deciding whether or not your organization is, in fact, being
a positive actor in the open-source community.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="how-can-i-tell-if-my-organization-is-not-being-a-good-citizen-in-the-open-community"&gt;
&lt;h2&gt;How can I tell if my organization is not being a good citizen in the open community?&lt;/h2&gt;
&lt;p&gt;I suspect that many organizations simply haven’t put a ton of thought into whether they’ve got a positive-or-negative
relationship with the open communities that intersect with their work. Here’s a quick set of questions
to ask yourself:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Do your employees routinely use open-source software in their work?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Does your organization create a product that depends on open-source software?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Does your organization depend on proprietary software that depends on open-source software?&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you answered “yes” to any of those questions, then ask yourself the following questions:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Do you have explicit policies that encourage employees to contribute back to open projects?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Do you have explicit funding mechanisms to give resources to open projects?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Do you explicitly call out and acknowledge the importance of those open tools in your presentations and (some kinds of) marketing?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Do you have regular, open channels of communication with those open communities?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Do these behaviors scale with the amount of value you derive from open communities?&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you answered “no” to these questions, then you’re probably exploiting the open community.
You should stop that!&lt;/p&gt;
&lt;p&gt;However, avoiding this kind of one-way relationship with the open source community is complex
and requires some new efforts and thinking from both sides of the equation.
The rest of this post includes a few ideas on how open projects, as well as organizations,
can improve this relationship.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="how-can-open-communities-encourage-organizations-to-be-good-citizens"&gt;
&lt;h2&gt;How can open communities encourage organizations to be good citizens&lt;/h2&gt;
&lt;p&gt;How can the open community encourage better interactions
with organizations that depend on our tools?&lt;/p&gt;
&lt;p&gt;First off, I think these are &lt;em&gt;not&lt;/em&gt; problems that we should have to solve with licensing [1]
. These are &lt;strong&gt;social&lt;/strong&gt;, &lt;strong&gt;moral&lt;/strong&gt;, and &lt;strong&gt;incentives&lt;/strong&gt; problems.
There are plenty of organizations that make money from open-source, but that still
manage to spend time being part of the communities that they draw value from. How do we encourage this
kind of behavior? I have a few ideas, but we should spend more time thinking about this:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Open communities need more ways to signal “thank you” to organization that behave well&lt;/strong&gt;. For
example, the Kubernetes community runs a &lt;a class="reference external" href="http://stackalytics.com/?project_type=kubernetes-group&amp;amp;metric=commits"&gt;service called stackalytics&lt;/a&gt;
that lists contributions broken down by company. It would be great to adapt this kind of visualization
for the broader OSS community. More generally, “thank-you”s should be for specific behavior, and it should be clear whether that behavior is a one-off or is on-going. Organizations are incentive-driven, so we should create more
positive incentives for them to interact.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Open communities need a better vocabulary to describe bad behavior when it exists&lt;/strong&gt;. I’ve had
a number of conversations with folks that are frustrated when an organization uses their tool without
giving back. These people often feel like there is no medium through which they can “call-out” the
offending organization without sounding “whiny”, and so they internalize this stress. If there were a way to
quickly describe what this behavior is, it could be easier for people to call it when they see it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Open communities need to make it clear &lt;em&gt;how&lt;/em&gt; organizations can get involved&lt;/strong&gt;. This is a two-way street.
While we need more participation from organizations making products or services around open-source, we also
need to position our open communities so that there are clear pathways for interaction and contribution.
Things like roadmaps, clear community governance, and well-tuned practices around encouraging outsiders to
join the community would go a long way.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Funding bodies should consider open-source participation when giving out money&lt;/strong&gt;. Perhaps this one only
applies to some sub-fields, but private philanthropies or public funding bodies (like the NSF) should consider
a project’s intersection with the pre-existing open community when deciding whether to fund a project.
If you propose creating a new tool, you should be required to do due-diligence on other tools in that space,
and explain why you won’t just contribute to those communities instead of building your own. If you propose
building a product off of open-source software, you should have a plan for how you’ll contribute back to those
communities. Saying that you’ll open-source your code and throw it over the wall is &lt;em&gt;not enough&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
&lt;section id="what-could-organizations-do-now-to-support-open-communities"&gt;
&lt;h2&gt;What could organizations do now to support open communities?&lt;/h2&gt;
&lt;p&gt;All of the steps above are fairly long-term solutions to a problem that exists right now. What are some things
that organizations can do now in order to make sure they’re perceived as more positive actors in open communities?
Here’s a short “off the top of my head” list.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;If you’re an employee, find allies and &lt;strong&gt;pressure management to support open-source software&lt;/strong&gt;. Often, organizations
contribute to open source only because employees make a case for it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you’re at management-level, &lt;strong&gt;create space for your employees to contribute to open-source software&lt;/strong&gt;. They’ll
be happier employees (OSS is a gratifying experience), you’ll have more say in the tools you use, and you’ll be
a more attractive place to work for developers.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you’re at the executive / strategic level, &lt;strong&gt;incorporate an open-source strategy in your business plan&lt;/strong&gt;. Open source
can be an incredible resource if harnessed properly. Your organization will be better off in the long term if you treat
open communities as partners rather than sources of free labor.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you’re creating a new open-source tool, &lt;strong&gt;write a justification for why you’re creating a new thing, instead of contributing to an existing thing&lt;/strong&gt;.
Sometimes there’s a great reason not to jump on-board with a pre-existing tool. However, you need to signal that you’ve
thought hard about this, and recognize the downside to creating yet-another open source tool when alternatives exist.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you’ve got a product that directly uses open-source, &lt;strong&gt;have an open-source plan for giving back&lt;/strong&gt;. Signal to the
community what you’re doing to say “thank you” for all of the value you’re getting from the open community. Maybe it’s
people’s time to contribute back, maybe it’s money, maybe it’s marketing for OSS communities.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Write an annual “contributing back to open source” report&lt;/strong&gt; that details the ways you’ve contributed back. It’ll highlight your organization’s role as a leader in this space, and signal the value that these tools provide for you.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;That’s it for now, though as you can probably tell, this is a complex topic with a lot of nuance. If you’ve got any thoughts of your own, feel free to leave a comment below, or &lt;a class="reference external" href="https://twitter.com/choldgraf"&gt;reach out to me on twitter&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;[1] A note on licenses&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When I talk about this stuff, people often mention &lt;strong&gt;copyleft&lt;/strong&gt; licenses as an option. Basically,
this means releasing something under a permissive license, with the caveat that nobody else can
change the license to be less-permissive. I think this is a reasonable step to take if you &lt;em&gt;really&lt;/em&gt; want to
curb this kind of bad behavior. However, it’s also a blunt instrument. I &lt;strong&gt;want&lt;/strong&gt; organizations to be
able to make money using open-source software, and I think copyleft licenses may reduce a lot of
the fluid, open practices that make open-source such a powerful force in our society.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Many thanks to &lt;a class="reference external" href="https://twitter.com/yuvipanda"&gt;Yuvi Panda&lt;/a&gt;, &lt;a class="reference external" href="https://twitter.com/betatim"&gt;Tim Head&lt;/a&gt;, and &lt;a class="reference external" href="https://twitter.com/HammanHydro"&gt;Joe Hamman&lt;/a&gt; for comments on iterations of this post&lt;/em&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://chrisholdgraf.com/blog/2018/free-labor-partners/" rel="alternate"/>
    <summary>In the last couple of years, we’ve seen an increasing number of organizations start to
spawn products that take a largely open stack (e.g., the SciPy ecosystem) and wrap
it in a thin layer of proprietary/custom interface + infrastructure.
On the face of it, this isn’t a problem - I really want people to be able to
make money using the open source stack - however, there is a big caveat. When you look
at the work that those organizations have done over time, you often see a pretty thin trail
of contributions back to those open source projects.I’d argue that using an open community’s software without contributing back is straight-up
exploitative (legal, sure, but still exploitative), and we should think about ways to
suppress this kind of behavior. This post is a collection of thoughts on that topic.</summary>
    <category term="opencommunities" label="open communities"/>
    <category term="openculture" label="open culture"/>
    <category term="sustainability" label="sustainability"/>
    <published>2018-12-05T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://chrisholdgraf.com/blog/2018/circlci-github/</id>
    <title>Automatically mirror a github repository with CircleCI</title>
    <updated>2018-12-18T00:00:00+00:00</updated>
    <content type="html">&lt;section id="automatically-mirror-a-github-repository-with-circleci"&gt;

&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;tl;dr: you can automatically mirror the contents of one repository to another by
using CI/CD services like CircleCI. This post shows you one way to do it using
secrets that let you push to a GitHub repository from a CircleCI process.&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;We recently ran into an issue with the Data 8 course where we needed to mirror
one GitHub site to another. In short, the textbook is built with a tool called
&lt;a class="reference external" href="https://chrisholdgraf.com/jupyter-book/intro.html"&gt;jupyter-book&lt;/a&gt;, and we use &lt;a class="reference external" href="https://pages.github.com/"&gt;github-pages&lt;/a&gt;
to host the content at &lt;a class="reference external" href="https://inferentialthinking.com"&gt;inferentialthinking.com&lt;/a&gt;.
For &lt;a class="reference external" href="https://help.github.com/articles/custom-domain-redirects-for-github-pages-sites/"&gt;weird URL-naming reasons&lt;/a&gt;,
we had to create &lt;a class="reference external" href="https://github.com/inferentialthinking/inferentialthinking.github.io"&gt;a second organization&lt;/a&gt;
to host the actual site. This introduced the complexity that any time the textbook
had to be updated, we did so in &lt;em&gt;two&lt;/em&gt; different places. The raw textbook content
is hosted at https://github.com/data-8/textbook, and the version hosted online is
at https://github.com/inferentialthinking/inferentialthinking.github.io.&lt;/p&gt;
&lt;p&gt;This is a pain, because now a person has to take several actions across two repositories
any time we update the textbook content. But not anymore! Now we use CirleCI to automatically deploy an update to
inferentialthinking.com any time a change is made to data-8/textbook. Here
are the steps to do it.&lt;/p&gt;
&lt;p&gt;In these steps, we’ll have two repositories, one with the “primary” repository
we want to keep, and one with the “mirror” repository that should always contain
exactly the content of the “primary” repo. I’ll call these “primary” and “mirror”
repos from here on out (no, I won’t call them master and slave but that’s a whole
other conversation).&lt;/p&gt;
&lt;section id="what-we-want-to-do"&gt;
&lt;h2&gt;What we want to do&lt;/h2&gt;
&lt;p&gt;Ultimately, we’d like the following thing to happen:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;&lt;strong&gt;Whenever a change is pushed to the “primary” repository, CircleCI should push
those changes to the “mirror” repository.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Since CircleCI already lets you run semi-arbitrary code, this is relatively
straightforward, with one big caveat: permissions. GitHub doesn’t let &lt;em&gt;anybody&lt;/em&gt;
push to &lt;em&gt;any&lt;/em&gt; repository, so we need some way to allow CircleCI to push to
our mirror repository. That’s what these steps are all about.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="step-1-create-an-ssh-key-for-your-mirror-github-repository"&gt;
&lt;h2&gt;Step 1: Create an SSH key for your mirror github repository&lt;/h2&gt;
&lt;p&gt;First off, we need to tell the mirror repository “you should let anyone with
these credentials push to the repo”. We’ll do this by creating a “deploy key”.
This is a SSH public/private key pair that, when combined, will allow anybody
to push to your repository. &lt;strong&gt;If anybody has the private key, they have push access
to your repo&lt;/strong&gt;, so keep the private key safe!&lt;/p&gt;
&lt;p&gt;First, create a new public/private key pair with this command (in a *nix system):&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ssh&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;keygen&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;when it asks for a passphrase, simply hit enter twice&lt;/strong&gt;. This makes the passphrase empty.&lt;/p&gt;
&lt;p&gt;This generates two files in your home directory:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;key.txt&lt;/span&gt;&lt;/code&gt; is your private key. You &lt;strong&gt;should not share this w/ others&lt;/strong&gt; unless you know what you’re doing.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;key.txt.pub&lt;/span&gt;&lt;/code&gt; is your public key. You can share this w/ others.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="step-2-add-this-ssh-key-as-a-deploy-key-to-your-mirror-repo"&gt;
&lt;h2&gt;Step 2: Add this SSH key as a “deploy key” to your mirror repo&lt;/h2&gt;
&lt;p&gt;In your github repository, go to &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;settings&lt;/span&gt; &lt;span class="pre"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pre"&gt;deploy&lt;/span&gt; &lt;span class="pre"&gt;keys&lt;/span&gt; &lt;span class="pre"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pre"&gt;add&lt;/span&gt; &lt;span class="pre"&gt;deploy&lt;/span&gt; &lt;span class="pre"&gt;key&lt;/span&gt;&lt;/code&gt;. See the diagram below for the steps:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="../_images/circleci-mirror-deploy-key-ui.png" /&gt;&lt;/p&gt;
&lt;p&gt;When you click &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;add&lt;/span&gt; &lt;span class="pre"&gt;deploy&lt;/span&gt; &lt;span class="pre"&gt;key&lt;/span&gt;&lt;/code&gt;, it’ll open an interface for you to add the &lt;em&gt;public&lt;/em&gt; key for the
deployment permissions. Copy the text of your &lt;strong&gt;public key&lt;/strong&gt; (at &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;~/key.txt.pub&lt;/span&gt;&lt;/code&gt;) and paste it in the window like so:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="../_images/circleci-deploy-key-ssh.png" /&gt;&lt;/p&gt;
&lt;p&gt;Remember, this is the &lt;strong&gt;public&lt;/strong&gt; key for your repository. This means that anyone
with the &lt;strong&gt;private&lt;/strong&gt; key will now be able to push to the repo.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="step-3-set-up-circleci-for-your-primary-repository"&gt;
&lt;h2&gt;Step 3: Set up CircleCI for your “primary” repository&lt;/h2&gt;
&lt;p&gt;Next, we need to set up CircleCI to build our primary repository with continuous integration.
I recommend following the &lt;a class="reference external" href="https://circleci.com/docs/2.0/getting-started/"&gt;CircleCI getting started guide&lt;/a&gt;.
Once you follow this, CircleCI will automatically generate new builds for your repository following the configuration
you specify in &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;.circleci/config.yml&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here’s a good start for a config.yml file:&lt;/p&gt;
&lt;div class="highlight-yaml notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;2&lt;/span&gt;
&lt;span class="nt"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;build&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;branches&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;only&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;# Tell Circle only to build this branch&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;gh-pages&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;docker&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;# Any Docker image should do, since we only need git&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;circleci/python:3.6-stretch&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;# This ensures that the working directory contains the contents of your repo&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;checkout&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;# We&amp;#39;ll add more steps here&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Next, we’ll configure that yaml file to do what we want.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="step-4-configure-circleci-to-push-the-primary-repository-to-the-mirror-repository"&gt;
&lt;h2&gt;Step 4: Configure CircleCI to push the primary repository to the mirror repository&lt;/h2&gt;
&lt;p&gt;Now that CircleCI is building the primary repo, it’s time to tell it to do what we want.
We’ll modify the workflow in the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;.circleci/config.yml&lt;/span&gt;&lt;/code&gt; file to do the following:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;add the mirror repository as a git remote&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;push the latest copy of &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;master&lt;/span&gt;&lt;/code&gt; from the primary repository to the mirror repository
(the latest version of the primary repository is already in the CircleCI build because of the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;-&lt;/span&gt; &lt;span class="pre"&gt;checkout&lt;/span&gt;&lt;/code&gt; command).&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here’s the piece of configuration to do do this:&lt;/p&gt;
&lt;div class="highlight-yaml notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;2&lt;/span&gt;
&lt;span class="nt"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;build&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;# Push to the inferentialthinking.github.io repository so it goes live&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;git remote add live_textbook git@github.com:inferentialthinking/inferentialthinking.github.io.git&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Updating inferentialthinking website&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;git push live_textbook gh-pages:master&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now we’re telling CircleCI to push to our mirror repository, but
you’ll notice that it won’t be able to complete this action. This is because CircleCI doesn’t
currently have the &lt;strong&gt;permissions&lt;/strong&gt; needed to push to the mirror repository.
Time to use that public/private key from before!&lt;/p&gt;
&lt;/section&gt;
&lt;section id="step-5-add-your-private-key-to-the-primary-repository-circle-ci-settings"&gt;
&lt;h2&gt;Step 5: Add your private key to the primary repository Circle CI settings&lt;/h2&gt;
&lt;p&gt;Next, we need to give CircleCI the ability to push to our mirror
repository by using the public/private key that we generated earlier. Remember
that anybody with the &lt;strong&gt;private&lt;/strong&gt; key can push to your mirror
repository. We can add the private key in a secure fashion to our
CircleCI builds using their interface. Go to the &lt;em&gt;settings&lt;/em&gt;
page for your repository within CircleCI, then &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;SSH&lt;/span&gt; &lt;span class="pre"&gt;Permissions&lt;/span&gt; &lt;span class="pre"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="pre"&gt;Add&lt;/span&gt; &lt;span class="pre"&gt;SSH&lt;/span&gt; &lt;span class="pre"&gt;Key&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="../_images/circleci-add-ssh-ui.png" /&gt;&lt;/p&gt;
&lt;p&gt;This brings up a dialog where you can add your &lt;strong&gt;private&lt;/strong&gt; key. This is the text
inside &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;~/key.txt&lt;/span&gt;&lt;/code&gt;. Copy that text and paste it in the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Private&lt;/span&gt; &lt;span class="pre"&gt;Key&lt;/span&gt;&lt;/code&gt; box.&lt;/p&gt;
&lt;p&gt;In the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Hostname&lt;/span&gt;&lt;/code&gt; box, put &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;github.com&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="../_images/circleci-private-key-entry.png" /&gt;&lt;/p&gt;
&lt;p&gt;Now that CircleCI has our private key, we need to configure it to
use this key during builds.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I’d recommend now deleting the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;key.txt&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;key.txt.pub&lt;/span&gt;&lt;/code&gt; files from your computer,
just to make sure they don’t accidentally fall in the wrong hands&lt;/strong&gt;. You can always generate
a new public/private pair and follow the steps above if you need to update the CircleCI deploy
keys.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="step-6-modify-your-circleci-configuration-to-use-your-private-key"&gt;
&lt;h2&gt;Step 6: Modify your CircleCI configuration to use your private key&lt;/h2&gt;
&lt;p&gt;Finally, we need to modify the yaml configuration so that it knows to use this
public/private key combination when it does SSH stuff in the build. That’s accomplished
with the following configuration:&lt;/p&gt;
&lt;div class="highlight-yaml notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;build&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;# Add deployment key fingerprint for CircleCI to use for a push&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;add_ssh_keys&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;fingerprints&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="c1"&gt;# The SSH key fingerprint&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;XX:XX:XX:XX:XX:XX:XX:XX:XX:XX:XX:XX:XX:XX:XX:XX&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The SSH key fingerprint can be found by looking at your GitHub repository’s “Deploy Keys”
page. It’ll contain a SHA that is unique and refers to the key you want. Copy and paste
it using the configuration structure above. Here’s what one key looks like:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="../_images/circleci-fingerprint.png" /&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;section id="our-final-configuration"&gt;
&lt;h2&gt;Our final configuration&lt;/h2&gt;
&lt;p&gt;That should be all we need to allow CircleCI to push the contents from the primary repository
to the mirror repository. Every time a change is made to the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;master&lt;/span&gt;&lt;/code&gt; branch of the primary
repository, this process will be triggered.&lt;/p&gt;
&lt;p&gt;This is what our final yaml configuration looks like:&lt;/p&gt;
&lt;div class="highlight-yaml notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;2&lt;/span&gt;
&lt;span class="nt"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;build&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;# Only build for changes to the gh-pages branch&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;branches&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;only&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;gh-pages&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;# The base environment we&amp;#39;ll use (can be any docker image w/ git)&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;docker&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;circleci/python:3.6-stretch&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;# Move the repository code to our home directory in the CircleCI build&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;checkout&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;# Add deployment key fingerprint for CircleCI to use for a push&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;add_ssh_keys&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;fingerprints&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;XX:XX:XX:XX:XX:XX:XX:XX:XX:XX:XX:XX:XX:XX:XX:XX&amp;quot;&lt;/span&gt;

&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;# Add the mirror repository as a git remote&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;git remote add live_textbook git@github.com:inferentialthinking/inferentialthinking.github.io.git&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;# Push the repository to the mirror site&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Updating inferentialthinking website&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;git push live_textbook gh-pages:master&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://chrisholdgraf.com/blog/2018/circlci-github/" rel="alternate"/>
    <summary>tl;dr: you can automatically mirror the contents of one repository to another by
using CI/CD services like CircleCI. This post shows you one way to do it using
secrets that let you push to a GitHub repository from a CircleCI process.We recently ran into an issue with the Data 8 course where we needed to mirror
one GitHub site to another. In short, the textbook is built with a tool called
jupyter-book, and we use github-pages
to host the content at inferentialthinking.com.
For weird URL-naming reasons,
we had to create a second organization
to host the actual site. This introduced the complexity that any time the textbook
had to be updated, we did so in two different places. The raw textbook content
is hosted at https://github.com/data-8/textbook, and the version hosted online is
at https://github.com/inferentialthinking/inferentialthinking.github.io.</summary>
    <category term="CICD" label="CICD"/>
    <category term="productivity" label="productivity"/>
    <published>2018-12-18T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://chrisholdgraf.com/blog/2019/2019-01-29-three-things-circleci/</id>
    <title>Three things I love about CircleCI</title>
    <updated>2019-01-29T00:00:00+00:00</updated>
    <content type="html">&lt;section id="three-things-i-love-about-circleci"&gt;

&lt;p&gt;I recently had to beef up the continuous deployment of Jupyter Book, and used
it as an opportunity to learn a bit more about CircleCI’s features. It turns out,
they’re pretty cool! Here are a few of the things that I learned this time around.&lt;/p&gt;
&lt;p&gt;For those who aren’t familiar with CircleCI, it is a service that runs Continuous
Integration and Continuous Deployment (CI/CD) workflows for projects. This basically
means that they manage many kinds of infrastructure that can launch jobs that run
test suites, deploy applications, and test on many different environments.&lt;/p&gt;
&lt;p&gt;Here are some cool things that I now have a much better appreciation for:&lt;/p&gt;
&lt;section id="re-run-a-job-with-ssh-access"&gt;
&lt;h2&gt;Re-run a job with SSH access&lt;/h2&gt;
&lt;p&gt;Often when tests don’t pass or a build otherwise fails, it’s really helpful to be
able to get into the machine itself and just start poking around. It turns out that
CircleCI makes this really easy! If a build has failed, then you can use the drop-down
menu next to the “Restart Job” button to select “Restart Job with SSH”. The next time
the job fails (which it probably will, since you’ve just restarted a job that already
failed once), CircleCI will print the IP address and SSH command to connect to that
machine remotely.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="persisting-files-between-jobs-with-workspaces"&gt;
&lt;h2&gt;Persisting files between jobs with Workspaces&lt;/h2&gt;
&lt;p&gt;Everything CircleCI does is based around containers - each job has a Docker image
environment specified (and CircleCI curates a large list of containers for testing).
One challenge this introduces is that it can be more complex to use jobs that have
&lt;em&gt;multiple&lt;/em&gt; languages or tools installed. You can always manually configure this, but
I’ve found that another easy solution is to split your task across multiple jobs,
and persist some of the files between them with CircleCI workspaces.&lt;/p&gt;
&lt;p&gt;To set up a CircleCI workspace, you first need two jobs, then&lt;/p&gt;
&lt;div class="highlight-yaml notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;build_files&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;docker&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;# We use a Python image to test our files and run the test suite&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;circleci/python:3.6-stretch&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;# Some steps to build files we need in another job&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;# Assume it places the built files into a folder called `_build/`&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;build_stuff_with_python&lt;/span&gt;

&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;# Persist the specified paths (see https://circleci.com/docs/2.0/workflows/#using-workspaces-to-share-data-among-jobs)&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;persist_to_workspace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="c1"&gt;# The root of the workspace, here just the CWD&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;root&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;.&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="c1"&gt;# The sub-paths of the workspace to persist&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;paths&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;_build/&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;deploy_files&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;docker&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;# We&amp;#39;ll use a Ruby image to deploy our files&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;circleci/ruby:2.6&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;# Connect the files from the last job to this job&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;attach_workspace&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="c1"&gt;# Must be absolute path or relative path from working_directory&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;at&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;/tmp/workspace&lt;/span&gt;

&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;# Our final deployment steps&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;deploy_files_with_ruby&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Finally, we’ll set up a CircleCI workflow that runs the deployment job only after the
build job as finished, since the deploy job depends on files that are created by the
build job.&lt;/p&gt;
&lt;div class="highlight-yaml notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;workflows&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;2&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;build_files&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;deploy_files&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;requires&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;build_files&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In this way, we’ve split our task (build a bunch of files, then deploy them online)
into two different jobs. One that builds files with a Python container, and another that
deploys them with a Ruby container.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="re-use-code-snippets-with-commands"&gt;
&lt;h2&gt;Re-use code snippets with Commands&lt;/h2&gt;
&lt;p&gt;Finally, many times you’d like to re-use the same set of snippets across multiple
points of your CircleCI jobs. In 2.1, CircleCI added a new feature called Commands
that does this fairly simply. Commands are kind of like functions in that they
wrap up a collection of steps that can be re-used and parameterized. This means you
can define a “template” of a collection of steps, then fill-in missing fields in that
template in order to modify its behavior.&lt;/p&gt;
&lt;p&gt;For example, here’s a Command template to build a site with Jekyll:&lt;/p&gt;
&lt;div class="highlight-yaml notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;commands&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;build_site&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Build&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;the&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;site&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;with&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Jekyll&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;parameters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;# We&amp;#39;ll define one parameter that lets us pass build arguments to Jekyll build&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;build_args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;string&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Build the website&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="c1"&gt;# Note the &amp;lt;&amp;lt; parameters.param &amp;gt;&amp;gt; syntax that lets you define your own inputs&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;bundle exec jekyll build &amp;lt;&amp;lt; parameters.build_args &amp;gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now, we can re-use this command throughout our build steps. Here are two jobs that use
this command in different ways:&lt;/p&gt;
&lt;div class="highlight-yaml notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;# Build the site to store artifacts&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;build_with_params&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;# Build the site&amp;#39;s HTML w/ the base_url for CircleCI artifacts&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;build_site&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;build_args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;--baseurl /0/html/&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;# Build the site to store artifacts&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;build_without_params&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;# Build the site&amp;#39;s HTML w/ defaults for Jekyll&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;build_site&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;build_args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Each of these jobs uses the command specified above in &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;build_site&lt;/span&gt;&lt;/code&gt;, but
they use the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;build_args&lt;/span&gt;&lt;/code&gt; parameter to modify its behavior each time.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://chrisholdgraf.com/blog/2019/2019-01-29-three-things-circleci/" rel="alternate"/>
    <summary>I recently had to beef up the continuous deployment of Jupyter Book, and used
it as an opportunity to learn a bit more about CircleCI’s features. It turns out,
they’re pretty cool! Here are a few of the things that I learned this time around.For those who aren’t familiar with CircleCI, it is a service that runs Continuous
Integration and Continuous Deployment (CI/CD) workflows for projects. This basically
means that they manage many kinds of infrastructure that can launch jobs that run
test suites, deploy applications, and test on many different environments.</summary>
    <category term="CICD" label="CICD"/>
    <category term="devops" label="dev ops"/>
    <category term="softwaredevelopment" label="software development"/>
    <published>2019-01-29T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://chrisholdgraf.com/blog/2019/2019-03-16-jupyter-dev/</id>
    <title>Thoughts from the Jupyter team meeting 2019</title>
    <updated>2019-03-30T00:00:00+00:00</updated>
    <content type="html">&lt;p&gt;I just got back from a week-long Jupyter team meeting that was somehow both
very tiring and energizing at the same time. In the spirit of openness, I’d
like to share some of my experience. While it’s still fresh in my mind,
here are a few takeaways that occurred to me throughout the week.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note that these are my personal (rough) impressions, but they shouldn’t be taken as a
statement from the project/community itself.&lt;/em&gt;&lt;/p&gt;
&lt;section id="jupyter-has-a-huge-and-diverse-set-of-users"&gt;

&lt;p&gt;The first thing is probably unsurprising to many people, but was really driven
home at this meeting, is that there are &lt;strong&gt;so many&lt;/strong&gt; Jupyter users our there. These
people come from all different walks of life - some are at huge tech companies,
some are scientists, some are educators, some are students. Some are from western
countries but many are not, some have wealth, some do not. Jupyter
(notebooks, anyway…more on that in a second) has really caught fire across
a wide slice of society.&lt;/p&gt;
&lt;p&gt;This is both a great thing and a challenge. Appreciating the size of the Jupyter
user community also made me realize that many of these groups have different
motives and goals. Jupyter was originally born out of a mission to serve
scientists and educators, to create public goods,
and to be a democratizing technology that empowers
many different kinds of people in the world. I think Jupyter is still serving
this role, but that as the Jupyter user community has grown, the voices of
science and education may be getting smaller relative to the gigantic and
well-resourced community of “enterprise users”. I hope that we can find ways
to balance these interests in the project in a way that keeps Jupyter a
project for &lt;em&gt;all&lt;/em&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="jupyter-needs-to-grow-its-contributor-community"&gt;
&lt;h1&gt;Jupyter needs to grow its contributor community&lt;/h1&gt;
&lt;p&gt;While the &lt;em&gt;user-base&lt;/em&gt; of Jupyter is fairly large and complex, the community
of &lt;em&gt;contributors&lt;/em&gt; (people that help in issues, help grow the community, help others
use Jupyter, or contribute code to Jupyter tools) needs to grow. We have had a
relatively stable group of contributors in the Jupyter ecosystem, but I think
we need to foster more “organic” growth with others who jump in and become core parts
of the team. As an open project, we depend on the good-will and volunteer
time of others who want to join the community and participate. The fact that we
haven’t seen a steady growth in contributors (particularly from a pool of people
more diverse than the current contributors), tells me that we have a lot of work
to do in creating obvious pathways to connect with, and grow within, the Jupyter
community.&lt;/p&gt;
&lt;p&gt;We spent a morning session discussing diversity and inclusion, reading
&lt;a class="reference external" href="https://www.ncwit.org/sites/default/files/resources/10actionablewaysincreasediversitytech_openview.pdf"&gt;an excellent slideshow on 10 actionable steps to increase D+I&lt;/a&gt;.
It was a good reminder that recognizing systemic biases against certain groups
of people does not mean abdicating responsibility as an &lt;em&gt;individual&lt;/em&gt; to personally
create a more inclusive environment. A couple of particular points that I hope
we can make progress on in the coming months:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Have a moderator and an agenda for meetings&lt;/strong&gt;. Conduct meetings (in-person or remote)
with a moderator who builds a queue of
speakers and gives the floor to each of them in turn. While it’s easy to
treat an unstructured meeting as “informal and fun”, it also makes them significantly
less-productive and harder to participate for many. I really enjoyed reading
the article &lt;a class="reference external" href="https://chelseatroy.com/2018/04/05/how-do-we-make-remote-meetings-not-suck/"&gt;how to make remote meetings not suck&lt;/a&gt;
(SPOILER: the answer is to make &lt;strong&gt;all&lt;/strong&gt; meetings not suck by providing structure
and moderation). Taking small steps towards team processes that make meetings more
participatory and predictable would go a long way.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Make more active efforts to bring new+diverse members into
the community&lt;/strong&gt;. You can’t expect organic contributor growth from populations that
have very little representation on the project already. We need to continue
making &lt;em&gt;active&lt;/em&gt; efforts at engaging these communities and bringing in new people.
For example, we had a new team member join the meeting as part of an
&lt;a class="reference external" href="https://www.outreachy.org/"&gt;Outreachy internship&lt;/a&gt;, and I really appreciated their
perspective on many of the issues we discussed. Had we not taken these active steps
to bringing a new Jovyan into the community, those perspectives would never have been
shared at the meeting.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Create explicit roles and ways to contribute&lt;/strong&gt;. We also spoke at length about
the &lt;strong&gt;many&lt;/strong&gt; different things that must be done to have not only cycles of code
development, but also a healthy community around that code. Many times this work
is done in an unstructured and ad-hoc way. This is stressful for the people doing
the work (I often have no idea how much time I’ve sunk into responding to issues,
for example), and it also makes the project team more opaque to others who might
wish to join. If I am vaguely interested in contributing to JupyterHub, where
do I start? Some people have a clear path for how they could contribute, but I
suspect that there are many other ways that we can tell people “it would be
helpful if you do XXX”.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="the-jupyter-ecosystem-needs-better-explaining"&gt;
&lt;h1&gt;The Jupyter ecosystem needs better explaining&lt;/h1&gt;
&lt;p&gt;Another topic we discussed was the fact that Jupyter hasn’t clearly
explained its technology stack, how everything fits together, what problems
it’s meant to solve, and how it interfaces with the outside community. The
majority of people think of “Jupyter Notebooks” when they think of Jupyter,
but often don’t recognize that there are a lot of pieces under the hood as
well (e.g. the Notebook application is both a kernel / server architecture, an
underlying notebook document specification / format, and a particular notebook UI).&lt;/p&gt;
&lt;p&gt;Jupyter still has challenges in making other major projects more discoverable
(e.g. JupyterHub for sharing Jupyter environments on shared infrastructure,
or other user interfaces like Jupyter Lab or Nteract). Moreover, the project is
also starting to be picked up by companies and projects that
are fairly liberal with the use of the “Jupyter” name. Is your tool still
“a Jupyter Notebook interface” if it only has the ability to export to a
Jupyter Notebook, but uses no other Jupyter tech? I’m not sure - but either way,
there should be a clear answer to that question otherwise the project will
start to be defined by other people rather than itself.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="governing-open-projects-is-really-hard"&gt;
&lt;h1&gt;Governing open projects is really hard&lt;/h1&gt;
&lt;p&gt;Finally, something I’ve grown to appreciate more over the last year
is how difficult it is to balance decision-making, power, and participatory
community dynamics in a large, multi-stakeholder, open project like Jupyter.
There were a lot of conversations around the current governance model of
the project, and how this wasn’t currently serving the community in a satisfying
way. As the number of stakeholders in the project grows, their
needs may start to move in opposing directions. Keeping a project functional
and productive, while still balancing between these needs, is a massive task.&lt;/p&gt;
&lt;p&gt;This becomes particularly challenging when the stakeholders in the project have
differing levels of resources. For example, Jupyter has always been dedicated
to building tools for scientists and educators. However, these individuals are
often part of organizations with &lt;em&gt;vastly&lt;/em&gt; fewer resources than tech companies.
How can we ensure that the voices of these two groups have a balanced weight?
If company X decides they want to contribute a new feature the Jupyter
Notebook interface, and they put a team of 10 people on it, how does this team
interact with the decision-making processes of the Jupyter project? What if the
core maintainers are volunteers with limited time to review PRs? What if there are
disagreements between the company team’s internal mandate, and what is best for the
Jupyter community? Finally, what if there aren’t good channels of communication
and processes of decision-making that encourage nuanced, in-depth discussion to
facilitate the above points?&lt;/p&gt;
&lt;p&gt;From a company’s perspective, there’s always the option of going off and doing your
own thing. But Jupyter doesn’t have this option. In its current state, Jupyter’s resources
are contrained to the groups that decide to participate. To that extent, a few
things that we need to improve:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Make it easier for others to open new topics of discussion with
the Jupyter community in a “formal” decision-making process. I think
&lt;a class="reference external" href="https://github.com/jupyter/enhancement-proposals/issues/27"&gt;recent efforts to improve the Jupyter Enhancement Proposal&lt;/a&gt;
process are a great start. This should make it easier for stakeholders to voice
their concerns and needs in an open way that allows many in the community to
participate.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Find a way to avoid the “governance by resources” trap. Many open projects in the
tech community adopt a model like “you have decision-making power
that scales with the resources you devote to the project”. That’s fine if everybody
has a similar amount of resources, but many of Jupyter’s stakeholders don’t.
If we want members of the
educational and scientific/academic community to participate, or people that aren’t
represented in the current tech and data industry to participate, we need to find a
way that &lt;strong&gt;encourages the contribution of resources&lt;/strong&gt; from organizations that have
them, but that &lt;strong&gt;normalizes decision-making power&lt;/strong&gt; so that resources don’t guarantee
you a larger voice than others. Ultimately, the goal of the Jupyter project is
to create public goods that benefit everybody, and I fear we’ll lose sight of this
goal if you need to be able to fund a team of developers in order to participate
in the project.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Vest power in more systems and processes, rather than in individual people. Part of
the challenges currently facing Jupyter is that it began as a relatively small project
with a tight-knit team of developers that all knew each other. In that case, it made
sense to adopt a traditional BDFL+governing council kind of model. It’s now clear that
this model is inadequate at balancing the nuanced issues described above. Given the
complexity of Jupyter’s community, I think that we need to move away from thinking about
individual people as the sources of power, and instead think about a &lt;em&gt;system&lt;/em&gt; that
divides power in intentional ways, as well as a &lt;em&gt;process&lt;/em&gt; for how individuals can
move through that system in a way that addresses some of the concerns above.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So there are a few thoughts of my own, and I look forward to seeing how others feel
moving forward. There’s a lot happening in the Jupyter ecosystem,
and I’m excited to be a part of it.&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="https://chrisholdgraf.com/blog/2019/2019-03-16-jupyter-dev/" rel="alternate"/>
    <summary>I just got back from a week-long Jupyter team meeting that was somehow both
very tiring and energizing at the same time. In the spirit of openness, I’d
like to share some of my experience. While it’s still fresh in my mind,
here are a few takeaways that occurred to me throughout the week.Note that these are my personal (rough) impressions, but they shouldn’t be taken as a
statement from the project/community itself.</summary>
    <category term="community" label="community"/>
    <category term="jupyter" label="jupyter"/>
    <published>2019-03-30T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://chrisholdgraf.com/blog/2019/2019-06-25-a-few-talks/</id>
    <title>A few recent talks</title>
    <updated>2019-06-25T00:00:00+00:00</updated>
    <content type="html">&lt;section id="a-few-recent-talks"&gt;

&lt;p&gt;Lately I’ve given quite a number of talks about the Jupyter and Binder
ecosystems for various purposes. Before each of the talks, I make the
slides available at a public address in case others are interested in
following up with the material. For those who missed the talks (or the
subsequent tweets about them), here are a few of the more recent ones.&lt;/p&gt;
&lt;p&gt;A word of warning: there’s a lot of overlap between these talks - I’m not
crazy enough to re-invent the wheel each time I have to speak. However, maybe
folks will find some value in the different angles taken in each case.&lt;/p&gt;
&lt;section id="the-berkeley-data-8-stack-60-min"&gt;
&lt;h2&gt;The Berkeley Data 8 Stack (60 min)&lt;/h2&gt;
&lt;p&gt;This talk covers some of the technical infrastructure behind the pedagogical
efforts here at UC Berkeley. It’s a brief dive into JupyterHub distributions
and how they fit into an institution like UC Berkeley.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://bit.ly/2019-data8-jupyter"&gt;https://bit.ly/2019-data8-jupyter&lt;/a&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;section id="open-infrastructure-for-open-science-5-min"&gt;
&lt;h2&gt;Open infrastructure for open science (5 min)&lt;/h2&gt;
&lt;p&gt;This one was a quick overview of the Binder ecosystem for a community focused
mostly around reproducibility and publishing. Lots of action-items in here :-)&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://bit.ly/2019-elife-cc-holdgraf"&gt;https://bit.ly/2019-elife-cc-holdgraf&lt;/a&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;section id="reproducibility-with-binder-asm"&gt;
&lt;h2&gt;Reproducibility with Binder &amp;#64; ASM&lt;/h2&gt;
&lt;p&gt;This covers the Binder Project and the tools that it creates for open, reproducible
science. It was geared towards a less-technical audience than many of the
conferences I normally speak at. It covers more of a users’ perspective of mybinder.org,
and how this might fit into reproducible publishing.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://bit.ly/2019-ASM-jupyter"&gt;https://bit.ly/2019-ASM-jupyter&lt;/a&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;section id="reproducibility-with-binder-uw-reproducibility-workshop"&gt;
&lt;h2&gt;Reproducibility with Binder &amp;#64; UW Reproducibility workshop&lt;/h2&gt;
&lt;p&gt;This talk goes into more depth on the technical side of the reproducibility efforts
with Jupyter and Binder. It was given in the context of a &lt;a class="reference external" href="https://escience.washington.edu/writing-reproducible-executable-scientific-papers-with-r-python-a-hands-on-workshop/"&gt;two-day workshop on
reproducible environments and publishing&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://bit.ly/2019-uw-reproducibility-jupyter"&gt;https://bit.ly/2019-uw-reproducibility-jupyter&lt;/a&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;section id="binder-in-the-cloud-csvconf"&gt;
&lt;h2&gt;Binder in the cloud &amp;#64; csvconf&lt;/h2&gt;
&lt;p&gt;A broad overview of the Binder ecosystem and the technical stack that lies
underneath it, as well as a short aside on the composable, modular approach
that Jupyter takes towards building these tools&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://bit.ly/2019-binder-csvconf"&gt;https://bit.ly/2019-binder-csvconf&lt;/a&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;section id="jupyter-book-strada"&gt;
&lt;h2&gt;Jupyter Book &amp;#64; Strada&lt;/h2&gt;
&lt;p&gt;An overview of the &lt;a class="reference external" href="https://jupyter.org/jupyter-book"&gt;jupyter book project&lt;/a&gt;. This
covers the technical stack behind the tool that converts collections of
Jupyter Noteoboks into an HTML website book.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://bit.ly/2019-strada-jupyter-book"&gt;https://bit.ly/2019-strada-jupyter-book&lt;/a&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://chrisholdgraf.com/blog/2019/2019-06-25-a-few-talks/" rel="alternate"/>
    <summary>Lately I’ve given quite a number of talks about the Jupyter and Binder
ecosystems for various purposes. Before each of the talks, I make the
slides available at a public address in case others are interested in
following up with the material. For those who missed the talks (or the
subsequent tweets about them), here are a few of the more recent ones.A word of warning: there’s a lot of overlap between these talks - I’m not
crazy enough to re-invent the wheel each time I have to speak. However, maybe
folks will find some value in the different angles taken in each case.</summary>
    <category term="talks" label="talks"/>
    <published>2019-06-25T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://chrisholdgraf.com/blog/2019/2019-10-11-automating-jb/</id>
    <title>Automating Jupyter Book deployments with CI/CD</title>
    <updated>2019-10-11T00:00:00+00:00</updated>
    <content type="html">&lt;section id="automating-jupyter-book-deployments-with-ci-cd"&gt;

&lt;p&gt;Lately I’ve spent a lot of time trying to reduce the friction involved
in deploying Jupyter Book as well as contributing to the project.
Features are a great carrot, but ultimately getting engagement is also
about lowering barriers to entry and showing people a path forward.
Jupyter Book is a relatively straightforward project, but it involves
a few technical pieces that can be painful to use (thanks Jekyll).&lt;/p&gt;
&lt;p&gt;Recently I experimented with whether we can &lt;strong&gt;automate deploying a Jupyter Book online&lt;/strong&gt;.
Using continuous integration / deployment services seems like a natural place
to try this out. One can upload a barebones set of code to a GitHub repository,
then configure a build system to create a book and deploy it online from there.
This blog post is a place to keep track of the current state of affairs for this workflow.&lt;/p&gt;
&lt;p&gt;&lt;img alt="auto build logos" src="../_images/jb-auto-build.png" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I’ll publish the latest configuration files for this at &lt;a class="reference external" href="https://github.com/choldgraf/jupyter-book-deploy-demo/"&gt;this repository&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;section id="the-general-set-of-steps-involved"&gt;
&lt;h2&gt;The general set of steps involved&lt;/h2&gt;
&lt;p&gt;We’ll start with the simplest possible Jupyter Book configuration:
to have a single folder with a collection of content inside. The folder looks
like this:&lt;/p&gt;
&lt;div class="highlight-bash notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;.
├──&lt;span class="w"&gt; &lt;/span&gt;content
│&lt;span class="w"&gt;   &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;01&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;│&lt;span class="w"&gt;   &lt;/span&gt;├────&lt;span class="w"&gt; &lt;/span&gt;notebook1.ipynb
│&lt;span class="w"&gt;   &lt;/span&gt;│&lt;span class="w"&gt;   &lt;/span&gt;└────&lt;span class="w"&gt; &lt;/span&gt;notebook2.ipynb
│&lt;span class="w"&gt;   &lt;/span&gt;├──&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="m"&gt;02&lt;/span&gt;
&lt;span class="p"&gt;|&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;│&lt;span class="w"&gt;   &lt;/span&gt;├────&lt;span class="w"&gt; &lt;/span&gt;notebook3.ipynb
│&lt;span class="w"&gt;   &lt;/span&gt;│&lt;span class="w"&gt;   &lt;/span&gt;└────&lt;span class="w"&gt; &lt;/span&gt;mdfile4.md
...
&lt;span class="p"&gt;|&lt;/span&gt;
└──&lt;span class="w"&gt; &lt;/span&gt;configuration_files_for_cicd/
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;There’s no table of contents, and no configuration file (though we could add
these if we wish). If Jupyter Book is used to create a new book with some
content, but no TOC is given, it’ll automatically generate one.&lt;/p&gt;
&lt;p&gt;Our goal is to do the following in an automated fashion:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Build a new Jupyter Book template from this content folder (with &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;jupyter-book&lt;/span&gt; &lt;span class="pre"&gt;create&lt;/span&gt;&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Build page HTML for the book (with &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;jupyter-book&lt;/span&gt; &lt;span class="pre"&gt;build&lt;/span&gt;&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Generate the book’s site with Jekyll (with &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;bundle&lt;/span&gt; &lt;span class="pre"&gt;exec&lt;/span&gt; &lt;span class="pre"&gt;jekyll&lt;/span&gt; &lt;span class="pre"&gt;build&lt;/span&gt;&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Host the results somewhere online&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Below are attempts to do this with CI/CD. I’ll update this post
as new options become available (and hopefully push some stuff to
the Jupyter Book documentation).&lt;/p&gt;
&lt;/section&gt;
&lt;section id="netlify"&gt;
&lt;h2&gt;Netlify&lt;/h2&gt;
&lt;p&gt;By far the easiest way to accomplish the above is with the online
website provider &lt;a class="reference external" href="https://www.netlify.com"&gt;Netlify&lt;/a&gt;. This was my
first experience with the Netlify service, and I must say that I was
really pleased (thanks to &lt;a class="reference external" href="https://github.com/emdupre"&gt;Elizabeth DuPre&lt;/a&gt;
for the recommendation and &lt;a class="reference external" href="https://jupyterbook.org/guide/publish/netlify.html"&gt;Netlify tutorial&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Netlify has automatic deployment built into its service, since that’s
the whole point of the site - to deploy websites from online repositories.
To do this, I simply had to connect Netlify to my &lt;a class="reference external" href="https://github.com/choldgraf/jupyter-book-deploy-demo/"&gt;book content repository&lt;/a&gt;
and tell it to start building a site from that repository’s contents.&lt;/p&gt;
&lt;p&gt;I modified the build instructions using a custom “build” command.
Netlify runs this command every time it tries to build your site.
You can configure this by creating a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;netlify.toml&lt;/span&gt;&lt;/code&gt; file and putting it
in the root of your repository. &lt;a class="reference external" href="https://github.com/choldgraf/jupyter-book-deploy-demo/blob/master/netlify.toml"&gt;Here’s a link to my configuration file&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The full text of that TOML file looks like this:&lt;/p&gt;
&lt;div class="highlight-toml notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[build]&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="s"&gt;    gem install bundler -v &amp;#39;2.0.2&amp;#39;&lt;/span&gt;
&lt;span class="s"&gt;    pip install -U git+https://github.com/jupyter/jupyter-book&lt;/span&gt;
&lt;span class="s"&gt;    jupyter-book create mybook --content-folder content&lt;/span&gt;
&lt;span class="s"&gt;    cd mybook&lt;/span&gt;
&lt;span class="s"&gt;    jupyter-book build ./ --overwrite&lt;/span&gt;
&lt;span class="s"&gt;    make install&lt;/span&gt;
&lt;span class="s"&gt;    bundle exec jekyll build&lt;/span&gt;
&lt;span class="s"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;publish&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;mybook/_site&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;There are two pieces to this: the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;command&lt;/span&gt;&lt;/code&gt; section is the command to
run first, when a new commit is pushed to a branch. The &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;publish&lt;/span&gt;&lt;/code&gt; section
defines the location where Netlify will look for the finished HTML (AKA, my book website).&lt;/p&gt;
&lt;p&gt;Note that in the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;jupyter-book&lt;/span&gt; &lt;span class="pre"&gt;create&lt;/span&gt;&lt;/code&gt; command above, I used &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--content-folder&lt;/span&gt;&lt;/code&gt; to
tell Jupyter Book to use some pre-existing content when it generated my book template.
In addition, note that I could immediately install both Python and Ruby packages - that’s
because Netlify’s base build environment has both languages installed already!&lt;/p&gt;
&lt;!-- #region {"tags": ["popout"]} --&gt;
&lt;p&gt;One gotcha on getting Netlify to work was configuring it to use a Python 3.X environment.
That’s accomplished with the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;runtime.txt&lt;/span&gt;&lt;/code&gt; file &lt;a class="reference external" href="https://github.com/choldgraf/jupyter-book-deploy-demo/blob/master/runtime.txt"&gt;at this location&lt;/a&gt;.&lt;/p&gt;
&lt;!-- #endregion --&gt;
&lt;p&gt;By adding this configuration to my site, Netlify immediately started building
and hosting the book. You can find &lt;a class="reference external" href="https://jupyter-book-deploy-demo.netlify.com"&gt;that book deployment here&lt;/a&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="circleci"&gt;
&lt;h2&gt;CircleCI&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://circleci.com"&gt;CircleCI&lt;/a&gt; is a website most-commonly used for running
test suites and deploying things into production once those tests pass.
Fortunately, deploying an HTML book is pretty similar!&lt;/p&gt;
&lt;p&gt;Getting Jupyter Book to build on CircleCI was a little bit trickier for two
reasons:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;CircleCI has more specific environments in its build system. You can have a Python
environment, or a Ruby environment, but not both.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CircleCI has no concept of natively “hosting” HTML content, so we had to piggy-back
on top of GitHub pages.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Luckily, working around both of these issues was relatively straightforward.
You can find the CircleCI configuration that ended up working &lt;a class="reference external" href="https://github.com/choldgraf/jupyter-book-deploy-demo/blob/master/.circleci/config.yml"&gt;in the github repository&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There were two gotchas in there:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;I started off with using a Ruby environment rather than a Python environment.
That’s becuase I’ve found Python to be much easier to install than Ruby. In fact,
installing python was as easy as including &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;sudo&lt;/span&gt; &lt;span class="pre"&gt;apt-get&lt;/span&gt; &lt;span class="pre"&gt;install&lt;/span&gt; &lt;span class="pre"&gt;python3-pip&lt;/span&gt;&lt;/code&gt; in
my commands.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I had to use a GitHub SSH deploy key to be able to deploy my built HTML to GitHub
pages. You can find &lt;a class="reference external" href="https://chrisholdgraf.com/circleci-mirror"&gt;instructions for how to do so in this post&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Once that was accomplished, this is the configuration that got the job done:&lt;/p&gt;
&lt;div class="highlight-yaml notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;2.1&lt;/span&gt;
&lt;span class="nt"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;build_book&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;docker&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;circleci/ruby:2.6&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;checkout&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Install Python and dependencies to build page HTML&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;|&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="no"&gt;sudo apt-get install python3-pip&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="no"&gt;pip3 install --user -r requirements.txt&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="no"&gt;pip3 install --user -U git+https://github.com/jupyter/jupyter-book.git&lt;/span&gt;

&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Create book template and build page HTML&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;|&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="no"&gt;jupyter-book create mybook --content-folder content/&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="no"&gt;jupyter-book build ./mybook&lt;/span&gt;

&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Install ruby dependencies and build the book&amp;#39;s website&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;|&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="no"&gt;cd mybook&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="no"&gt;make install&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="no"&gt;bundle exec jekyll build&lt;/span&gt;

&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="c1"&gt;# If we&amp;#39;re on master, push to a gh-pages branch&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;add_ssh_keys&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;fingerprints&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;lt;my-public-fingerprint&amp;gt;&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Push to gh-pages (if on master)&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;command&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;|&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="no"&gt;if [ $CIRCLE_BRANCH	== &amp;quot;master&amp;quot; ]; then&lt;/span&gt;
&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="no"&gt;pip3 install ghp-import&lt;/span&gt;
&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="no"&gt;ghp-import -n -f -p mybook/_site;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="no"&gt;else&lt;/span&gt;
&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="no"&gt;echo &amp;quot;Skipping deploy because we aren&amp;#39;t on master&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="no"&gt;fi&lt;/span&gt;


&lt;span class="nt"&gt;workflows&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;2&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;default&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;build_book&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;You can find the deployed site &lt;a class="reference external" href="https://github.com/choldgraf/jupyter-book-deploy-demo"&gt;at this location&lt;/a&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="wrapping-up"&gt;
&lt;h2&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;Ultimately, it was simpler than I expected to deploy a Jupyter Book with CI/CD.
There are lots of other services to explore (in particular, TravisCI and GitHub actions),
but I find it hard to believe anything would be more straightforward than Netlify.&lt;/p&gt;
&lt;p&gt;That said, the process also made it clear that some pieces of the Jupyter Book API
are a bit confusing. It felt natural to have my content in a single folder, and to
build a book from that content, but this isn’t the “default” way that the documentation
recommends. I’ll let these ideas simmer a little bit and we’ll see what comes out of it.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://chrisholdgraf.com/blog/2019/2019-10-11-automating-jb/" rel="alternate"/>
    <summary>Lately I’ve spent a lot of time trying to reduce the friction involved
in deploying Jupyter Book as well as contributing to the project.
Features are a great carrot, but ultimately getting engagement is also
about lowering barriers to entry and showing people a path forward.
Jupyter Book is a relatively straightforward project, but it involves
a few technical pieces that can be painful to use (thanks Jekyll).Recently I experimented with whether we can automate deploying a Jupyter Book online.
Using continuous integration / deployment services seems like a natural place
to try this out. One can upload a barebones set of code to a GitHub repository,
then configure a build system to create a book and deploy it online from there.
This blog post is a place to keep track of the current state of affairs for this workflow.auto build logos</summary>
    <category term="infrastructure" label="infrastructure"/>
    <published>2019-10-11T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://chrisholdgraf.com/blog/2019/2019-10-13-rust-jupyter-governance/</id>
    <title>What would Rust-style governance look like in Jupyter?</title>
    <updated>2019-10-13T00:00:00+00:00</updated>
    <content type="html">&lt;section id="what-would-rust-style-governance-look-like-in-jupyter"&gt;

&lt;p&gt;As I’ve written about before, I &lt;a class="reference external" href="https://chrisholdgraf.com/rust-governance"&gt;like Rust’s governance structure&lt;/a&gt;.
I mean, who can’t get behind a community that
&lt;a class="reference external" href="https://www.rust-lang.org/governance"&gt;lists governance as a top-level page on its website&lt;/a&gt;?&lt;/p&gt;
&lt;p&gt;Jupyter is currently in the middle of
&lt;a class="reference external" href="https://discourse.jupyter.org/t/governance-office-hours-meeting-minutes/1480/26"&gt;figuring out the next phase of its governance structure&lt;/a&gt;,
and so I have been thinking about
what this might look like. This post is a quick thought-experiment to explore what it’d mean
to port over Rust’s governance directly into the Jupyter community.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: I’m not an expert in Rust governance, so there are some assumptions made about its model
based on my outside perspective. Apologies if I miss any important details about the Rust model,
but this is mostly meant as as inspiration, not a report on Rust’s governance :-)&lt;/em&gt;&lt;/p&gt;
&lt;section id="a-quick-recap-of-rust-s-governance-structure"&gt;
&lt;h2&gt;A quick recap of Rust’s governance structure&lt;/h2&gt;
&lt;p&gt;First off, how does Rust govern and organize itself? There are a few few
key pieces:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Any significant changes to the codebase are proposed and discussed with a
&lt;a class="reference external" href="https://github.com/rust-lang/rfcs"&gt;Request for Comments process&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The Rust community is broken down into topic-specific teams. Each has a particular
domain over which they make decisions. For a list of several teams, check out
the &lt;a class="reference external" href="https://www.rust-lang.org/governance/"&gt;Rust governance page&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;There is also a core-team that cuts across topic teams and has representatives
from each topic team, they discuss project-wide matters (but rarely).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A new RFC is assigned a team, as well as a “shepherd” from that team. This person’s
job is to move the RFC process forward, not to comment on or implement the RFC.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;After a discussion period, all members of the sub-team must vote to enter
a Final Comment Period. This should happen when “enough information is presented in
the RFC to make a decision”. It triggers a week-long review window.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;At the end of this window, a decision is made about what to do with the RFC. This
is made by the members of the sub-team, who (I don’t think) have any strict decision-making
rules, they can organize themselves in terms of decision-making.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If it is accepted, the RFC becomes “active” which is an invitation for people
to work on implementing it.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="what-would-this-look-like-in-jupyter"&gt;
&lt;h2&gt;What would this look like in Jupyter?&lt;/h2&gt;
&lt;p&gt;Jupyter is a complex and multi-faceted community, but so is Rust, so let’s see
what this decision-making structure would look like in the Jupyter community.&lt;/p&gt;
&lt;section id="general-decision-making-principles-and-goals"&gt;
&lt;h3&gt;General decision-making principles and goals&lt;/h3&gt;
&lt;p&gt;First off, we would adopt many of the same decision-making goals of the RFC
process. Here are a few key ones as I understand it:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Be transparent - information about decision-making should be publicly available and
easy to discover at any moment in time.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Be inclusive - decision-making should strive to include many diverse voices in
the conversation.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Be informative - the goal of the RFC process is to surface relevant information
and perspectives for making a decision.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Be productive - the goal of the RFC process is to move ideas forward in the community.
It should achieve a net-positive in “energy spent” vs. “generated value to the community”.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Be impactful - don’t use RFCs to bike-shed minor details, or implementation details for a PR.
They should be used for significant changes in a repository that require discussion at a high level.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="an-rfc-in-the-jupyter-community"&gt;
&lt;h3&gt;An RFC in the Jupyter Community&lt;/h3&gt;
&lt;p&gt;First off, the mechanism for proposing, iterating on, and making decisions. In
Rust this is an RFC. in Jupyter, such a mechanism has already been proposed!&lt;/p&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://github.com/jupyter/enhancement-proposals"&gt;Jupyter Enhancement Proposals&lt;/a&gt;
have been around for quite some time, though have never been codified into law official
decision-making and have become a bit stale. I suspect this is partially because it’s
unclear what kind of “power” the JEP process has.&lt;/p&gt;
&lt;p&gt;Recently, &lt;a class="reference external" href="https://github.com/captainsafia"&gt;Safia&lt;/a&gt; kick-started a process to
&lt;a class="reference external" href="https://github.com/jupyter/enhancement-proposals/pull/29"&gt;revitalize the JEP process&lt;/a&gt;, and
the proposed process is quite close to what the Rust community uses. I generally think
that this PR is a huge improvement, though for the sake of this thought experiment, I’m
just going to directly port over my understanding of Rust into this blog post.&lt;/p&gt;
&lt;p&gt;Here’s how a Rust-like process could work in Jupyter. Since already have JEPs, I’ll
replace “RFC” with “JEP”.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;We have a single “enhancement-proposals” repository where JEP discussion happens&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This repository has a template for new JEPs help people get started.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;New JEPs begin with general conversations in the community. People get informal
buy-in and feedback through discussing in the &lt;a class="reference external" href="https://discourse.jupyter.org"&gt;community forum&lt;/a&gt;
or in GitHub repositories.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If a person wants to make their JEP “official”, they fill in the JEP template and
make a pull-request to the repository.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;After an initial overview, a Jupyter team is assigned to the JEP.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;That team then picks a shepherd (how the teams do this is up to them).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The shepherd oversees a process of feedback, asks for input from others in the
community, and directs attention to the JEP on the listservs, community forum, etc.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When the shepherd thinks that the JEP is ready for a decision, they ask their
team to vote on whether it should enter a “final review” phase. No more modifications
should be made to the JEP at this point.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This triggers a 7-day window for team members to review the JEP. At the
end of the 7 days, the team votes (say, by a lazy consensus with 50% quorum)
on whether to accept the JEP.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If accepted, the JEP enters an “active” state and pull-requests are welcome to
implement it.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="the-teams-and-peronnel-needed-to-manage-this-process"&gt;
&lt;h3&gt;The teams and peronnel needed to manage this process&lt;/h3&gt;
&lt;p&gt;The JEP process is the &lt;em&gt;mechanism&lt;/em&gt; by which decisions get made, but what
are the groups that oversee this mechanism? In the Rust community,
these teams are broken down by either technical or community topics
(e.g., “compilers”, “community”, or “packaging”). The Jupyter community
similarly has several focus-groups that touch different parts of the
interactive computing stack. Here are a few core ones that basically already exist:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;JupyterLab core&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;JupyterHub core&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Infrastructure&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Community&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Events&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One could imagine beginning with this subset of teams, and adding others organically
over time. Each of the teams listed above would manage JEP processes for their respective
domain. They would be given a list of repositories (and maybe a GitHub organization)
to oversee, and when a new JEP came in, one of the the team members would be
chosen to shepherd the process. The team would be the definitive source of
decision-making for topics in that domain.&lt;/p&gt;
&lt;p&gt;Here are a few others that come to mind - they’re a bit less well-defined and might
be good candidates for team growth in the future.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;The notebook specification&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Kernels and communication protocols&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Visualizations and widgets&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Publishing and document formats&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Data specifications&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Finance and accounting&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Technical accessibility&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Documentation&lt;/strong&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are a few other roles that would need to be created to facilitate this process:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;A JEP communicator&lt;/strong&gt; - someone would need to manage the JEP infrastructure and process
at a generic level. This doesn’t mean getting involved in individual JEPs, but making sure
the process as a whole is functioning, and potentially managing infrastructure around it
(for example, maintaining a website that lists currently-active JEPs).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;A core team&lt;/strong&gt; - would need to be created that cuts across the topic-specific teams.
This team would exercise large-scale decisions within the community but generally
rarely exercise their power. Similar to a BDFL.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;A shepherd role&lt;/strong&gt; - we’d need to formalize what a “shepherd” is in the Jupyter community.
Potentially sub-teams would modify this slightly to fit their own needs.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="what-s-the-difference-between-current-jupyter-and-jep-jupyter"&gt;
&lt;h2&gt;What’s the difference between current Jupyter and JEP Jupyter?&lt;/h2&gt;
&lt;p&gt;Thinking through the above scenario, I don’t see too much distance between
our current situation and a JEP-like process. We:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Already have &lt;em&gt;informal&lt;/em&gt; topic groups, in the form of GitHub organizations,
forum channels, and meetings (e.g. JupyterLab and JupyterHub come to mind).&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Already have a JEP repository with some past proposals in it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Already have the skeleton of a modernized JEP process thanks to Safia’s awesome work.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;What we’d need to do:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;more officially codify the JEP process&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;make some topic-based teams official, and get people to accept roles on those teams&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;build some infrastructure to support the JEP process (e.g. a website to make them searchable
and discoverable)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;re-work team processes to encourage them to follow the JEP process over time (I suspect this would
be the hardest thing to do)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="what-s-the-difference-between-jupyter-and-rust"&gt;
&lt;h2&gt;What’s the difference between Jupyter and Rust?&lt;/h2&gt;
&lt;p&gt;Finally, while it’s interesting to port one community’s governance model directly onto another,
there are difference between the Jupyter and Rust projects, both technical and social ones.
Here are a few differences I can think of that might have an impact on how this model would work.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Jupyter evolves fairly quickly&lt;/strong&gt; - Whether it is JupyterLab development, the growth of new
protocols or deployments in the JupyterHub stack, or extensions of Jupyter tools for new
use-cases, Jupyter seems to move fairly quickly. The RFC (or JEP) model is one that intentionally
slows things down, so perhaps we’d need to be more picky about when to follow such a model
vs. when to allow codebases to grow more quickly.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Jupyter doesn’t have a process like this already&lt;/strong&gt; - The recent JEP updates notwithstanding,
Jupyter doesn’t have a culture of following the JEP process already. This makes me think that
adopting this process would need to be rolled out slowly over time, and in smaller increments
in order to make sure teams buy-in to the process.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Jupyter doesn’t have many official roles/titles&lt;/strong&gt; - Adding extra complexity to governance
also adds extra responsibility and labor needed to manage that complexity. In order to
ensure that the work gets done, and credit is given to those doing the work, we’d need to grow
a culture of creating specific roles and responsibility for those roles.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="wrapping-up"&gt;
&lt;h2&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;I’m probably missing some things, but this seems like a reasonable plan! As I mentioned
above, this post has mostly been a thought-experiment, but if anybody has thoughts on bringing
this into the governance refactoring process, I’d be happy to talk more.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://chrisholdgraf.com/blog/2019/2019-10-13-rust-jupyter-governance/" rel="alternate"/>
    <summary>As I’ve written about before, I like Rust’s governance structure.
I mean, who can’t get behind a community that
lists governance as a top-level page on its website?Jupyter is currently in the middle of
figuring out the next phase of its governance structure,
and so I have been thinking about
what this might look like. This post is a quick thought-experiment to explore what it’d mean
to port over Rust’s governance directly into the Jupyter community.</summary>
    <category term="governance" label="governance"/>
    <published>2019-10-13T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://chrisholdgraf.com/blog/2019/2019-10-27-jupyter-governance-python/</id>
    <title>What would Python-style governance look like in Jupyter?</title>
    <updated>2019-10-27T00:00:00+00:00</updated>
    <content type="html">&lt;section id="what-would-python-style-governance-look-like-in-jupyter"&gt;

&lt;p&gt;This is the second in a series of blog posts that explores what it’d look like to
directly port the governance model of other communities into the Jupyter project.
You can find the &lt;a class="reference external" href="https://chrisholdgraf.com/rust-jupyter-governance"&gt;first post about Rust here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: These posts are meant as a thought experiment rather than a proposal. Moreover,
all the usual caveats come with it, such as the
fact that I don’t know the Python governance
structure &lt;em&gt;that&lt;/em&gt; well, and I might totally
botch my characterization of it.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="background-on-python-s-governance"&gt;
&lt;h1&gt;Background on Python’s Governance&lt;/h1&gt;
&lt;p&gt;Recently, the Python community underwent a refactoring of their governance
model. This was in large part due to &lt;a class="reference external" href="https://mail.python.org/pipermail/python-committers/2018-July/005664.html"&gt;Guido’s decision to step down as BDFL&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;What transpired was a months-long process in which many proposals were made for
a new governance model in the Python community, following the &lt;a class="reference external" href="https://www.python.org/dev/peps/pep-8000/"&gt;PEP 8000 series&lt;/a&gt;
of enhancement proposals.&lt;/p&gt;
&lt;p&gt;There were a lot of interesting ideas in the proposals that came forward, but this
post is going to focus on the one that ended up being chosen, &lt;a class="reference external" href="https://www.python.org/dev/peps/pep-8016/"&gt;PEP 8016&lt;/a&gt;. You can find the final language of Python’s governance model &lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0013/"&gt;in this PEP&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So, what would Python’s governance model look like in Jupyter?&lt;/p&gt;
&lt;/section&gt;
&lt;section id="a-quick-overview"&gt;
&lt;h1&gt;A quick overview&lt;/h1&gt;
&lt;p&gt;At a high level, Python’s governance model is quite similar to that of Project Jupyter.
It has two main bodies:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;A steering council&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A “core contributors” group&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The steering council has the “final say” in everything within the Python language, though
they also have a mandate to delegate as much as possible to teams / groups within the
Python community. As such, most decisions will likely &lt;em&gt;not&lt;/em&gt; be made by the steering council.
Membership on the council is determined on a rotating basis, and a new council is elected before
each new major release of Python. This ensures continuity in the council, but also ensures
that there are opportunities for membership to evolve over time. Discussion and design
for decisions are made via the Python Enhancement Proposal (PEP) process, though the
“decision” on these PEPs can take different forms (and the council has the ultimate vote
if need be).&lt;/p&gt;
&lt;p&gt;In many ways, this closely resembles what the Jupyter project already has.
Jupyter uses a steering council to make decisions, though the council is much larger
(at 21 members). It also has a large, informally defined group of “core contributors”,
which maps cleanly onto the Python “core team” model. Python already has a
well-established collective decision-making process (PEPs), while Jupyter
has a defined-but-not-established process (JEPs).&lt;/p&gt;
&lt;/section&gt;
&lt;section id="a-jupyter-pep-013"&gt;
&lt;h1&gt;A Jupyter PEP 013&lt;/h1&gt;
&lt;p&gt;The rest of this post is going to be a close mirror to the accepted &lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0013/"&gt;PEP 013 proposal&lt;/a&gt;. I’ll change the language where it makes sense, or in order to
map onto whatever structures currently exist in the Jupyter world.&lt;/p&gt;
&lt;section id="the-current-jupyter-steering-council"&gt;
&lt;h2&gt;The current Jupyter steering council&lt;/h2&gt;
&lt;p&gt;The current steering council is the only official group of people attached to
the Jupyter Project. It consists of 21 members listed here:&lt;/p&gt;
&lt;p&gt;https://jupyter.org/about&lt;/p&gt;
&lt;p&gt;This team has grown iteratively since the beginning of the Jupyter Project.&lt;/p&gt;
&lt;p&gt;For the sake of clarity, references to “the new steering council” refers to
the organizing body that replaces the current steering council.&lt;/p&gt;
&lt;p&gt;It also assumes that we use a Jupyter Enhancement Proposal (JEP) process
for proposing and making decisions. This post will not detail the JEP process,
because &lt;a class="reference external" href="https://github.com/jupyter/enhancement-proposals/issues/27"&gt;Safia already did a great job of this here&lt;/a&gt;.
It also assumes that &lt;em&gt;this&lt;/em&gt; document is written in the form of a JEP, similar to
what the Python community used.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="the-new-jupyter-steering-council"&gt;
&lt;h2&gt;The new Jupyter steering council&lt;/h2&gt;
&lt;section id="composition"&gt;
&lt;h3&gt;Composition&lt;/h3&gt;
&lt;p&gt;The steering council is a 5-person committee.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="mandate"&gt;
&lt;h3&gt;Mandate&lt;/h3&gt;
&lt;p&gt;The steering council shall work to:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Maintain the quality and stability of the Jupyter core projects,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Make contributing as accessible, inclusive, and sustainable as possible,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Formalize and maintain the relationship between the core team and NumFocus,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Establish appropriate decision-making processes for teams in the Jupyter community,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Seek consensus among contributors and the core team before acting in a formal capacity,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Act as a “court of final appeal” for decisions where all other methods have failed.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="powers"&gt;
&lt;h3&gt;Powers&lt;/h3&gt;
&lt;p&gt;The council has broad authority to make decisions about the project. For example, they can:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Accept or reject JEPs and PRs&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Enforce or update the project’s code of conduct&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Work with NumFocus to manage any project assets&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Delegate parts of their authority to other subcommittees or processes&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;However, they cannot modify this JEP, or affect the membership of the core team, except via the mechanisms specified in this document.&lt;/p&gt;
&lt;p&gt;The council should look for ways to use these powers as little as possible. Instead of voting, it’s better to seek consensus. Instead of ruling on individual JEPs, it’s better to define a standard process for JEP decision making (for example, by formalizing &lt;a class="reference external" href="https://github.com/jupyter/enhancement-proposals/tree/master/29-jep-process"&gt;the recently-proposed meta-JEP process&lt;/a&gt;).
It’s better to establish a Code of Conduct committee than to rule on individual cases. And so on.&lt;/p&gt;
&lt;p&gt;To use its powers, the council votes. Every council member must either vote or explicitly abstain. Members with conflicts of interest on a particular vote must abstain. Passing requires a strict majority of non-abstaining council members.&lt;/p&gt;
&lt;p&gt;Whenever possible, the council’s deliberations and votes shall be held in public.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="electing-the-council"&gt;
&lt;h3&gt;Electing the council&lt;/h3&gt;
&lt;p&gt;A council election consists of two phases:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Phase 1: Candidates advertise their interest in serving. Candidates must be nominated by a core team member. Self-nominations are allowed.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Phase 2: Each core team member can vote for zero or more of the candidates. Voting is performed anonymously. Candidates are ranked by the total number of votes they receive. If a tie occurs, it may be resolved by mutual agreement among the candidates, or else the winner will be chosen at random.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Each phase lasts one to two weeks, at the outgoing council’s discretion. For the initial election, both phases will last two weeks.&lt;/p&gt;
&lt;p&gt;The election process is managed by &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Returning_officer"&gt;a returns officer&lt;/a&gt; nominated by the outgoing steering council. For the initial election, the returns officer will be nominated by Brian Granger and Fernando Perez.&lt;/p&gt;
&lt;p&gt;The council should ideally reflect the diversity of Jupyter contributors and users, and core team members are encouraged to vote accordingly.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="term"&gt;
&lt;h3&gt;Term&lt;/h3&gt;
&lt;p&gt;Jupyter will define a cycle of operations, roughly mapping onto a “major version release cycle”
(as if it were a single technical project). The details of what this means will be decided by the
steering council and the JEP process.&lt;/p&gt;
&lt;p&gt;A new council is elected after cycle. Each council’s term runs from when their election results are finalized until the next council’s term starts. There are no term limits.&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;Some extra details about the steering council. Click to expand if you're interested.&lt;/summary&gt;
&lt;/section&gt;
&lt;section id="vacancies"&gt;
&lt;h3&gt;Vacancies&lt;/h3&gt;
&lt;p&gt;Council members may resign their position at any time.&lt;/p&gt;
&lt;p&gt;Whenever there is a vacancy during the regular council term, the council may vote to appoint a replacement to serve out the rest of the term.&lt;/p&gt;
&lt;p&gt;If a council member drops out of touch and cannot be contacted for a month or longer, then the rest of the council may vote to replace them.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="conflicts-of-interest"&gt;
&lt;h3&gt;Conflicts of interest&lt;/h3&gt;
&lt;p&gt;While we trust council members to act in the best interests of Jupyter rather than themselves or their employers, the mere appearance of any one company dominating Jupyter development could itself be harmful and erode trust. In order to avoid any appearance of conflict of interest, at most 2 members of the council can work for any single employer.&lt;/p&gt;
&lt;p&gt;In a council election, if 3 of the top 5 vote-getters work for the same employer, then whichever of them ranked lowest is disqualified and the 6th-ranking candidate moves up into 5th place; this is repeated until a valid council is formed.&lt;/p&gt;
&lt;p&gt;During a council term, if changing circumstances cause this rule to be broken (for instance, due to a council member changing employment), then one or more council members must resign to remedy the issue, and the resulting vacancies can then be filled as normal.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="ejecting-core-team-members"&gt;
&lt;h3&gt;Ejecting core team members&lt;/h3&gt;
&lt;p&gt;In exceptional circumstances, it may be necessary to remove someone from the core team against their will. (For example: egregious and ongoing code of conduct violations.) This can be accomplished by a steering council vote, but unlike other steering council votes, this requires at least a two-thirds majority. With 5 members voting, this means that a 3:2 vote is insufficient; 4:1 in favor is the minimum required for such a vote to succeed. In addition, this is the one power of the steering council which cannot be delegated, and this power cannot be used while a vote of no confidence is in process.&lt;/p&gt;
&lt;p&gt;If the ejected core team member is also on the steering council, then they are removed from the steering council as well.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="vote-of-no-confidence"&gt;
&lt;h3&gt;Vote of no confidence&lt;/h3&gt;
&lt;p&gt;In exceptional circumstances, the core team may remove a sitting council member, or the entire council, via a vote of no confidence.&lt;/p&gt;
&lt;p&gt;A no-confidence vote is triggered when a core team member calls for one publically on an appropriate project communication channel, and another core team member seconds the proposal.&lt;/p&gt;
&lt;p&gt;The vote lasts for two weeks. Core team members vote for or against. If at least two thirds of voters express a lack of confidence, then the vote succeeds.&lt;/p&gt;
&lt;p&gt;There are two forms of no-confidence votes: those targeting a single member, and those targeting the council as a whole. The initial call for a no-confidence vote must specify which type is intended. If a single-member vote succeeds, then that member is removed from the council and the resulting vacancy can be handled in the usual way. If a whole-council vote succeeds, the council is dissolved and a new council election is triggered immediately.&lt;/p&gt;
&lt;/details&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="the-core-team"&gt;
&lt;h2&gt;The core team&lt;/h2&gt;
&lt;section id="role"&gt;
&lt;h3&gt;Role&lt;/h3&gt;
&lt;p&gt;The core team is the group of trusted volunteers who manage Jupyter. They assume many roles required to achieve the project’s goals, especially those that require a high level of trust. They make the decisions that shape the future of the project.&lt;/p&gt;
&lt;p&gt;Core team members are expected to act as role models for the community and custodians of the project, on behalf of the community and all those who rely on Jupyter.&lt;/p&gt;
&lt;p&gt;They will intervene, where necessary, in online discussions or at official Jupyter events on the rare occasions that a situation arises that requires intervention.&lt;/p&gt;
&lt;p&gt;They have authority over the Jupyter Project infrastructure, including the jupyter.org website itself, the “core Jupyter GitHub organizations and repositories”, the community forum, the mailing lists, Gitter channels,
and any cloud infrastructure such as nbconvert, mybinder.org, etc.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="prerogatives"&gt;
&lt;h3&gt;Prerogatives&lt;/h3&gt;
&lt;p&gt;Core team members may participate in formal votes, typically to nominate new team members and to elect the steering council.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="membership"&gt;
&lt;h3&gt;Membership&lt;/h3&gt;
&lt;p&gt;Jupyter core team members demonstrate:&lt;/p&gt;
&lt;p&gt;a good grasp of the philosophy of the Jupyter Project
a solid track record of being constructive and helpful
significant contributions to the project’s goals, in any form
willingness to dedicate some time to improving Jupyter
As the project matures, contributions go beyond code. Here’s an incomplete list of areas where contributions may be considered for joining the core team, in no particular order:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Working on community management and outreach&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Providing support on the mailing lists, gitter rooms, and the community forum&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Triaging tickets&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Writing patches (code, docs, or tests)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Reviewing patches (code, docs, or tests)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Participating in design decisions&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Providing expertise in a particular domain (security, i18n, etc.)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Managing the continuous integration infrastructure&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Managing the servers (website, tracker, documentation, etc.)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Maintaining related projects (alternative interpreters, core infrastructure like packaging, etc.)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Creating visual designs&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Core team membership acknowledges sustained and valuable efforts that align well with the philosophy and the goals of the Jupyter project.&lt;/p&gt;
&lt;p&gt;It is granted by receiving at least two-thirds positive votes in a core team vote that is open for one week and with no veto by the steering council.&lt;/p&gt;
&lt;p&gt;Core team members are always looking for promising contributors, teaching them how the project is managed, and submitting their names to the core team’s vote when they’re ready.&lt;/p&gt;
&lt;p&gt;There’s no time limit on core team membership. However, in order to provide the general public with a reasonable idea of how many people maintain Jupyter, core team members who have stopped contributing are encouraged to declare themselves as “inactive”. Those who haven’t made any non-trivial contribution in two years may be asked to move themselves to this category, and moved there if they don’t respond. To record and honor their contributions, inactive team members will continue to be listed alongside active core team members; and, if they later resume contributing, they can switch back to active status at will. While someone is in inactive status, though, they lose their active privileges like voting or nominating for the steering council, and commit access.&lt;/p&gt;
&lt;p&gt;The initial active core team members will consist of everyone with commit access to one of the Jupyter core repositories on Github.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="changing-this-document"&gt;
&lt;h2&gt;Changing this document&lt;/h2&gt;
&lt;p&gt;Changes to this document require at least a two-thirds majority of votes cast in a core team vote which should be open for two weeks.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="what-s-different-between-python-and-jupyter"&gt;
&lt;h1&gt;What’s different between Python and Jupyter?&lt;/h1&gt;
&lt;p&gt;I was struck by how similar the new Python governance model is to
the Jupyter project’s current model. They both have a steering council approach,
and a core team that surrounds it. That means that Jupyter could get pretty close
by effectively doing these three things:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Reduce the steering council from 21 to 5 people&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Formalize the “core team” to be current Jupyter committers&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Codify and enforce the JEP process for discussion and decision-making&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That said, there are a few ways in which I think Python and Jupyter are different.
Jupyter feels like it has more moving pieces across different parts of the stack. It has “core projects” that span everything from kernel specifications
to user interfaces to cloud infrastructure. It also feels like Jupyter is more OK with
“bleeding edge” software and quick release cycles (though this depends on the project,
the notebook has been pretty stable for a while now).&lt;/p&gt;
&lt;p&gt;Perhaps the first thing that a new Jupyter steering council should do is to create several
sub-steering councils (maybe sub-“teams”) that serve in a steering-council-like role
but for a specific project (like jupyterhub, jupyterlab, the jupyter notebook specification, etc).
These could serve similarly to the sub-teams in the Rust community as well.&lt;/p&gt;
&lt;p&gt;Another benefit of this model is that it doesn’t require a drastic shift from our
current governance. It’s more of a refinement and commitment to processes that we
already know about but rarely follow strictly.&lt;/p&gt;
&lt;p&gt;In all, the Python model seems like a nice balance between the organized chaos of
a totally collective decision-making process, and the high-stress-and-bottlenecking
approach of a BDFL-style model.&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="https://chrisholdgraf.com/blog/2019/2019-10-27-jupyter-governance-python/" rel="alternate"/>
    <summary>This is the second in a series of blog posts that explores what it’d look like to
directly port the governance model of other communities into the Jupyter project.
You can find the first post about Rust here.Note: These posts are meant as a thought experiment rather than a proposal. Moreover,
all the usual caveats come with it, such as the
fact that I don’t know the Python governance
structure that well, and I might totally
botch my characterization of it.</summary>
    <category term="governance" label="governance"/>
    <category term="opensource" label="open source"/>
    <published>2019-10-27T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://chrisholdgraf.com/blog/2019/2019-11-11-ipynb_pandoc/</id>
    <title>Testing Pandoc and Jupyter Notebooks</title>
    <updated>2019-11-11T00:00:00+00:00</updated>
    <content type="html">&lt;section id="jupyter-notebooks-to-markdown-and-html-with-pandoc"&gt;

&lt;p&gt;For several months now, the universal &lt;a class="reference external" href="https://pandoc.org/"&gt;document converter pandoc&lt;/a&gt; has
had &lt;a class="reference external" href="https://pandoc.org/MANUAL.html#creating-jupyter-notebooks-with-pandoc"&gt;support for Jupyter Notebooks&lt;/a&gt;. This means that with a single call,
you can convert &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;.ipynb&lt;/span&gt;&lt;/code&gt; files to any of the output formats that Pandoc
supports (and vice-versa!). This post is a quick exploration of what this
looks like.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note that for this post, we’re using Pandoc version 2.7.3&lt;/strong&gt;. Also, some of what’s below is hard
to interpret without actually opening the files that are created by Pandoc. For the sake
of this blog post, I’m going to stick with the raw text output here, though you can expand the
outputs if you wish, I recommend copy/pasting some of these commands on your own if you’d like to try.&lt;/p&gt;
&lt;div class="cell tag_hide_input docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;sbrun&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;PIPE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CalledProcessError&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pathlib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;IPython.display&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HTML&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Markdown&lt;/span&gt;

&lt;span class="c1"&gt;# A helper function to capture errors and outputs&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sbrun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cmd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;PIPE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;PIPE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;check&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;CalledProcessError&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="our-base-notebook"&gt;
&lt;h1&gt;Our base notebook&lt;/h1&gt;
&lt;p&gt;First off, let’s take a look at our base notebook. We’ll convert this document
to both Markdown and HTML using Pandoc.&lt;/p&gt;
&lt;p&gt;The notebook will be fairly minimal
in order to make it easier to inspect its contents. It has a collection
of markdown with mixed content, as well as code cells with various outputs.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference download internal" download="" href="../_downloads/0acc01bb2f4453e39005c75e2495b107/notebooks.ipynb"&gt;&lt;code class="xref download docutils literal notranslate"&gt;&lt;span class="pre"&gt;See&lt;/span&gt; &lt;span class="pre"&gt;this&lt;/span&gt; &lt;span class="pre"&gt;link&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; for the notebook we’ll use.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="ipynb-to-markdown"&gt;
&lt;h1&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;.ipynb&lt;/span&gt;&lt;/code&gt; to markdown&lt;/h1&gt;
&lt;p&gt;Let’s try converting this notebook to markdown. This should preserve as much
information as possible about the input Jupyter notebook. This should include
all markdown cells, cell metadata, and outputs with code cells.&lt;/p&gt;
&lt;section id="a-few-pandoc-options"&gt;
&lt;h2&gt;A few pandoc options&lt;/h2&gt;
&lt;p&gt;Here are a few pandoc options that are relevant to our use-case:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--resource-path&lt;/span&gt;&lt;/code&gt; defines the path where Pandoc will look for resources that are linked in the notebook.
This allows us to discover images etc that are in a different folder from where we are invocing &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pandoc&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--extract-media&lt;/span&gt;&lt;/code&gt; is a path where images and other media will be &lt;em&gt;extracted&lt;/em&gt; at conversion time. Any links
to images etc should point to files at this path in the output format.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;-s&lt;/span&gt;&lt;/code&gt; (or &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--standalone&lt;/span&gt;&lt;/code&gt;) tells Pandoc that the output should be a “standalone” format. This does different
things depending on the output, such as adding a header if converting to HTML.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;-o&lt;/span&gt;&lt;/code&gt; the output file, and implicitly the output file type (e.g., markdown)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;-t&lt;/span&gt;&lt;/code&gt; the &lt;em&gt;type&lt;/em&gt; of output file if we want to override the default (e.g., GitHub-flavored markdown vs. Pandoc markdown).&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="converting-to-github-flavored-markdown"&gt;
&lt;h2&gt;Converting to GitHub-flavored markdown&lt;/h2&gt;
&lt;p&gt;Let’s start by converting to GitHub-flavored markdown. By not specifying an output file
with &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;-o&lt;/span&gt;&lt;/code&gt;, we’ll cause Pandoc to print the result to the screen, which we’ll display here.&lt;/p&gt;
&lt;div class="cell tag_hide_output docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# ipynb -&amp;gt; gfmd&lt;/span&gt;
&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pandoc pandoc_ipynb/inputs/notebooks.ipynb --resource-path=inputs -s --extract-media=outputs/images -t gfm&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;div class="output stream highlight-myst-ansi notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;div class=&amp;quot;cell markdown&amp;quot;&amp;gt;

# Here&amp;#39;s a demo notebook

This is a demo notebook to play around with the pandoc ipynb support

## Markdown

As it is markdown, you can embed images, HTML, etc into your posts\!

![](outputs/images/ca17e56d65946db885db7f8f50a9605a6a94e6a7.jpg)

Here&amp;#39;s one \(inline_{math}\) and

\[
math^{blocks}
\]

``` python
def my_functino():
    mystring = &amp;quot;you can also include python cells&amp;quot;
    return mystring
```

&amp;lt;/div&amp;gt;

&amp;lt;div class=&amp;quot;cell markdown&amp;quot; data-tags=&amp;quot;[&amp;amp;quot;heresatag&amp;amp;quot;]&amp;quot;&amp;gt;

# Code cells

## Matplotlib output with metadata

The below code cell has some metadata attached to it. It also outputs a
figure. Both should be included in the output format.

&amp;lt;/div&amp;gt;

&amp;lt;div class=&amp;quot;cell code&amp;quot; data-execution_count=&amp;quot;7&amp;quot; data-slideshow=&amp;quot;{&amp;amp;quot;slide_type&amp;amp;quot;:&amp;amp;quot;subslide&amp;amp;quot;}&amp;quot; data-tags=&amp;quot;[&amp;amp;quot;mytag&amp;amp;quot;,&amp;amp;quot;parameters&amp;amp;quot;]&amp;quot;&amp;gt;

``` python
from matplotlib import rcParams, cycler
import matplotlib.pyplot as plt
import numpy as np
plt.ion()

data = np.random.rand(2, 1000) * 100
fig, ax = plt.subplots()
ax.scatter(*data, s=data[1], c=data[0])
```

&amp;lt;div class=&amp;quot;output execute_result&amp;quot; data-execution_count=&amp;quot;7&amp;quot;&amp;gt;

    &amp;lt;matplotlib.collections.PathCollection at 0x7f6e8d6269e8&amp;gt;

&amp;lt;/div&amp;gt;

&amp;lt;div class=&amp;quot;output display_data&amp;quot;&amp;gt;

![](outputs/images/e843a737607d119ec5b2750a2bb737c915f1b6e8.png)

&amp;lt;/div&amp;gt;

&amp;lt;/div&amp;gt;

&amp;lt;div class=&amp;quot;cell markdown&amp;quot;&amp;gt;

## DataFrames

&amp;lt;/div&amp;gt;

&amp;lt;div class=&amp;quot;cell code&amp;quot; data-execution_count=&amp;quot;8&amp;quot;&amp;gt;

``` python
import pandas as pd
pd.DataFrame([[&amp;#39;hi&amp;#39;, &amp;#39;there&amp;#39;], [&amp;#39;this&amp;#39;, &amp;#39;is&amp;#39;], [&amp;#39;a&amp;#39;, &amp;#39;DataFrame&amp;#39;]], columns=[&amp;#39;Word A&amp;#39;, &amp;#39;Word B&amp;#39;])
```

&amp;lt;div class=&amp;quot;output execute_result&amp;quot; data-execution_count=&amp;quot;8&amp;quot;&amp;gt;

``` 
  Word A     Word B
0     hi      there
1   this         is
2      a  DataFrame
```

&amp;lt;/div&amp;gt;

&amp;lt;/div&amp;gt;

&amp;lt;div class=&amp;quot;cell markdown&amp;quot;&amp;gt;

# Bibliography

Let&amp;#39;s test the bibliography here

Testing this \[bibliography @holdgraf\_rapid\_2016\]

@holdgraf\_evidence\_2014

&amp;lt;/div&amp;gt;

&amp;lt;div class=&amp;quot;cell markdown&amp;quot;&amp;gt;

### The actual bibliography

The bibliography will be placed at the end of the file

&amp;lt;/div&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Note that cells are divided by hard-coded &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;&amp;lt;div&amp;gt;&lt;/span&gt;&lt;/code&gt;s, and cell-level metadata (such as tags)
are encoded within the HTML (e.g. &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;data-tags&lt;/span&gt;&lt;/code&gt;). Also note that we haven’t gotten the bibliography
to render, probably because we didn’t enable the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;citeproc&lt;/span&gt;&lt;/code&gt; processor on pandoc (we’ll try that later).
Finally, note that there’s no notebook-level metadata in this output because GFM doesn’t support
a YAML header.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="to-pandoc-flavored-markdown"&gt;
&lt;h2&gt;To pandoc-flavored markdown&lt;/h2&gt;
&lt;div class="cell tag_hide_output docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# ipynb -&amp;gt; pandoc md&lt;/span&gt;
&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pandoc pandoc_ipynb/inputs/notebooks.ipynb --resource-path=inputs -s --extract-media=outputs/images&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;div class="output stream highlight-myst-ansi notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html xmlns=&amp;quot;http://www.w3.org/1999/xhtml&amp;quot; lang=&amp;quot;&amp;quot; xml:lang=&amp;quot;&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;meta charset=&amp;quot;utf-8&amp;quot; /&amp;gt;
  &amp;lt;meta name=&amp;quot;generator&amp;quot; content=&amp;quot;pandoc&amp;quot; /&amp;gt;
  &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1.0, user-scalable=yes&amp;quot; /&amp;gt;
  &amp;lt;title&amp;gt;notebooks&amp;lt;/title&amp;gt;
  &amp;lt;style&amp;gt;
      code{white-space: pre-wrap;}
      span.smallcaps{font-variant: small-caps;}
      span.underline{text-decoration: underline;}
      div.column{display: inline-block; vertical-align: top; width: 50%;}
  &amp;lt;/style&amp;gt;
  &amp;lt;style&amp;gt;
code.sourceCode &amp;gt; span { display: inline-block; line-height: 1.25; }
code.sourceCode &amp;gt; span { color: inherit; text-decoration: inherit; }
code.sourceCode &amp;gt; span:empty { height: 1.2em; }
.sourceCode { overflow: visible; }
code.sourceCode { white-space: pre; position: relative; }
div.sourceCode { margin: 1em 0; }
pre.sourceCode { margin: 0; }
@media screen {
div.sourceCode { overflow: auto; }
}
@media print {
code.sourceCode { white-space: pre-wrap; }
code.sourceCode &amp;gt; span { text-indent: -5em; padding-left: 5em; }
}
pre.numberSource code
  { counter-reset: source-line 0; }
pre.numberSource code &amp;gt; span
  { position: relative; left: -4em; counter-increment: source-line; }
pre.numberSource code &amp;gt; span &amp;gt; a:first-child::before
  { content: counter(source-line);
    position: relative; left: -1em; text-align: right; vertical-align: baseline;
    border: none; display: inline-block;
    -webkit-touch-callout: none; -webkit-user-select: none;
    -khtml-user-select: none; -moz-user-select: none;
    -ms-user-select: none; user-select: none;
    padding: 0 4px; width: 4em;
    color: #aaaaaa;
  }
pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }
div.sourceCode
  {   }
@media screen {
code.sourceCode &amp;gt; span &amp;gt; a:first-child::before { text-decoration: underline; }
}
code span.al { color: #ff0000; font-weight: bold; } /* Alert */
code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
code span.at { color: #7d9029; } /* Attribute */
code span.bn { color: #40a070; } /* BaseN */
code span.bu { } /* BuiltIn */
code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
code span.ch { color: #4070a0; } /* Char */
code span.cn { color: #880000; } /* Constant */
code span.co { color: #60a0b0; font-style: italic; } /* Comment */
code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
code span.do { color: #ba2121; font-style: italic; } /* Documentation */
code span.dt { color: #902000; } /* DataType */
code span.dv { color: #40a070; } /* DecVal */
code span.er { color: #ff0000; font-weight: bold; } /* Error */
code span.ex { } /* Extension */
code span.fl { color: #40a070; } /* Float */
code span.fu { color: #06287e; } /* Function */
code span.im { } /* Import */
code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
code span.kw { color: #007020; font-weight: bold; } /* Keyword */
code span.op { color: #666666; } /* Operator */
code span.ot { color: #007020; } /* Other */
code span.pp { color: #bc7a00; } /* Preprocessor */
code span.sc { color: #4070a0; } /* SpecialChar */
code span.ss { color: #bb6688; } /* SpecialString */
code span.st { color: #4070a0; } /* String */
code span.va { color: #19177c; } /* Variable */
code span.vs { color: #4070a0; } /* VerbatimString */
code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
  &amp;lt;/style&amp;gt;
  &amp;lt;!--[if lt IE 9]&amp;gt;
    &amp;lt;script src=&amp;quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;![endif]--&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;div class=&amp;quot;cell markdown&amp;quot;&amp;gt;
&amp;lt;h1 id=&amp;quot;heres-a-demo-notebook&amp;quot;&amp;gt;Here&amp;#39;s a demo notebook&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;This is a demo notebook to play around with the pandoc ipynb support&amp;lt;/p&amp;gt;
&amp;lt;h2 id=&amp;quot;markdown&amp;quot;&amp;gt;Markdown&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;As it is markdown, you can embed images, HTML, etc into your posts!&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;img src=&amp;quot;outputs/images/ca17e56d65946db885db7f8f50a9605a6a94e6a7.jpg&amp;quot; /&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Here&amp;#39;s one &amp;lt;span class=&amp;quot;math inline&amp;quot;&amp;gt;&amp;lt;em&amp;gt;i&amp;lt;/em&amp;gt;&amp;lt;em&amp;gt;n&amp;lt;/em&amp;gt;&amp;lt;em&amp;gt;l&amp;lt;/em&amp;gt;&amp;lt;em&amp;gt;i&amp;lt;/em&amp;gt;&amp;lt;em&amp;gt;n&amp;lt;/em&amp;gt;&amp;lt;em&amp;gt;e&amp;lt;/em&amp;gt;&amp;lt;sub&amp;gt;&amp;lt;em&amp;gt;m&amp;lt;/em&amp;gt;&amp;lt;em&amp;gt;a&amp;lt;/em&amp;gt;&amp;lt;em&amp;gt;t&amp;lt;/em&amp;gt;&amp;lt;em&amp;gt;h&amp;lt;/em&amp;gt;&amp;lt;/sub&amp;gt;&amp;lt;/span&amp;gt; and&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;br /&amp;gt;&amp;lt;span class=&amp;quot;math display&amp;quot;&amp;gt;&amp;lt;em&amp;gt;m&amp;lt;/em&amp;gt;&amp;lt;em&amp;gt;a&amp;lt;/em&amp;gt;&amp;lt;em&amp;gt;t&amp;lt;/em&amp;gt;&amp;lt;em&amp;gt;h&amp;lt;/em&amp;gt;&amp;lt;sup&amp;gt;&amp;lt;em&amp;gt;b&amp;lt;/em&amp;gt;&amp;lt;em&amp;gt;l&amp;lt;/em&amp;gt;&amp;lt;em&amp;gt;o&amp;lt;/em&amp;gt;&amp;lt;em&amp;gt;c&amp;lt;/em&amp;gt;&amp;lt;em&amp;gt;k&amp;lt;/em&amp;gt;&amp;lt;em&amp;gt;s&amp;lt;/em&amp;gt;&amp;lt;/sup&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;br /&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;quot;sourceCode&amp;quot; id=&amp;quot;cb1&amp;quot;&amp;gt;&amp;lt;pre class=&amp;quot;sourceCode python&amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;sourceCode python&amp;quot;&amp;gt;&amp;lt;span id=&amp;quot;cb1-1&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;#cb1-1&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;span class=&amp;quot;kw&amp;quot;&amp;gt;def&amp;lt;/span&amp;gt; my_functino():&amp;lt;/span&amp;gt;
&amp;lt;span id=&amp;quot;cb1-2&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;#cb1-2&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;    mystring &amp;lt;span class=&amp;quot;op&amp;quot;&amp;gt;=&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;st&amp;quot;&amp;gt;&amp;amp;quot;you can also include python cells&amp;amp;quot;&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;span id=&amp;quot;cb1-3&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;#cb1-3&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;    &amp;lt;span class=&amp;quot;cf&amp;quot;&amp;gt;return&amp;lt;/span&amp;gt; mystring&amp;lt;/span&amp;gt;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div class=&amp;quot;cell markdown&amp;quot; data-tags=&amp;quot;[&amp;amp;quot;heresatag&amp;amp;quot;]&amp;quot;&amp;gt;
&amp;lt;h1 id=&amp;quot;code-cells&amp;quot;&amp;gt;Code cells&amp;lt;/h1&amp;gt;
&amp;lt;h2 id=&amp;quot;matplotlib-output-with-metadata&amp;quot;&amp;gt;Matplotlib output with metadata&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;The below code cell has some metadata attached to it. It also outputs a figure. Both should be included in the output format.&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div class=&amp;quot;cell code&amp;quot; data-execution_count=&amp;quot;7&amp;quot; data-slideshow=&amp;quot;{&amp;amp;quot;slide_type&amp;amp;quot;:&amp;amp;quot;subslide&amp;amp;quot;}&amp;quot; data-tags=&amp;quot;[&amp;amp;quot;mytag&amp;amp;quot;,&amp;amp;quot;parameters&amp;amp;quot;]&amp;quot;&amp;gt;
&amp;lt;div class=&amp;quot;sourceCode&amp;quot; id=&amp;quot;cb2&amp;quot;&amp;gt;&amp;lt;pre class=&amp;quot;sourceCode python&amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;sourceCode python&amp;quot;&amp;gt;&amp;lt;span id=&amp;quot;cb2-1&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;#cb2-1&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;span class=&amp;quot;im&amp;quot;&amp;gt;from&amp;lt;/span&amp;gt; matplotlib &amp;lt;span class=&amp;quot;im&amp;quot;&amp;gt;import&amp;lt;/span&amp;gt; rcParams, cycler&amp;lt;/span&amp;gt;
&amp;lt;span id=&amp;quot;cb2-2&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;#cb2-2&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;span class=&amp;quot;im&amp;quot;&amp;gt;import&amp;lt;/span&amp;gt; matplotlib.pyplot &amp;lt;span class=&amp;quot;im&amp;quot;&amp;gt;as&amp;lt;/span&amp;gt; plt&amp;lt;/span&amp;gt;
&amp;lt;span id=&amp;quot;cb2-3&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;#cb2-3&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;span class=&amp;quot;im&amp;quot;&amp;gt;import&amp;lt;/span&amp;gt; numpy &amp;lt;span class=&amp;quot;im&amp;quot;&amp;gt;as&amp;lt;/span&amp;gt; np&amp;lt;/span&amp;gt;
&amp;lt;span id=&amp;quot;cb2-4&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;#cb2-4&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;plt.ion()&amp;lt;/span&amp;gt;
&amp;lt;span id=&amp;quot;cb2-5&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;#cb2-5&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;span id=&amp;quot;cb2-6&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;#cb2-6&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;data &amp;lt;span class=&amp;quot;op&amp;quot;&amp;gt;=&amp;lt;/span&amp;gt; np.random.rand(&amp;lt;span class=&amp;quot;dv&amp;quot;&amp;gt;2&amp;lt;/span&amp;gt;, &amp;lt;span class=&amp;quot;dv&amp;quot;&amp;gt;1000&amp;lt;/span&amp;gt;) &amp;lt;span class=&amp;quot;op&amp;quot;&amp;gt;*&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;dv&amp;quot;&amp;gt;100&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;span id=&amp;quot;cb2-7&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;#cb2-7&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;fig, ax &amp;lt;span class=&amp;quot;op&amp;quot;&amp;gt;=&amp;lt;/span&amp;gt; plt.subplots()&amp;lt;/span&amp;gt;
&amp;lt;span id=&amp;quot;cb2-8&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;#cb2-8&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;ax.scatter(&amp;lt;span class=&amp;quot;op&amp;quot;&amp;gt;*&amp;lt;/span&amp;gt;data, s&amp;lt;span class=&amp;quot;op&amp;quot;&amp;gt;=&amp;lt;/span&amp;gt;data[&amp;lt;span class=&amp;quot;dv&amp;quot;&amp;gt;1&amp;lt;/span&amp;gt;], c&amp;lt;span class=&amp;quot;op&amp;quot;&amp;gt;=&amp;lt;/span&amp;gt;data[&amp;lt;span class=&amp;quot;dv&amp;quot;&amp;gt;0&amp;lt;/span&amp;gt;])&amp;lt;/span&amp;gt;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;div class=&amp;quot;output execute_result&amp;quot; data-execution_count=&amp;quot;7&amp;quot;&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;&amp;amp;lt;matplotlib.collections.PathCollection at 0x7f6e8d6269e8&amp;amp;gt;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div class=&amp;quot;output display_data&amp;quot;&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;img src=&amp;quot;outputs/images/e843a737607d119ec5b2750a2bb737c915f1b6e8.png&amp;quot; /&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div class=&amp;quot;cell markdown&amp;quot;&amp;gt;
&amp;lt;h2 id=&amp;quot;dataframes&amp;quot;&amp;gt;DataFrames&amp;lt;/h2&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div class=&amp;quot;cell code&amp;quot; data-execution_count=&amp;quot;8&amp;quot;&amp;gt;
&amp;lt;div class=&amp;quot;sourceCode&amp;quot; id=&amp;quot;cb4&amp;quot;&amp;gt;&amp;lt;pre class=&amp;quot;sourceCode python&amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;sourceCode python&amp;quot;&amp;gt;&amp;lt;span id=&amp;quot;cb4-1&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;#cb4-1&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;span class=&amp;quot;im&amp;quot;&amp;gt;import&amp;lt;/span&amp;gt; pandas &amp;lt;span class=&amp;quot;im&amp;quot;&amp;gt;as&amp;lt;/span&amp;gt; pd&amp;lt;/span&amp;gt;
&amp;lt;span id=&amp;quot;cb4-2&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;#cb4-2&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;pd.DataFrame([[&amp;lt;span class=&amp;quot;st&amp;quot;&amp;gt;&amp;amp;#39;hi&amp;amp;#39;&amp;lt;/span&amp;gt;, &amp;lt;span class=&amp;quot;st&amp;quot;&amp;gt;&amp;amp;#39;there&amp;amp;#39;&amp;lt;/span&amp;gt;], [&amp;lt;span class=&amp;quot;st&amp;quot;&amp;gt;&amp;amp;#39;this&amp;amp;#39;&amp;lt;/span&amp;gt;, &amp;lt;span class=&amp;quot;st&amp;quot;&amp;gt;&amp;amp;#39;is&amp;amp;#39;&amp;lt;/span&amp;gt;], [&amp;lt;span class=&amp;quot;st&amp;quot;&amp;gt;&amp;amp;#39;a&amp;amp;#39;&amp;lt;/span&amp;gt;, &amp;lt;span class=&amp;quot;st&amp;quot;&amp;gt;&amp;amp;#39;DataFrame&amp;amp;#39;&amp;lt;/span&amp;gt;]], columns&amp;lt;span class=&amp;quot;op&amp;quot;&amp;gt;=&amp;lt;/span&amp;gt;[&amp;lt;span class=&amp;quot;st&amp;quot;&amp;gt;&amp;amp;#39;Word A&amp;amp;#39;&amp;lt;/span&amp;gt;, &amp;lt;span class=&amp;quot;st&amp;quot;&amp;gt;&amp;amp;#39;Word B&amp;amp;#39;&amp;lt;/span&amp;gt;])&amp;lt;/span&amp;gt;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;div class=&amp;quot;output execute_result&amp;quot; data-execution_count=&amp;quot;8&amp;quot;&amp;gt;
&amp;lt;div&amp;gt;
&amp;lt;style scoped&amp;gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&amp;lt;/style&amp;gt;
&amp;lt;table border=&amp;quot;1&amp;quot; class=&amp;quot;dataframe&amp;quot;&amp;gt;
  &amp;lt;thead&amp;gt;
    &amp;lt;tr style=&amp;quot;text-align: right;&amp;quot;&amp;gt;
      &amp;lt;th&amp;gt;&amp;lt;/th&amp;gt;
      &amp;lt;th&amp;gt;Word A&amp;lt;/th&amp;gt;
      &amp;lt;th&amp;gt;Word B&amp;lt;/th&amp;gt;
    &amp;lt;/tr&amp;gt;
  &amp;lt;/thead&amp;gt;
  &amp;lt;tbody&amp;gt;
    &amp;lt;tr&amp;gt;
      &amp;lt;th&amp;gt;0&amp;lt;/th&amp;gt;
      &amp;lt;td&amp;gt;hi&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;there&amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
    &amp;lt;tr&amp;gt;
      &amp;lt;th&amp;gt;1&amp;lt;/th&amp;gt;
      &amp;lt;td&amp;gt;this&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;is&amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
    &amp;lt;tr&amp;gt;
      &amp;lt;th&amp;gt;2&amp;lt;/th&amp;gt;
      &amp;lt;td&amp;gt;a&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;DataFrame&amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
  &amp;lt;/tbody&amp;gt;
&amp;lt;/table&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div class=&amp;quot;cell markdown&amp;quot;&amp;gt;
&amp;lt;h1 id=&amp;quot;bibliography&amp;quot;&amp;gt;Bibliography&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;Let&amp;#39;s test the bibliography here&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Testing this [bibliography @holdgraf_rapid_2016]&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;@holdgraf_evidence_2014&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div class=&amp;quot;cell markdown&amp;quot;&amp;gt;
&amp;lt;h3 id=&amp;quot;the-actual-bibliography&amp;quot;&amp;gt;The actual bibliography&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;The bibliography will be placed at the end of the file&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now we’ve got something a little bit cleaner without all the hard-coded HTML. The &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;:::&lt;/span&gt;&lt;/code&gt; fences
are how Pandoc-flavored markdown denote different divs, and cell-level metadata is encoded
similar to how GFM worked.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="ipynb-to-html"&gt;
&lt;h1&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;.ipynb&lt;/span&gt;&lt;/code&gt; to HTML&lt;/h1&gt;
&lt;p&gt;Next let’s try converting &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;.ipynb&lt;/span&gt;&lt;/code&gt; to HTML. This should let us view the notebook as a web-page
as well as include all of the extra metadata inside the HTML elements. We’ll start with
a vanilla HTML conversion. Note that the only thing we had to do was change the output
file extension to &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;.html&lt;/span&gt;&lt;/code&gt; and Pandoc inferred the output type for us:&lt;/p&gt;
&lt;div class="cell tag_hide_output docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# ipynb -&amp;gt; HTML&lt;/span&gt;
&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pandoc pandoc_ipynb/inputs/notebooks.ipynb --resource-path=inputs -s --extract-media=outputs/images&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;div class="output stream highlight-myst-ansi notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html xmlns=&amp;quot;http://www.w3.org/1999/xhtml&amp;quot; lang=&amp;quot;&amp;quot; xml:lang=&amp;quot;&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;meta charset=&amp;quot;utf-8&amp;quot; /&amp;gt;
  &amp;lt;meta name=&amp;quot;generator&amp;quot; content=&amp;quot;pandoc&amp;quot; /&amp;gt;
  &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1.0, user-scalable=yes&amp;quot; /&amp;gt;
  &amp;lt;title&amp;gt;notebooks&amp;lt;/title&amp;gt;
  &amp;lt;style&amp;gt;
      code{white-space: pre-wrap;}
      span.smallcaps{font-variant: small-caps;}
      span.underline{text-decoration: underline;}
      div.column{display: inline-block; vertical-align: top; width: 50%;}
  &amp;lt;/style&amp;gt;
  &amp;lt;style&amp;gt;
code.sourceCode &amp;gt; span { display: inline-block; line-height: 1.25; }
code.sourceCode &amp;gt; span { color: inherit; text-decoration: inherit; }
code.sourceCode &amp;gt; span:empty { height: 1.2em; }
.sourceCode { overflow: visible; }
code.sourceCode { white-space: pre; position: relative; }
div.sourceCode { margin: 1em 0; }
pre.sourceCode { margin: 0; }
@media screen {
div.sourceCode { overflow: auto; }
}
@media print {
code.sourceCode { white-space: pre-wrap; }
code.sourceCode &amp;gt; span { text-indent: -5em; padding-left: 5em; }
}
pre.numberSource code
  { counter-reset: source-line 0; }
pre.numberSource code &amp;gt; span
  { position: relative; left: -4em; counter-increment: source-line; }
pre.numberSource code &amp;gt; span &amp;gt; a:first-child::before
  { content: counter(source-line);
    position: relative; left: -1em; text-align: right; vertical-align: baseline;
    border: none; display: inline-block;
    -webkit-touch-callout: none; -webkit-user-select: none;
    -khtml-user-select: none; -moz-user-select: none;
    -ms-user-select: none; user-select: none;
    padding: 0 4px; width: 4em;
    color: #aaaaaa;
  }
pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }
div.sourceCode
  {   }
@media screen {
code.sourceCode &amp;gt; span &amp;gt; a:first-child::before { text-decoration: underline; }
}
code span.al { color: #ff0000; font-weight: bold; } /* Alert */
code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
code span.at { color: #7d9029; } /* Attribute */
code span.bn { color: #40a070; } /* BaseN */
code span.bu { } /* BuiltIn */
code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
code span.ch { color: #4070a0; } /* Char */
code span.cn { color: #880000; } /* Constant */
code span.co { color: #60a0b0; font-style: italic; } /* Comment */
code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
code span.do { color: #ba2121; font-style: italic; } /* Documentation */
code span.dt { color: #902000; } /* DataType */
code span.dv { color: #40a070; } /* DecVal */
code span.er { color: #ff0000; font-weight: bold; } /* Error */
code span.ex { } /* Extension */
code span.fl { color: #40a070; } /* Float */
code span.fu { color: #06287e; } /* Function */
code span.im { } /* Import */
code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
code span.kw { color: #007020; font-weight: bold; } /* Keyword */
code span.op { color: #666666; } /* Operator */
code span.ot { color: #007020; } /* Other */
code span.pp { color: #bc7a00; } /* Preprocessor */
code span.sc { color: #4070a0; } /* SpecialChar */
code span.ss { color: #bb6688; } /* SpecialString */
code span.st { color: #4070a0; } /* String */
code span.va { color: #19177c; } /* Variable */
code span.vs { color: #4070a0; } /* VerbatimString */
code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
  &amp;lt;/style&amp;gt;
  &amp;lt;!--[if lt IE 9]&amp;gt;
    &amp;lt;script src=&amp;quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;![endif]--&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;div class=&amp;quot;cell markdown&amp;quot;&amp;gt;
&amp;lt;h1 id=&amp;quot;heres-a-demo-notebook&amp;quot;&amp;gt;Here&amp;#39;s a demo notebook&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;This is a demo notebook to play around with the pandoc ipynb support&amp;lt;/p&amp;gt;
&amp;lt;h2 id=&amp;quot;markdown&amp;quot;&amp;gt;Markdown&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;As it is markdown, you can embed images, HTML, etc into your posts!&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;img src=&amp;quot;outputs/images/ca17e56d65946db885db7f8f50a9605a6a94e6a7.jpg&amp;quot; /&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Here&amp;#39;s one &amp;lt;span class=&amp;quot;math inline&amp;quot;&amp;gt;&amp;lt;em&amp;gt;i&amp;lt;/em&amp;gt;&amp;lt;em&amp;gt;n&amp;lt;/em&amp;gt;&amp;lt;em&amp;gt;l&amp;lt;/em&amp;gt;&amp;lt;em&amp;gt;i&amp;lt;/em&amp;gt;&amp;lt;em&amp;gt;n&amp;lt;/em&amp;gt;&amp;lt;em&amp;gt;e&amp;lt;/em&amp;gt;&amp;lt;sub&amp;gt;&amp;lt;em&amp;gt;m&amp;lt;/em&amp;gt;&amp;lt;em&amp;gt;a&amp;lt;/em&amp;gt;&amp;lt;em&amp;gt;t&amp;lt;/em&amp;gt;&amp;lt;em&amp;gt;h&amp;lt;/em&amp;gt;&amp;lt;/sub&amp;gt;&amp;lt;/span&amp;gt; and&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;br /&amp;gt;&amp;lt;span class=&amp;quot;math display&amp;quot;&amp;gt;&amp;lt;em&amp;gt;m&amp;lt;/em&amp;gt;&amp;lt;em&amp;gt;a&amp;lt;/em&amp;gt;&amp;lt;em&amp;gt;t&amp;lt;/em&amp;gt;&amp;lt;em&amp;gt;h&amp;lt;/em&amp;gt;&amp;lt;sup&amp;gt;&amp;lt;em&amp;gt;b&amp;lt;/em&amp;gt;&amp;lt;em&amp;gt;l&amp;lt;/em&amp;gt;&amp;lt;em&amp;gt;o&amp;lt;/em&amp;gt;&amp;lt;em&amp;gt;c&amp;lt;/em&amp;gt;&amp;lt;em&amp;gt;k&amp;lt;/em&amp;gt;&amp;lt;em&amp;gt;s&amp;lt;/em&amp;gt;&amp;lt;/sup&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;br /&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;quot;sourceCode&amp;quot; id=&amp;quot;cb1&amp;quot;&amp;gt;&amp;lt;pre class=&amp;quot;sourceCode python&amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;sourceCode python&amp;quot;&amp;gt;&amp;lt;span id=&amp;quot;cb1-1&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;#cb1-1&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;span class=&amp;quot;kw&amp;quot;&amp;gt;def&amp;lt;/span&amp;gt; my_functino():&amp;lt;/span&amp;gt;
&amp;lt;span id=&amp;quot;cb1-2&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;#cb1-2&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;    mystring &amp;lt;span class=&amp;quot;op&amp;quot;&amp;gt;=&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;st&amp;quot;&amp;gt;&amp;amp;quot;you can also include python cells&amp;amp;quot;&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;span id=&amp;quot;cb1-3&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;#cb1-3&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;    &amp;lt;span class=&amp;quot;cf&amp;quot;&amp;gt;return&amp;lt;/span&amp;gt; mystring&amp;lt;/span&amp;gt;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div class=&amp;quot;cell markdown&amp;quot; data-tags=&amp;quot;[&amp;amp;quot;heresatag&amp;amp;quot;]&amp;quot;&amp;gt;
&amp;lt;h1 id=&amp;quot;code-cells&amp;quot;&amp;gt;Code cells&amp;lt;/h1&amp;gt;
&amp;lt;h2 id=&amp;quot;matplotlib-output-with-metadata&amp;quot;&amp;gt;Matplotlib output with metadata&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;The below code cell has some metadata attached to it. It also outputs a figure. Both should be included in the output format.&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div class=&amp;quot;cell code&amp;quot; data-execution_count=&amp;quot;7&amp;quot; data-slideshow=&amp;quot;{&amp;amp;quot;slide_type&amp;amp;quot;:&amp;amp;quot;subslide&amp;amp;quot;}&amp;quot; data-tags=&amp;quot;[&amp;amp;quot;mytag&amp;amp;quot;,&amp;amp;quot;parameters&amp;amp;quot;]&amp;quot;&amp;gt;
&amp;lt;div class=&amp;quot;sourceCode&amp;quot; id=&amp;quot;cb2&amp;quot;&amp;gt;&amp;lt;pre class=&amp;quot;sourceCode python&amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;sourceCode python&amp;quot;&amp;gt;&amp;lt;span id=&amp;quot;cb2-1&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;#cb2-1&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;span class=&amp;quot;im&amp;quot;&amp;gt;from&amp;lt;/span&amp;gt; matplotlib &amp;lt;span class=&amp;quot;im&amp;quot;&amp;gt;import&amp;lt;/span&amp;gt; rcParams, cycler&amp;lt;/span&amp;gt;
&amp;lt;span id=&amp;quot;cb2-2&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;#cb2-2&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;span class=&amp;quot;im&amp;quot;&amp;gt;import&amp;lt;/span&amp;gt; matplotlib.pyplot &amp;lt;span class=&amp;quot;im&amp;quot;&amp;gt;as&amp;lt;/span&amp;gt; plt&amp;lt;/span&amp;gt;
&amp;lt;span id=&amp;quot;cb2-3&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;#cb2-3&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;span class=&amp;quot;im&amp;quot;&amp;gt;import&amp;lt;/span&amp;gt; numpy &amp;lt;span class=&amp;quot;im&amp;quot;&amp;gt;as&amp;lt;/span&amp;gt; np&amp;lt;/span&amp;gt;
&amp;lt;span id=&amp;quot;cb2-4&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;#cb2-4&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;plt.ion()&amp;lt;/span&amp;gt;
&amp;lt;span id=&amp;quot;cb2-5&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;#cb2-5&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;span id=&amp;quot;cb2-6&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;#cb2-6&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;data &amp;lt;span class=&amp;quot;op&amp;quot;&amp;gt;=&amp;lt;/span&amp;gt; np.random.rand(&amp;lt;span class=&amp;quot;dv&amp;quot;&amp;gt;2&amp;lt;/span&amp;gt;, &amp;lt;span class=&amp;quot;dv&amp;quot;&amp;gt;1000&amp;lt;/span&amp;gt;) &amp;lt;span class=&amp;quot;op&amp;quot;&amp;gt;*&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;dv&amp;quot;&amp;gt;100&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;span id=&amp;quot;cb2-7&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;#cb2-7&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;fig, ax &amp;lt;span class=&amp;quot;op&amp;quot;&amp;gt;=&amp;lt;/span&amp;gt; plt.subplots()&amp;lt;/span&amp;gt;
&amp;lt;span id=&amp;quot;cb2-8&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;#cb2-8&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;ax.scatter(&amp;lt;span class=&amp;quot;op&amp;quot;&amp;gt;*&amp;lt;/span&amp;gt;data, s&amp;lt;span class=&amp;quot;op&amp;quot;&amp;gt;=&amp;lt;/span&amp;gt;data[&amp;lt;span class=&amp;quot;dv&amp;quot;&amp;gt;1&amp;lt;/span&amp;gt;], c&amp;lt;span class=&amp;quot;op&amp;quot;&amp;gt;=&amp;lt;/span&amp;gt;data[&amp;lt;span class=&amp;quot;dv&amp;quot;&amp;gt;0&amp;lt;/span&amp;gt;])&amp;lt;/span&amp;gt;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;div class=&amp;quot;output execute_result&amp;quot; data-execution_count=&amp;quot;7&amp;quot;&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;&amp;amp;lt;matplotlib.collections.PathCollection at 0x7f6e8d6269e8&amp;amp;gt;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div class=&amp;quot;output display_data&amp;quot;&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;img src=&amp;quot;outputs/images/e843a737607d119ec5b2750a2bb737c915f1b6e8.png&amp;quot; /&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div class=&amp;quot;cell markdown&amp;quot;&amp;gt;
&amp;lt;h2 id=&amp;quot;dataframes&amp;quot;&amp;gt;DataFrames&amp;lt;/h2&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div class=&amp;quot;cell code&amp;quot; data-execution_count=&amp;quot;8&amp;quot;&amp;gt;
&amp;lt;div class=&amp;quot;sourceCode&amp;quot; id=&amp;quot;cb4&amp;quot;&amp;gt;&amp;lt;pre class=&amp;quot;sourceCode python&amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;sourceCode python&amp;quot;&amp;gt;&amp;lt;span id=&amp;quot;cb4-1&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;#cb4-1&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;span class=&amp;quot;im&amp;quot;&amp;gt;import&amp;lt;/span&amp;gt; pandas &amp;lt;span class=&amp;quot;im&amp;quot;&amp;gt;as&amp;lt;/span&amp;gt; pd&amp;lt;/span&amp;gt;
&amp;lt;span id=&amp;quot;cb4-2&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;#cb4-2&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;pd.DataFrame([[&amp;lt;span class=&amp;quot;st&amp;quot;&amp;gt;&amp;amp;#39;hi&amp;amp;#39;&amp;lt;/span&amp;gt;, &amp;lt;span class=&amp;quot;st&amp;quot;&amp;gt;&amp;amp;#39;there&amp;amp;#39;&amp;lt;/span&amp;gt;], [&amp;lt;span class=&amp;quot;st&amp;quot;&amp;gt;&amp;amp;#39;this&amp;amp;#39;&amp;lt;/span&amp;gt;, &amp;lt;span class=&amp;quot;st&amp;quot;&amp;gt;&amp;amp;#39;is&amp;amp;#39;&amp;lt;/span&amp;gt;], [&amp;lt;span class=&amp;quot;st&amp;quot;&amp;gt;&amp;amp;#39;a&amp;amp;#39;&amp;lt;/span&amp;gt;, &amp;lt;span class=&amp;quot;st&amp;quot;&amp;gt;&amp;amp;#39;DataFrame&amp;amp;#39;&amp;lt;/span&amp;gt;]], columns&amp;lt;span class=&amp;quot;op&amp;quot;&amp;gt;=&amp;lt;/span&amp;gt;[&amp;lt;span class=&amp;quot;st&amp;quot;&amp;gt;&amp;amp;#39;Word A&amp;amp;#39;&amp;lt;/span&amp;gt;, &amp;lt;span class=&amp;quot;st&amp;quot;&amp;gt;&amp;amp;#39;Word B&amp;amp;#39;&amp;lt;/span&amp;gt;])&amp;lt;/span&amp;gt;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;div class=&amp;quot;output execute_result&amp;quot; data-execution_count=&amp;quot;8&amp;quot;&amp;gt;
&amp;lt;div&amp;gt;
&amp;lt;style scoped&amp;gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&amp;lt;/style&amp;gt;
&amp;lt;table border=&amp;quot;1&amp;quot; class=&amp;quot;dataframe&amp;quot;&amp;gt;
  &amp;lt;thead&amp;gt;
    &amp;lt;tr style=&amp;quot;text-align: right;&amp;quot;&amp;gt;
      &amp;lt;th&amp;gt;&amp;lt;/th&amp;gt;
      &amp;lt;th&amp;gt;Word A&amp;lt;/th&amp;gt;
      &amp;lt;th&amp;gt;Word B&amp;lt;/th&amp;gt;
    &amp;lt;/tr&amp;gt;
  &amp;lt;/thead&amp;gt;
  &amp;lt;tbody&amp;gt;
    &amp;lt;tr&amp;gt;
      &amp;lt;th&amp;gt;0&amp;lt;/th&amp;gt;
      &amp;lt;td&amp;gt;hi&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;there&amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
    &amp;lt;tr&amp;gt;
      &amp;lt;th&amp;gt;1&amp;lt;/th&amp;gt;
      &amp;lt;td&amp;gt;this&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;is&amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
    &amp;lt;tr&amp;gt;
      &amp;lt;th&amp;gt;2&amp;lt;/th&amp;gt;
      &amp;lt;td&amp;gt;a&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;DataFrame&amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
  &amp;lt;/tbody&amp;gt;
&amp;lt;/table&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div class=&amp;quot;cell markdown&amp;quot;&amp;gt;
&amp;lt;h1 id=&amp;quot;bibliography&amp;quot;&amp;gt;Bibliography&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;Let&amp;#39;s test the bibliography here&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Testing this [bibliography @holdgraf_rapid_2016]&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;@holdgraf_evidence_2014&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div class=&amp;quot;cell markdown&amp;quot;&amp;gt;
&amp;lt;h3 id=&amp;quot;the-actual-bibliography&amp;quot;&amp;gt;The actual bibliography&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;The bibliography will be placed at the end of the file&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This time our math rendered properly, along with everything else except for the
bibliography. Let’s get that working now.&lt;/p&gt;
&lt;p&gt;We’ve included a bibliography with our input file. With this (and using the
&lt;a class="reference external" href="https://pandoc.org/demo/example19/Extension-citations.html"&gt;citeproc citation style&lt;/a&gt;, we can use &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pandoc-citeproc&lt;/span&gt;&lt;/code&gt; to automatically render a
bibliography within each page. To do so, we’ve used the following extra options:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;--bibliography&lt;/span&gt;&lt;/code&gt; specifies the path to a BibTex file&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;-f&lt;/span&gt; &lt;span class="pre"&gt;ipynb+citations&lt;/span&gt;&lt;/code&gt; tells Pandoc that our &lt;em&gt;input&lt;/em&gt; format has citations in it. Before, the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ipynb&lt;/span&gt;&lt;/code&gt; was
inferred from the input extension. Now we’ve made it explicit as well.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="cell tag_hide_output docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# ipynb -&amp;gt; HTML with citations&lt;/span&gt;
&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pandoc pandoc_ipynb/inputs/notebooks.ipynb -f ipynb+citations --bibliography pandoc_ipynb/inputsreferences.bib --resource-path=inputs -s --extract-media=outputs/images&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;div class="output stream highlight-myst-ansi notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html xmlns=&amp;quot;http://www.w3.org/1999/xhtml&amp;quot; lang=&amp;quot;&amp;quot; xml:lang=&amp;quot;&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;meta charset=&amp;quot;utf-8&amp;quot; /&amp;gt;
  &amp;lt;meta name=&amp;quot;generator&amp;quot; content=&amp;quot;pandoc&amp;quot; /&amp;gt;
  &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1.0, user-scalable=yes&amp;quot; /&amp;gt;
  &amp;lt;title&amp;gt;notebooks&amp;lt;/title&amp;gt;
  &amp;lt;style&amp;gt;
      code{white-space: pre-wrap;}
      span.smallcaps{font-variant: small-caps;}
      span.underline{text-decoration: underline;}
      div.column{display: inline-block; vertical-align: top; width: 50%;}
  &amp;lt;/style&amp;gt;
  &amp;lt;style&amp;gt;
code.sourceCode &amp;gt; span { display: inline-block; line-height: 1.25; }
code.sourceCode &amp;gt; span { color: inherit; text-decoration: inherit; }
code.sourceCode &amp;gt; span:empty { height: 1.2em; }
.sourceCode { overflow: visible; }
code.sourceCode { white-space: pre; position: relative; }
div.sourceCode { margin: 1em 0; }
pre.sourceCode { margin: 0; }
@media screen {
div.sourceCode { overflow: auto; }
}
@media print {
code.sourceCode { white-space: pre-wrap; }
code.sourceCode &amp;gt; span { text-indent: -5em; padding-left: 5em; }
}
pre.numberSource code
  { counter-reset: source-line 0; }
pre.numberSource code &amp;gt; span
  { position: relative; left: -4em; counter-increment: source-line; }
pre.numberSource code &amp;gt; span &amp;gt; a:first-child::before
  { content: counter(source-line);
    position: relative; left: -1em; text-align: right; vertical-align: baseline;
    border: none; display: inline-block;
    -webkit-touch-callout: none; -webkit-user-select: none;
    -khtml-user-select: none; -moz-user-select: none;
    -ms-user-select: none; user-select: none;
    padding: 0 4px; width: 4em;
    color: #aaaaaa;
  }
pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }
div.sourceCode
  {   }
@media screen {
code.sourceCode &amp;gt; span &amp;gt; a:first-child::before { text-decoration: underline; }
}
code span.al { color: #ff0000; font-weight: bold; } /* Alert */
code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
code span.at { color: #7d9029; } /* Attribute */
code span.bn { color: #40a070; } /* BaseN */
code span.bu { } /* BuiltIn */
code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
code span.ch { color: #4070a0; } /* Char */
code span.cn { color: #880000; } /* Constant */
code span.co { color: #60a0b0; font-style: italic; } /* Comment */
code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
code span.do { color: #ba2121; font-style: italic; } /* Documentation */
code span.dt { color: #902000; } /* DataType */
code span.dv { color: #40a070; } /* DecVal */
code span.er { color: #ff0000; font-weight: bold; } /* Error */
code span.ex { } /* Extension */
code span.fl { color: #40a070; } /* Float */
code span.fu { color: #06287e; } /* Function */
code span.im { } /* Import */
code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
code span.kw { color: #007020; font-weight: bold; } /* Keyword */
code span.op { color: #666666; } /* Operator */
code span.ot { color: #007020; } /* Other */
code span.pp { color: #bc7a00; } /* Preprocessor */
code span.sc { color: #4070a0; } /* SpecialChar */
code span.ss { color: #bb6688; } /* SpecialString */
code span.st { color: #4070a0; } /* String */
code span.va { color: #19177c; } /* Variable */
code span.vs { color: #4070a0; } /* VerbatimString */
code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
  &amp;lt;/style&amp;gt;
  &amp;lt;!--[if lt IE 9]&amp;gt;
    &amp;lt;script src=&amp;quot;//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;![endif]--&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;div class=&amp;quot;cell markdown&amp;quot;&amp;gt;
&amp;lt;h1 id=&amp;quot;heres-a-demo-notebook&amp;quot;&amp;gt;Here&amp;#39;s a demo notebook&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;This is a demo notebook to play around with the pandoc ipynb support&amp;lt;/p&amp;gt;
&amp;lt;h2 id=&amp;quot;markdown&amp;quot;&amp;gt;Markdown&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;As it is markdown, you can embed images, HTML, etc into your posts!&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;img src=&amp;quot;outputs/images/ca17e56d65946db885db7f8f50a9605a6a94e6a7.jpg&amp;quot; /&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Here&amp;#39;s one &amp;lt;span class=&amp;quot;math inline&amp;quot;&amp;gt;&amp;lt;em&amp;gt;i&amp;lt;/em&amp;gt;&amp;lt;em&amp;gt;n&amp;lt;/em&amp;gt;&amp;lt;em&amp;gt;l&amp;lt;/em&amp;gt;&amp;lt;em&amp;gt;i&amp;lt;/em&amp;gt;&amp;lt;em&amp;gt;n&amp;lt;/em&amp;gt;&amp;lt;em&amp;gt;e&amp;lt;/em&amp;gt;&amp;lt;sub&amp;gt;&amp;lt;em&amp;gt;m&amp;lt;/em&amp;gt;&amp;lt;em&amp;gt;a&amp;lt;/em&amp;gt;&amp;lt;em&amp;gt;t&amp;lt;/em&amp;gt;&amp;lt;em&amp;gt;h&amp;lt;/em&amp;gt;&amp;lt;/sub&amp;gt;&amp;lt;/span&amp;gt; and&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;br /&amp;gt;&amp;lt;span class=&amp;quot;math display&amp;quot;&amp;gt;&amp;lt;em&amp;gt;m&amp;lt;/em&amp;gt;&amp;lt;em&amp;gt;a&amp;lt;/em&amp;gt;&amp;lt;em&amp;gt;t&amp;lt;/em&amp;gt;&amp;lt;em&amp;gt;h&amp;lt;/em&amp;gt;&amp;lt;sup&amp;gt;&amp;lt;em&amp;gt;b&amp;lt;/em&amp;gt;&amp;lt;em&amp;gt;l&amp;lt;/em&amp;gt;&amp;lt;em&amp;gt;o&amp;lt;/em&amp;gt;&amp;lt;em&amp;gt;c&amp;lt;/em&amp;gt;&amp;lt;em&amp;gt;k&amp;lt;/em&amp;gt;&amp;lt;em&amp;gt;s&amp;lt;/em&amp;gt;&amp;lt;/sup&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;br /&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;div class=&amp;quot;sourceCode&amp;quot; id=&amp;quot;cb1&amp;quot;&amp;gt;&amp;lt;pre class=&amp;quot;sourceCode python&amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;sourceCode python&amp;quot;&amp;gt;&amp;lt;span id=&amp;quot;cb1-1&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;#cb1-1&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;span class=&amp;quot;kw&amp;quot;&amp;gt;def&amp;lt;/span&amp;gt; my_functino():&amp;lt;/span&amp;gt;
&amp;lt;span id=&amp;quot;cb1-2&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;#cb1-2&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;    mystring &amp;lt;span class=&amp;quot;op&amp;quot;&amp;gt;=&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;st&amp;quot;&amp;gt;&amp;amp;quot;you can also include python cells&amp;amp;quot;&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;span id=&amp;quot;cb1-3&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;#cb1-3&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;    &amp;lt;span class=&amp;quot;cf&amp;quot;&amp;gt;return&amp;lt;/span&amp;gt; mystring&amp;lt;/span&amp;gt;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div class=&amp;quot;cell markdown&amp;quot; data-tags=&amp;quot;[&amp;amp;quot;heresatag&amp;amp;quot;]&amp;quot;&amp;gt;
&amp;lt;h1 id=&amp;quot;code-cells&amp;quot;&amp;gt;Code cells&amp;lt;/h1&amp;gt;
&amp;lt;h2 id=&amp;quot;matplotlib-output-with-metadata&amp;quot;&amp;gt;Matplotlib output with metadata&amp;lt;/h2&amp;gt;
&amp;lt;p&amp;gt;The below code cell has some metadata attached to it. It also outputs a figure. Both should be included in the output format.&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div class=&amp;quot;cell code&amp;quot; data-execution_count=&amp;quot;7&amp;quot; data-slideshow=&amp;quot;{&amp;amp;quot;slide_type&amp;amp;quot;:&amp;amp;quot;subslide&amp;amp;quot;}&amp;quot; data-tags=&amp;quot;[&amp;amp;quot;mytag&amp;amp;quot;,&amp;amp;quot;parameters&amp;amp;quot;]&amp;quot;&amp;gt;
&amp;lt;div class=&amp;quot;sourceCode&amp;quot; id=&amp;quot;cb2&amp;quot;&amp;gt;&amp;lt;pre class=&amp;quot;sourceCode python&amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;sourceCode python&amp;quot;&amp;gt;&amp;lt;span id=&amp;quot;cb2-1&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;#cb2-1&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;span class=&amp;quot;im&amp;quot;&amp;gt;from&amp;lt;/span&amp;gt; matplotlib &amp;lt;span class=&amp;quot;im&amp;quot;&amp;gt;import&amp;lt;/span&amp;gt; rcParams, cycler&amp;lt;/span&amp;gt;
&amp;lt;span id=&amp;quot;cb2-2&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;#cb2-2&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;span class=&amp;quot;im&amp;quot;&amp;gt;import&amp;lt;/span&amp;gt; matplotlib.pyplot &amp;lt;span class=&amp;quot;im&amp;quot;&amp;gt;as&amp;lt;/span&amp;gt; plt&amp;lt;/span&amp;gt;
&amp;lt;span id=&amp;quot;cb2-3&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;#cb2-3&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;span class=&amp;quot;im&amp;quot;&amp;gt;import&amp;lt;/span&amp;gt; numpy &amp;lt;span class=&amp;quot;im&amp;quot;&amp;gt;as&amp;lt;/span&amp;gt; np&amp;lt;/span&amp;gt;
&amp;lt;span id=&amp;quot;cb2-4&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;#cb2-4&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;plt.ion()&amp;lt;/span&amp;gt;
&amp;lt;span id=&amp;quot;cb2-5&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;#cb2-5&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;span id=&amp;quot;cb2-6&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;#cb2-6&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;data &amp;lt;span class=&amp;quot;op&amp;quot;&amp;gt;=&amp;lt;/span&amp;gt; np.random.rand(&amp;lt;span class=&amp;quot;dv&amp;quot;&amp;gt;2&amp;lt;/span&amp;gt;, &amp;lt;span class=&amp;quot;dv&amp;quot;&amp;gt;1000&amp;lt;/span&amp;gt;) &amp;lt;span class=&amp;quot;op&amp;quot;&amp;gt;*&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;dv&amp;quot;&amp;gt;100&amp;lt;/span&amp;gt;&amp;lt;/span&amp;gt;
&amp;lt;span id=&amp;quot;cb2-7&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;#cb2-7&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;fig, ax &amp;lt;span class=&amp;quot;op&amp;quot;&amp;gt;=&amp;lt;/span&amp;gt; plt.subplots()&amp;lt;/span&amp;gt;
&amp;lt;span id=&amp;quot;cb2-8&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;#cb2-8&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;ax.scatter(&amp;lt;span class=&amp;quot;op&amp;quot;&amp;gt;*&amp;lt;/span&amp;gt;data, s&amp;lt;span class=&amp;quot;op&amp;quot;&amp;gt;=&amp;lt;/span&amp;gt;data[&amp;lt;span class=&amp;quot;dv&amp;quot;&amp;gt;1&amp;lt;/span&amp;gt;], c&amp;lt;span class=&amp;quot;op&amp;quot;&amp;gt;=&amp;lt;/span&amp;gt;data[&amp;lt;span class=&amp;quot;dv&amp;quot;&amp;gt;0&amp;lt;/span&amp;gt;])&amp;lt;/span&amp;gt;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;div class=&amp;quot;output execute_result&amp;quot; data-execution_count=&amp;quot;7&amp;quot;&amp;gt;
&amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;&amp;amp;lt;matplotlib.collections.PathCollection at 0x7f6e8d6269e8&amp;amp;gt;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div class=&amp;quot;output display_data&amp;quot;&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;img src=&amp;quot;outputs/images/e843a737607d119ec5b2750a2bb737c915f1b6e8.png&amp;quot; /&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div class=&amp;quot;cell markdown&amp;quot;&amp;gt;
&amp;lt;h2 id=&amp;quot;dataframes&amp;quot;&amp;gt;DataFrames&amp;lt;/h2&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div class=&amp;quot;cell code&amp;quot; data-execution_count=&amp;quot;8&amp;quot;&amp;gt;
&amp;lt;div class=&amp;quot;sourceCode&amp;quot; id=&amp;quot;cb4&amp;quot;&amp;gt;&amp;lt;pre class=&amp;quot;sourceCode python&amp;quot;&amp;gt;&amp;lt;code class=&amp;quot;sourceCode python&amp;quot;&amp;gt;&amp;lt;span id=&amp;quot;cb4-1&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;#cb4-1&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;span class=&amp;quot;im&amp;quot;&amp;gt;import&amp;lt;/span&amp;gt; pandas &amp;lt;span class=&amp;quot;im&amp;quot;&amp;gt;as&amp;lt;/span&amp;gt; pd&amp;lt;/span&amp;gt;
&amp;lt;span id=&amp;quot;cb4-2&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;#cb4-2&amp;quot;&amp;gt;&amp;lt;/a&amp;gt;pd.DataFrame([[&amp;lt;span class=&amp;quot;st&amp;quot;&amp;gt;&amp;amp;#39;hi&amp;amp;#39;&amp;lt;/span&amp;gt;, &amp;lt;span class=&amp;quot;st&amp;quot;&amp;gt;&amp;amp;#39;there&amp;amp;#39;&amp;lt;/span&amp;gt;], [&amp;lt;span class=&amp;quot;st&amp;quot;&amp;gt;&amp;amp;#39;this&amp;amp;#39;&amp;lt;/span&amp;gt;, &amp;lt;span class=&amp;quot;st&amp;quot;&amp;gt;&amp;amp;#39;is&amp;amp;#39;&amp;lt;/span&amp;gt;], [&amp;lt;span class=&amp;quot;st&amp;quot;&amp;gt;&amp;amp;#39;a&amp;amp;#39;&amp;lt;/span&amp;gt;, &amp;lt;span class=&amp;quot;st&amp;quot;&amp;gt;&amp;amp;#39;DataFrame&amp;amp;#39;&amp;lt;/span&amp;gt;]], columns&amp;lt;span class=&amp;quot;op&amp;quot;&amp;gt;=&amp;lt;/span&amp;gt;[&amp;lt;span class=&amp;quot;st&amp;quot;&amp;gt;&amp;amp;#39;Word A&amp;amp;#39;&amp;lt;/span&amp;gt;, &amp;lt;span class=&amp;quot;st&amp;quot;&amp;gt;&amp;amp;#39;Word B&amp;amp;#39;&amp;lt;/span&amp;gt;])&amp;lt;/span&amp;gt;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;div class=&amp;quot;output execute_result&amp;quot; data-execution_count=&amp;quot;8&amp;quot;&amp;gt;
&amp;lt;div&amp;gt;
&amp;lt;style scoped&amp;gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&amp;lt;/style&amp;gt;
&amp;lt;table border=&amp;quot;1&amp;quot; class=&amp;quot;dataframe&amp;quot;&amp;gt;
  &amp;lt;thead&amp;gt;
    &amp;lt;tr style=&amp;quot;text-align: right;&amp;quot;&amp;gt;
      &amp;lt;th&amp;gt;&amp;lt;/th&amp;gt;
      &amp;lt;th&amp;gt;Word A&amp;lt;/th&amp;gt;
      &amp;lt;th&amp;gt;Word B&amp;lt;/th&amp;gt;
    &amp;lt;/tr&amp;gt;
  &amp;lt;/thead&amp;gt;
  &amp;lt;tbody&amp;gt;
    &amp;lt;tr&amp;gt;
      &amp;lt;th&amp;gt;0&amp;lt;/th&amp;gt;
      &amp;lt;td&amp;gt;hi&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;there&amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
    &amp;lt;tr&amp;gt;
      &amp;lt;th&amp;gt;1&amp;lt;/th&amp;gt;
      &amp;lt;td&amp;gt;this&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;is&amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
    &amp;lt;tr&amp;gt;
      &amp;lt;th&amp;gt;2&amp;lt;/th&amp;gt;
      &amp;lt;td&amp;gt;a&amp;lt;/td&amp;gt;
      &amp;lt;td&amp;gt;DataFrame&amp;lt;/td&amp;gt;
    &amp;lt;/tr&amp;gt;
  &amp;lt;/tbody&amp;gt;
&amp;lt;/table&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div class=&amp;quot;cell markdown&amp;quot;&amp;gt;
&amp;lt;h1 id=&amp;quot;bibliography&amp;quot;&amp;gt;Bibliography&amp;lt;/h1&amp;gt;
&amp;lt;p&amp;gt;Let&amp;#39;s test the bibliography here&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Testing this &amp;lt;span class=&amp;quot;citation&amp;quot; data-cites=&amp;quot;holdgraf_rapid_2016&amp;quot;&amp;gt;(bibliography Holdgraf et al. 2016)&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;span class=&amp;quot;citation&amp;quot; data-cites=&amp;quot;holdgraf_evidence_2014&amp;quot;&amp;gt;Holdgraf et al. (2014)&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div class=&amp;quot;cell markdown&amp;quot;&amp;gt;
&amp;lt;h3 id=&amp;quot;the-actual-bibliography&amp;quot;&amp;gt;The actual bibliography&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;The bibliography will be placed at the end of the file&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div id=&amp;quot;refs&amp;quot; class=&amp;quot;references&amp;quot; role=&amp;quot;doc-bibliography&amp;quot;&amp;gt;
&amp;lt;div id=&amp;quot;ref-holdgraf_evidence_2014&amp;quot;&amp;gt;
&amp;lt;p&amp;gt;Holdgraf, Christopher Ramsay, Wendy de Heer, Brian N. Pasley, and Robert T. Knight. 2014. “Evidence for Predictive Coding in Human Auditory Cortex.” In &amp;lt;em&amp;gt;International Conference on Cognitive Neuroscience&amp;lt;/em&amp;gt;. Brisbane, Australia, Australia: Frontiers in Neuroscience.&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div id=&amp;quot;ref-holdgraf_rapid_2016&amp;quot;&amp;gt;
&amp;lt;p&amp;gt;Holdgraf, Christopher Ramsay, Wendy de Heer, Brian N. Pasley, Jochem W. Rieger, Nathan Crone, Jack J. Lin, Robert T. Knight, and Frédéric E. Theunissen. 2016. “Rapid Tuning Shifts in Human Auditory Cortex Enhance Speech Intelligibility.” &amp;lt;em&amp;gt;Nature Communications&amp;lt;/em&amp;gt; 7 (May): 13654. &amp;lt;a href=&amp;quot;https://doi.org/10.1038/ncomms13654&amp;quot;&amp;gt;https://doi.org/10.1038/ncomms13654&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Now we’ve got citations at the bottom of the page, and in-line references interspersed
in the text. Pretty cool!&lt;/p&gt;
&lt;/section&gt;
&lt;section id="wrapping-up"&gt;
&lt;h1&gt;Wrapping up&lt;/h1&gt;
&lt;p&gt;It seems like we can get pretty far with converting &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;.ipynb&lt;/span&gt;&lt;/code&gt; files into
various flavors of markdown or HTML. My guess is that things will get a bit
trickier if we tried to do this with more complex cell outputs or metdata,
but it’s a good start. Using Pandoc also means that it would be relatively
straightforward to convert notebooks into &lt;strong&gt;latex&lt;/strong&gt;, &lt;strong&gt;pdf&lt;/strong&gt;, or even &lt;strong&gt;Microsoft Word&lt;/strong&gt;
format. I’ll try to dig into this more in the future.&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="https://chrisholdgraf.com/blog/2019/2019-11-11-ipynb_pandoc/" rel="alternate"/>
    <summary>For several months now, the universal document converter pandoc has
had support for Jupyter Notebooks. This means that with a single call,
you can convert .ipynb files to any of the output formats that Pandoc
supports (and vice-versa!). This post is a quick exploration of what this
looks like.Note that for this post, we’re using Pandoc version 2.7.3. Also, some of what’s below is hard
to interpret without actually opening the files that are created by Pandoc. For the sake
of this blog post, I’m going to stick with the raw text output here, though you can expand the
outputs if you wish, I recommend copy/pasting some of these commands on your own if you’d like to try.</summary>
    <category term="documentation" label="documentation"/>
    <category term="nbconvert" label="nbconvert"/>
    <category term="pandoc" label="pandoc"/>
    <published>2019-11-11T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://chrisholdgraf.com/blog/2020/sphinx-design-timeline/</id>
    <title>Build a simple timeline with sphinx-design</title>
    <updated>2020-01-22T00:00:00+00:00</updated>
    <content type="html">&lt;section id="build-a-simple-timeline-with-sphinx-design"&gt;

&lt;p&gt;One of the nice things about &lt;a class="reference external" href="https://myst-parser.readthedocs.io"&gt;MyST Markdown&lt;/a&gt; is that it is &lt;strong&gt;extensible&lt;/strong&gt;. Any Sphinx extension will work with MyST Markdown (in the context of Jupyter Book, anyway).&lt;/p&gt;
&lt;p&gt;One of my favorite Sphinx extensions is &lt;a class="reference external" href="https://sphinx-design.readthedocs.io/"&gt;Sphinx Design&lt;/a&gt;, this brings you flexible UI components that use Bootstrap CSS under the hood (though without heavy javascript). They let you do things like this:&lt;/p&gt;
&lt;div class="sd-container-fluid sd-sphinx-override sd-mb-4 docutils"&gt;
&lt;div class="sd-row sd-row-cols-2 sd-row-cols-xs-2 sd-row-cols-sm-2 sd-row-cols-md-2 sd-row-cols-lg-2 docutils"&gt;
&lt;div class="sd-col sd-d-flex-row docutils"&gt;
&lt;div class="sd-card sd-sphinx-override sd-w-100 sd-shadow-sm docutils"&gt;
&lt;div class="sd-card-header docutils"&gt;
&lt;p class="sd-card-text"&gt;A card!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="sd-card-body docutils"&gt;
&lt;p class="sd-card-text"&gt;With some content!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sd-col sd-d-flex-row docutils"&gt;
&lt;div class="sd-card sd-sphinx-override sd-w-100 sd-shadow-sm docutils"&gt;
&lt;div class="sd-card-header docutils"&gt;
&lt;p class="sd-card-text"&gt;A second card!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="sd-card-body docutils"&gt;
&lt;p class="sd-card-text"&gt;With some more content!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;I wanted to have &lt;a class="reference internal" href="../about/#about-timeline"&gt;&lt;span class="std std-ref"&gt;a nice-looking timeline&lt;/span&gt;&lt;/a&gt; for my blog, and it turns out this was surprisingly easy to do with Sphinx Panels and a bit of custom CSS. You can &lt;a class="reference internal" href="../about/#about-timeline"&gt;&lt;span class="std std-ref"&gt;check out my about page for an example&lt;/span&gt;&lt;/a&gt;, or see the little example below:&lt;/p&gt;
&lt;div class="sd-container-fluid sd-sphinx-override sd-mt-0 sd-mb-2 sd-ml-0 sd-mr-0 sd-p-0 sd-example docutils"&gt;
&lt;div class="sd-row sd-g-0 sd-g-xs-0 sd-g-sm-0 sd-g-md-0 sd-g-lg-0 docutils"&gt;
&lt;div class="sd-col sd-d-flex-column sd-col-12 sd-col-xs-12 sd-col-sm-12 sd-col-md-12 sd-col-lg-12 sd-example-item p-3 sd-example-result sd-rounded-top docutils"&gt;
&lt;div class="result-content docutils"&gt;
&lt;div class="sd-container-fluid sd-sphinx-override sd-mb-4 timeline docutils"&gt;
&lt;div class="sd-row sd-row-cols-2 sd-row-cols-xs-2 sd-row-cols-sm-2 sd-row-cols-md-2 sd-row-cols-lg-2 docutils"&gt;
&lt;div class="sd-col sd-d-flex-row entry left docutils"&gt;
&lt;div class="sd-card sd-sphinx-override sd-w-100 sd-shadow-sm docutils"&gt;
&lt;div class="sd-card-header docutils"&gt;
&lt;p class="sd-card-text"&gt;2020&lt;/p&gt;
&lt;/div&gt;
&lt;div class="sd-card-body docutils"&gt;
&lt;p class="sd-card-text"&gt;2020 body&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sd-col sd-d-flex-column right docutils"&gt;
&lt;/div&gt;
&lt;div class="sd-col sd-d-flex-column left docutils"&gt;
&lt;/div&gt;
&lt;div class="sd-col sd-d-flex-row entry right docutils"&gt;
&lt;div class="sd-card sd-sphinx-override sd-w-100 sd-shadow-sm docutils"&gt;
&lt;div class="sd-card-header docutils"&gt;
&lt;p class="sd-card-text"&gt;&lt;strong&gt;2017&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="sd-card-body docutils"&gt;
&lt;p class="sd-card-text"&gt;2017 body&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sd-col sd-d-flex-row entry left docutils"&gt;
&lt;div class="sd-card sd-sphinx-override sd-w-100 sd-shadow-sm docutils"&gt;
&lt;div class="sd-card-header docutils"&gt;
&lt;p class="sd-card-text"&gt;&lt;strong&gt;2011&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="sd-card-body docutils"&gt;
&lt;p class="sd-card-text"&gt;2011 body&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sd-col sd-d-flex-column right docutils"&gt;
&lt;/div&gt;
&lt;div class="sd-col sd-d-flex-column left docutils"&gt;
&lt;/div&gt;
&lt;div class="sd-col sd-d-flex-row entry right docutils"&gt;
&lt;div class="sd-card sd-sphinx-override sd-w-100 sd-shadow-sm docutils"&gt;
&lt;div class="sd-card-header docutils"&gt;
&lt;p class="sd-card-text"&gt;&lt;strong&gt;2009&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="sd-card-body docutils"&gt;
&lt;p class="sd-card-text"&gt;2009 body&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sd-col sd-d-flex-column sd-col-12 sd-col-xs-12 sd-col-sm-12 sd-col-md-12 sd-col-lg-12 sd-example-item sd-example-source sd-rounded-bottom docutils"&gt;
&lt;div class="highlight-markdown notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;````{grid} 2
:class-container: timeline

```{grid-item-card}
:class-item: entry left

2020
^^^

2020 body
&lt;span class="sb"&gt;```&lt;/span&gt;
&lt;span class="sb"&gt;```{grid-item}&lt;/span&gt;
&lt;span class="sb"&gt;:class: right&lt;/span&gt;
&lt;span class="sb"&gt;```&lt;/span&gt;
```{grid-item}
:class: left
&lt;span class="sb"&gt;```&lt;/span&gt;
&lt;span class="sb"&gt;```{grid-item-card}&lt;/span&gt;
&lt;span class="sb"&gt;:class-item: entry right&lt;/span&gt;

&lt;span class="sb"&gt;**2017**&lt;/span&gt;
&lt;span class="sb"&gt;^^^&lt;/span&gt;

&lt;span class="sb"&gt;2017 body&lt;/span&gt;
&lt;span class="sb"&gt;```&lt;/span&gt;
```{grid-item-card}
:class-item: entry left

&lt;span class="gs"&gt;**2011**&lt;/span&gt;
^^^

2011 body
&lt;span class="sb"&gt;```&lt;/span&gt;
&lt;span class="sb"&gt;```{grid-item}&lt;/span&gt;
&lt;span class="sb"&gt;:class: right&lt;/span&gt;
&lt;span class="sb"&gt;```&lt;/span&gt;
```{grid-item}
:class: left
&lt;span class="sb"&gt;```&lt;/span&gt;
&lt;span class="sb"&gt;```{grid-item-card}&lt;/span&gt;
&lt;span class="sb"&gt;:class-item: entry right&lt;/span&gt;

&lt;span class="sb"&gt;**2009**&lt;/span&gt;
&lt;span class="sb"&gt;^^^&lt;/span&gt;

&lt;span class="sb"&gt;2009 body&lt;/span&gt;
&lt;span class="sb"&gt;```&lt;/span&gt;
````
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
</content>
    <link href="https://chrisholdgraf.com/blog/2020/sphinx-design-timeline/" rel="alternate"/>
    <summary>One of the nice things about MyST Markdown is that it is extensible. Any Sphinx extension will work with MyST Markdown (in the context of Jupyter Book, anyway).One of my favorite Sphinx extensions is Sphinx Design, this brings you flexible UI components that use Bootstrap CSS under the hood (though without heavy javascript). They let you do things like this:</summary>
    <category term="documentation" label="documentation"/>
    <category term="markup" label="markup"/>
    <published>2020-01-22T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://chrisholdgraf.com/blog/2020/2020-01-22-rst-thoughts/</id>
    <title>What do people think about rST?</title>
    <updated>2020-01-22T00:00:00+00:00</updated>
    <content type="html">&lt;section id="what-do-people-think-about-rst"&gt;

&lt;p&gt;Publishing computational narratives has always been a dream of the Jupyter Project,
and there is still a lot of work to be done in improving these use-cases. We’ve made
a lot of progress in providing open infrastructure for reproducible science with
&lt;a class="reference external" href="https://jupyterhub.readthedocs.io/en/stable/"&gt;JupyterHub&lt;/a&gt; and
&lt;a class="reference external" href="https://mybinder.org/"&gt;the Binder Project&lt;/a&gt;, but what about the documents themselves?
We’ve recently been working on tools like &lt;a class="reference external" href="https://jupyterbook.org"&gt;Jupyter Book&lt;/a&gt;,
which aim to improve the writing and publishing process with the Jupyter ecosystem.
This is hopefully the first post of a few that ask how we can best-improve the state
of publishing with Jupyter.&lt;/p&gt;
&lt;div class="tip admonition"&gt;
&lt;p class="admonition-title"&gt;Update!&lt;/p&gt;
&lt;p&gt;Many of the ideas in this post have now made their way into a new flavor of markdown called &lt;a class="reference external" href="https://myst-parser.readthedocs.io"&gt;Markedly Structured Text&lt;/a&gt;, or MyST. It brings all of the features of rST into Markdown. Check it out!&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Python has a fairly sophisticated publishing tool in its stack. &lt;a class="reference external" href="http://sphinx-doc.org/"&gt;Sphinx&lt;/a&gt;
has been a staple for publishing documentation for packages for several years now.
Interestingly, publishing a book is more similar to publishing a package’s documentation
than it is to, say, publishing a blog. Maybe we could use Sphinx more heavily for
writing computational narratives.&lt;/p&gt;
&lt;p&gt;One of the major challenges with Sphinx is that its default markup language is reStructuredText,
a fairly old but battle-tested markup language. The benefit of reStructuredText is that it is
a &lt;em&gt;semantic language&lt;/em&gt;, meaning that it has ways to store more information about the nature
of the text (e.g. something is an “author”, something is a “reference”, etc). It is also a standard
that has remained very stable over time (whether that’s a good or bad thing I’ll leave to you to decide).&lt;/p&gt;
&lt;p&gt;However, there are a few major problems with reStructuredText that have impeded its adoption by
communities outside of the Python documentation world. I recently &lt;a class="reference external" href="https://twitter.com/choldgraf/status/1212054861132521472"&gt;asked around on Twitter&lt;/a&gt;
what these problems were.
I got some interesting responses! Here is a quick summary of people’s thoughts.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="the-syntax-of-rst-is-too-confusing"&gt;
&lt;h1&gt;The syntax of rST is too confusing&lt;/h1&gt;
&lt;p&gt;By far the most common response was that rST syntax is simply too confusing. Here were the main
pain points.&lt;/p&gt;
&lt;section id="link-syntax"&gt;
&lt;h2&gt;Link syntax&lt;/h2&gt;
&lt;p&gt;Many folks particularly mentioned that they needed to look up how to construct links every time they wrote rST.&lt;/p&gt;
&lt;p&gt;For reference, a link in rST looks like this:&lt;/p&gt;
&lt;div class="highlight-rst notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;This &lt;span class="s"&gt;`Is a link to &lt;/span&gt;&lt;span class="si"&gt;&amp;lt;https://google.com&amp;gt;&lt;/span&gt;&lt;span class="s"&gt;`_&lt;/span&gt;.
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Compared with markdown:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;This&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;google&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="header-complexity"&gt;
&lt;h2&gt;Header complexity&lt;/h2&gt;
&lt;p&gt;rST uses “setext” headers, which means that you put a bunch of underline-like
characters under (or under+over) the header name itself, like so:&lt;/p&gt;
&lt;div class="highlight-rst notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gh"&gt;This is my first header&lt;/span&gt;
&lt;span class="gh"&gt;=======================&lt;/span&gt;

&lt;span class="gh"&gt;======================&lt;/span&gt;
&lt;span class="gh"&gt;This is another header&lt;/span&gt;
&lt;span class="gh"&gt;======================&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Compare this to “ATX headers”, which markdown uses and look like this:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# This is a header&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Setting aside the annoyance of having to hold down the “=” a bunch of times,
the big problem with rST headers is that header &lt;strong&gt;characters in rST have no single
mapping onto header hierarchy&lt;/strong&gt;. For example:&lt;/p&gt;
&lt;div class="highlight-rst notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gh"&gt;This is my first header&lt;/span&gt;
&lt;span class="gh"&gt;~~~~~~~~~~~~~~~~~~~~~~~&lt;/span&gt;

&lt;span class="gh"&gt;And this is my second header&lt;/span&gt;
&lt;span class="gh"&gt;============================&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;is the same as&lt;/p&gt;
&lt;div class="highlight-rst notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gh"&gt;This is my first header&lt;/span&gt;
&lt;span class="gh"&gt;=======================&lt;/span&gt;
&lt;span class="gh"&gt;And this is my second header&lt;/span&gt;
&lt;span class="gh"&gt;~~~~~~~~~~~~~~~~~~~~~~~~~~~~&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This is a case where too much flexibility makes life more difficult than it needs to be. Many
responses wished that rST simply used “ATX” headers (using &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;#&lt;/span&gt;&lt;/code&gt; in front of titles) or chose
a single hierarchy of header characters.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="in-line-code"&gt;
&lt;h2&gt;In-line code&lt;/h2&gt;
&lt;p&gt;Many folks also dislike the fact that in rST, you must denote in-line code blocks with &lt;strong&gt;two&lt;/strong&gt;
backticks instead of one. For example, this is rST:&lt;/p&gt;
&lt;div class="highlight-rst notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Here is some inline code: &lt;span class="s"&gt;``a = 2``&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;While here is some markdown&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Here is some inline code: `a = 2`
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;It may seem silly, but markdown’s ubiquity has given most people the assumption that backticks==code.
The fact that rST deviates from this adds unnecessary cognitive burden to most users.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="nesting-in-line-markup"&gt;
&lt;h2&gt;Nesting in-line markup&lt;/h2&gt;
&lt;p&gt;Finally, there were several mentions of rST’s strange inability to nest in-line formatting.
E.g. being able to bold a link by nesting &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;**&lt;/span&gt;&lt;/code&gt; inside of your link syntax.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="a-quick-summary"&gt;
&lt;h2&gt;A quick summary&lt;/h2&gt;
&lt;p&gt;Here is a quick list of the tweets that touched on the topic of syntax:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Links syntax is confusing (9 total)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Links are confusing: &lt;a class="reference external" href="https://twitter.com/asmeurer/status/1212468755768336384"&gt;https://twitter.com/asmeurer/status/1212468755768336384&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Bad syntax, esp links: &lt;a class="reference external" href="https://twitter.com/njgoldbaum/status/1212059796142055424"&gt;https://twitter.com/njgoldbaum/status/1212059796142055424&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Links structure: &lt;a class="reference external" href="https://twitter.com/SylvainCorlay/status/1212061834116816898"&gt;https://twitter.com/SylvainCorlay/status/1212061834116816898&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;External links: &lt;a class="reference external" href="https://twitter.com/WillingCarol/status/1212152304800894976"&gt;https://twitter.com/WillingCarol/status/1212152304800894976&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Syntax / too complex to write: &lt;a class="reference external" href="https://twitter.com/minrk/status/1212119686009233410"&gt;https://twitter.com/minrk/status/1212119686009233410&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Syntax, esp links and tables: &lt;a class="reference external" href="https://twitter.com/_JacobTomlinson/status/1212104705809289219"&gt;https://twitter.com/_JacobTomlinson/status/1212104705809289219&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Improve links: &lt;a class="reference external" href="https://twitter.com/andreazonca/status/1212166686389858306"&gt;https://twitter.com/andreazonca/status/1212166686389858306&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Links and heading permalinks: &lt;a class="reference external" href="https://twitter.com/goerz/status/1212610069252263936"&gt;https://twitter.com/goerz/status/1212610069252263936&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Inline hyperlinks: &lt;a class="reference external" href="https://twitter.com/moorepants/status/1212072806994739200"&gt;https://twitter.com/moorepants/status/1212072806994739200&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Header / title syntax (3 total)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Using underlines for headers: &lt;a class="reference external" href="https://twitter.com/phaustin/status/1212067821976375296"&gt;https://twitter.com/phaustin/status/1212067821976375296&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Titles: &lt;a class="reference external" href="https://twitter.com/mfcabrera/status/1212126606170431489"&gt;https://twitter.com/mfcabrera/status/1212126606170431489&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Title lines are confusing: &lt;a class="reference external" href="https://twitter.com/alienghic/status/1212119125398437888"&gt;https://twitter.com/alienghic/status/1212119125398437888&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Two backticks for code&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Two Backticks for code literals: &lt;a class="reference external" href="https://twitter.com/brettsky/status/1212422437683351553"&gt;https://twitter.com/brettsky/status/1212422437683351553&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Nested inline markup (e.g. ‘em’ inside of ‘strong’) (2 total)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Nested inline markup: &lt;a class="reference external" href="https://twitter.com/asmeurer/status/1212468755768336384"&gt;https://twitter.com/asmeurer/status/1212468755768336384&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;nested “em” in “strong”: &lt;a class="reference external" href="https://twitter.com/uranusjr/status/1212179877341720577"&gt;https://twitter.com/uranusjr/status/1212179877341720577&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="error-reporting-and-the-complexity-of-sphinx"&gt;
&lt;h1&gt;Error reporting and the complexity of Sphinx&lt;/h1&gt;
&lt;p&gt;The other major complaint people had was in the toolchain itself. Sphinx is an incredibly powerful tool,
but this comes with a degree of complexity that many find difficult to work through. This isn’t helped
by the fact that the &lt;a class="reference external" href="http://www.sphinx-doc.org/en/master/"&gt;Sphinx documentation&lt;/a&gt;
is itself incomplete in many sections (the irony of this is not lost on me).&lt;/p&gt;
&lt;p&gt;In particular, several people commented about the difficulty in surfacing and debugging errors that happen
in the Sphinx build chain. They also mentioned that Sphinx can be slow to build sometimes, which
bogs down the development and writing process.&lt;/p&gt;
&lt;p&gt;Here are the tweets about the Sphinx toolchain itself:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Error reporting / complexity of Sphinx itself (3 total)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Error reporting: &lt;a class="reference external" href="https://twitter.com/asmeurer/status/1212468909078544384"&gt;https://twitter.com/asmeurer/status/1212468909078544384&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Error reporting in Sphinx etc: &lt;a class="reference external" href="https://twitter.com/GaelVaroquaux/status/1212058374981988352"&gt;https://twitter.com/GaelVaroquaux/status/1212058374981988352&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Documentation is bad: &lt;a class="reference external" href="https://twitter.com/AkhmerovAnton/status/1212059839033171968"&gt;https://twitter.com/AkhmerovAnton/status/1212059839033171968&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There were also a few miscellaneous responses that didn’t quite fit into the above categories:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Misc (6 total)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Isn’t a standard: &lt;a class="reference external" href="https://twitter.com/aterrel/status/1212132546307350529"&gt;https://twitter.com/aterrel/status/1212132546307350529&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Newlines in nested lists, not easy to deploy: &lt;a class="reference external" href="https://twitter.com/westurner/status/1212178375571365891"&gt;https://twitter.com/westurner/status/1212178375571365891&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;No notebook support: &lt;a class="reference external" href="https://twitter.com/moorepants/status/1212062811599147008"&gt;https://twitter.com/moorepants/status/1212062811599147008&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Has state: &lt;a class="reference external" href="https://twitter.com/Mbussonn/status/1212069224245551104"&gt;https://twitter.com/Mbussonn/status/1212069224245551104&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;General complexity: &lt;a class="reference external" href="https://twitter.com/mrocklin/status/1212123762595811328"&gt;https://twitter.com/mrocklin/status/1212123762595811328&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="what-can-be-done"&gt;
&lt;h1&gt;What can be done?&lt;/h1&gt;
&lt;p&gt;Overall, it seems like &lt;strong&gt;reStructuredText&lt;/strong&gt; could be much-improved with a few minor
modifications to its syntax. These don’t seem like they are structurally
incompatible with rST, and would alleviate some of the cognitive
burden that users report when they use it. Here’s a quick list of simple things:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;rST could use markdown syntax for external links.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;rST could decide on a fixed interpretation of header characters to levels in the header hierarchy&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;rST could default to interpreting single backticks as raw code spans&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and a list of slightly more complex things:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;rST could support nested styling inside of links and other elements&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Sphinx could improve its error reporting and debugging machinery&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Sphinx could improve its documentation so that it was easier to find an answer to a question&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="or-could-we-bring-restructuredtext-into-markdown"&gt;
&lt;h1&gt;Or could we bring reStructuredText into Markdown?&lt;/h1&gt;
&lt;p&gt;There is another option, of course, which is to go in the opposite direction. Start with markdown,
and then ask “how could we build the flexibility of rST into markdown” rather than bringing the
simplicity of markdown into reStructuredText. I often wonder if the easiest thing to do would be
to simply decide on a markdown syntax that maps on to “directives” and “roles” (perhaps the Pandoc
code fence &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;:::&lt;/span&gt;&lt;/code&gt; for directives, and link attributes &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;[]{attribute}&lt;/span&gt;&lt;/code&gt; for roles). I think that both
are worth exploring.&lt;/p&gt;
&lt;p&gt;In summary, I was surprised at the consistency of people’s complains about the rST language. It
seems that many people are hung up about the same relatively minor syntax choices, and that making
modifications to these choices would improve the experience for many. It’s also clear that Sphinx
could use some developer time to make it more robust, debuggable, and well-documented. I hope that
we can make some progress on these issues in the coming years.&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="https://chrisholdgraf.com/blog/2020/2020-01-22-rst-thoughts/" rel="alternate"/>
    <summary>Publishing computational narratives has always been a dream of the Jupyter Project,
and there is still a lot of work to be done in improving these use-cases. We’ve made
a lot of progress in providing open infrastructure for reproducible science with
JupyterHub and
the Binder Project, but what about the documents themselves?
We’ve recently been working on tools like Jupyter Book,
which aim to improve the writing and publishing process with the Jupyter ecosystem.
This is hopefully the first post of a few that ask how we can best-improve the state
of publishing with Jupyter.Many of the ideas in this post have now made their way into a new flavor of markdown called Markedly Structured Text, or MyST. It brings all of the features of rST into Markdown. Check it out!</summary>
    <category term="documentation" label="documentation"/>
    <category term="markup" label="markup"/>
    <published>2020-01-22T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://chrisholdgraf.com/blog/2020/sphinx-blogging/</id>
    <title>A new blog with Sphinx</title>
    <updated>2020-10-10T00:00:00+00:00</updated>
    <author>
      <name>Chris Holdgraf</name>
    </author>
    <content type="html">&lt;section id="a-new-blog-with-sphinx"&gt;

&lt;p&gt;I recently re-wrote all of the infrastructure for my blog so that it now builds on top of the Sphinx ecosystem! This is a short post to describe the reasons for doing so, and a bit about the implementation.&lt;/p&gt;
&lt;a class="reference external image-reference" href="https://www.sphinx-doc.org/en/master/"&gt;&lt;img alt="https://www.sphinx-doc.org/en/master/_static/sphinxheader.png" class="bg-dark" src="https://www.sphinx-doc.org/en/master/_static/sphinxheader.png" /&gt;&lt;/a&gt;
&lt;section id="why-did-you-re-write-your-blog"&gt;
&lt;h2&gt;Why did you re-write your blog?&lt;/h2&gt;
&lt;p&gt;This is a great question. The answer to “should you re-work your blog to use a new SSG” is almost always “no, it’s a waste of your time”, but I think I had a few good reasons ;-)&lt;/p&gt;
&lt;dl class="simple myst"&gt;
&lt;dt&gt;🐶 Dog Fooding&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;First, I’ve been doing a lot of work with the &lt;a class="reference external" href="https://executablebooks.org"&gt;Executable Books Project&lt;/a&gt; lately. As a result, &lt;a class="reference external" href="https://executablebooks.org/en/latest/updates/2020-08-07-announce-book.html"&gt;Jupyter Book now depends on Sphinx&lt;/a&gt;. The more I use Sphinx in my own workflows, the more I’ll be equipped to improve the Sphinx ecosystem and Jupyter Book in ways that will benefit its users.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;🎁 Upstreaming&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;A big reason for moving Jupyter Book to Sphinx was to give ourselves more excuse to upstream improvements to the broader community. Switching over my own blog is for the same reason.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;🌷 Simplicity&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;I understand the Sphinx ecosystem relatively well, and use it across many of my projects. It’s got a number of great themes and a ton of extensions to do more things with my content. Moreover, it’s 💯 Python and I don’t have to worry about installing extra languages etc to build my pages.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt&gt;🚀 Features&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;It turns out that building your blog (or any content for that matter) on top of a documentation engine gives you a lot of extra things to try that you don’t usually get from a SSG. Being able to use &lt;a class="reference external" href="https://myst-parser.readthedocs.io/en/latest/using/syntax.html#syntax-directives"&gt;Sphinx roles/directives&lt;/a&gt; from within a page is pretty cool. I can do stuff like this:&lt;/p&gt;
&lt;div class="sd-container-fluid sd-sphinx-override sd-mb-4 docutils"&gt;
&lt;div class="sd-row docutils"&gt;
&lt;div class="sd-col sd-d-flex-row docutils"&gt;
&lt;div class="sd-card sd-sphinx-override sd-w-100 sd-shadow-sm docutils"&gt;
&lt;div class="sd-card-body docutils"&gt;
&lt;details class="sd-sphinx-override sd-dropdown sd-card sd-mb-3"&gt;
&lt;summary class="sd-summary-title sd-card-header"&gt;
Here’s a dropdown!&lt;div class="sd-summary-down docutils"&gt;
&lt;svg version="1.1" width="1.5em" height="1.5em" class="sd-octicon sd-octicon-chevron-down" viewBox="0 0 24 24" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M5.22 8.72a.75.75 0 000 1.06l6.25 6.25a.75.75 0 001.06 0l6.25-6.25a.75.75 0 00-1.06-1.06L12 14.44 6.28 8.72a.75.75 0 00-1.06 0z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/div&gt;
&lt;div class="sd-summary-up docutils"&gt;
&lt;svg version="1.1" width="1.5em" height="1.5em" class="sd-octicon sd-octicon-chevron-up" viewBox="0 0 24 24" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M18.78 15.28a.75.75 0 000-1.06l-6.25-6.25a.75.75 0 00-1.06 0l-6.25 6.25a.75.75 0 101.06 1.06L12 9.56l5.72 5.72a.75.75 0 001.06 0z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/div&gt;
&lt;/summary&gt;&lt;div class="sd-summary-content sd-card-body docutils"&gt;
&lt;p class="sd-card-text"&gt;And here’s some stuff inside!&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/details&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sd-col sd-d-flex-row docutils"&gt;
&lt;div class="sd-card sd-sphinx-override sd-w-100 sd-shadow-sm docutils"&gt;
&lt;div class="sd-card-body docutils"&gt;
&lt;div class="tip admonition"&gt;
&lt;p class="admonition-title"&gt;Wow, a tip!&lt;/p&gt;
&lt;p class="sd-card-text"&gt;What a great tip!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/dd&gt;
&lt;dt&gt;🪐 Executable content and notebooks&lt;/dt&gt;&lt;dd&gt;&lt;p&gt;On top of the base Sphinx features, &lt;a class="reference external" href="https://myst-nb.readthedocs.io"&gt;MyST-NB&lt;/a&gt; now lets me write my entire post in notebooks, and will execute and cache the content for me if I wish. I can also &lt;a class="reference external" href="https://myst-nb.readthedocs.io/en/latest/use/markdown.html"&gt;write the whole notebook as markdown&lt;/a&gt; which keeps my posts easily diff-able.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/section&gt;
&lt;section id="the-components-that-make-up-this-blog"&gt;
&lt;h2&gt;The components that make up this blog&lt;/h2&gt;
&lt;p&gt;OK so how is this blog actually built now? Here is a quick rundown.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Where is the blog source code?&lt;/strong&gt; At &lt;a class="reference external" href="https://github.com/choldgraf/choldgraf.github.io"&gt;this github repository&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;What engine builds the website?&lt;/strong&gt; The &lt;a class="reference external" href="https://www.sphinx-doc.org/en/master/"&gt;Sphinx documentation engine&lt;/a&gt; is the core documentation engine.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;What engine builds the blog?&lt;/strong&gt; I use the &lt;a class="reference external" href="https://ablog.readthedocs.io/"&gt;ablog Sphinx blog extension&lt;/a&gt; to host the actual blog.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;What theme do you use for the blog?&lt;/strong&gt; I use the &lt;a class="reference external" href="https://pydata-sphinx-theme.readthedocs.io/"&gt;PyData Sphinx Theme&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;How do you write Sphinx docs in markdown?&lt;/strong&gt; I use the &lt;a class="reference external" href="https://myst-parser.readthedocs.io/en/latest/"&gt;myst-parser package&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;How do you write content in notebooks?&lt;/strong&gt; I use the &lt;a class="reference external" href="https://myst-nb.readthedocs.io/en/latest/"&gt;MyST-NB package&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;How did you make those fancy buttons and dropdowns?&lt;/strong&gt; That was the &lt;a class="reference external" href="https://sphinx-panels.readthedocs.io/en/latest/"&gt;sphinx-panels Sphinx extension&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Specifically, &lt;a class="reference external" href="https://github.com/choldgraf/choldgraf.github.io"&gt;my website is hosted here&lt;/a&gt; and all of the blog posts are &lt;a class="reference external" href="https://github.com/choldgraf/choldgraf.github.io/tree/main/posts"&gt;in this folder&lt;/a&gt;.
I’m configuring ABlog to &lt;a class="reference external" href="https://github.com/choldgraf/choldgraf.github.io/blob/main/conf.py#L80"&gt;find any markdown files in this folder and treat them as blog posts&lt;/a&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="in-conclusion"&gt;
&lt;h2&gt;In conclusion&lt;/h2&gt;
&lt;p&gt;So far, I quite like this new blog setup. Sphinx is familiar to me, and I think that using this for my own blog will help me understand how the ecosystem could be further-improved to support blogs in other contexts. If you want to check out this blog’s setup, see &lt;a class="reference external" href="https://github.com/choldgraf/choldgraf.github.io"&gt;this blog’s repository&lt;/a&gt; to get started! Next up, I’m going to see how easy it is to do this in Jupyter Book!&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://chrisholdgraf.com/blog/2020/sphinx-blogging/" rel="alternate"/>
    <summary>I recently re-wrote all of the infrastructure for my blog so that it now builds on top of the Sphinx ecosystem! This is a short post to describe the reasons for doing so, and a bit about the implementation.This is a great question. The answer to “should you re-work your blog to use a new SSG” is almost always “no, it’s a waste of your time”, but I think I had a few good reasons ;-)</summary>
    <category term="blogging" label="blogging"/>
    <category term="jupyter" label="jupyter"/>
    <category term="sphinx" label="sphinx"/>
    <published>2020-10-10T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://chrisholdgraf.com/blog/2020/organizations-help-oss-guide/</id>
    <title>Contributing to open source: A short guide for organizations</title>
    <updated>2020-11-08T00:00:00+00:00</updated>
    <author>
      <name>Chris Holdgraf</name>
    </author>
    <content type="html">&lt;section id="contributing-to-open-source-a-short-guide-for-organizations"&gt;

&lt;p&gt;Over the years I’ve had a recurring question from people who are in organizations both big and small: &lt;em&gt;how can we participate in open source communities?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Whether it is because of altruism or strategic importance, many companies, research groups, non-profits, etc &lt;em&gt;want&lt;/em&gt; to be involved in open source projects (particularly large and impactful ones like Jupyter), but getting involved can be an opaque and confusing process if you’re not already familiar with open source. Each community has its own nuances and social dynamics, and approaching from the outside can be a challenge.&lt;/p&gt;
&lt;p&gt;So this post is a short guide to provide some ideas for how others can begin to engage with open source. My hope is that it gives people who are embedded in organizations some ideas about how they could engage with open source, or advocate for engagement internally.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;This is all just personal opinion, and based on my own experiences so far. I’ll try to keep it updated over time as my own thoughts evolve. If you’ve got ideas of your own I’d love to hear them in the comments.&lt;/p&gt;
&lt;/div&gt;
&lt;section id="meet-open-source-communities-where-they-are"&gt;
&lt;h2&gt;Meet open source communities where they are&lt;/h2&gt;
&lt;p&gt;If there is anything I’d emphasize the most, it is that organizations need to meet open communities where they are - that means abiding by community values and social norms, and accepting that community priorities may be different from those of an organization.
A few quick ideas for doing this:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;At first, treat yourself as a visitor&lt;/strong&gt;. It will take time to build understanding, status, and trust within a community. Until that happens, it’s important to meet open source communities as peers and consider yourself a visitor. Listen, learn, engage, and adapt your behavior to that of the community. Don’t assume that you should have any special status because you’re a large or well-known organization.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Participate in community spaces&lt;/strong&gt;. The easiest way to learn how a community operates is to participate in the online spaces where it operates. If there are community meetings, attend them and introduce yourself. If the community has a forum, show up and say hello. If the community uses GitHub issues, watch for what kinds of things people discuss. Offer help, advise, and guidance wherever you can. This will help you understand the needs and direction of the project.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Abide by community culture&lt;/strong&gt;. For many communities, a lot of care and thought is put into building community dynamics that are open, inclusive, deliberate, and that balance power across the many stakeholders in the ecosystem. It is crucial that you abide by these cultural dynamics, especially with respect to things like Code of Conduct and interpersonal interactions. Taking this time to understand the culture will make the experience much more pleasant for everybody involved.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Respect the community priorities&lt;/strong&gt;. Many organizations reach out only at the moment where they &lt;em&gt;need&lt;/em&gt; something. This is understandable, but a very inefficient way of getting things done in open source communities. There are a variety of needs, priorities, and interests in the community. You should begin by understanding what these are and finding ways to engage with them before focusing on your own priorities or asking for (or offering) changes to suit your needs. The trust that comes from helping someone &lt;em&gt;else&lt;/em&gt; with their problem will make it much easier for you to get your own issues fixed in the future.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Accept that things will move more slowly&lt;/strong&gt;. I know that you have a product or a feature to ship, and that you want to make rapid progress. But, open source communities generally are (and generally should be) slower and more deliberate in their decision-making than many organizations are used-to. Slowing things down ensures that a diverse collection of voices have an opportunity to weigh in on questions, and keeps the community more inclusive and participatory. It also often leads to better decisions that take into consideration more perspectives.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After you spend some time engaging with open source communities, there are a few concrete steps you can take towards making contributions. Here are a few ideas…&lt;/p&gt;
&lt;/section&gt;
&lt;section id="help-with-development-and-repositories"&gt;
&lt;h2&gt;Help with development and repositories&lt;/h2&gt;
&lt;p&gt;After you’ve spent some time interacting with others in the community, perhaps you’d like to make contributions of your own to the codebase or tools. How can you do this in a way that benefits the community?&lt;/p&gt;
&lt;div class="note admonition"&gt;
&lt;p class="admonition-title"&gt;A note on non-coding support&lt;/p&gt;
&lt;p&gt;Note that, while code is often the output of an open source community, there are many non-coding ways to contribute to that community. Many of the “code-related” activities are actually “people-related” activities, such as assisting others with their problems, or engaging in discussion in issues.&lt;/p&gt;
&lt;/div&gt;
&lt;section id="upstream-improvements-when-using-core-technology"&gt;
&lt;h3&gt;Upstream improvements when using core technology&lt;/h3&gt;
&lt;p&gt;By far the most-common way that organizations contribute back is by “upstreaming” improvements to the open source project as they notice problems or opportunities to improve the code.&lt;/p&gt;
&lt;p&gt;If you’re using a tool regularly, or building it into another tool like one of your products, look for small ways that it could be better. Rather than fixing these issues in your fork of the project or your internal codebase, open an issue in the core repository and offer to fix it if others agree it’s a problem. If a team member has an idea to improve the tool, don’t just build it in your products, improve it in core.&lt;/p&gt;
&lt;div class="tip admonition"&gt;
&lt;p class="admonition-title"&gt;Example: The Jupyter Server&lt;/p&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://github.com/jupyter/jupyter_server"&gt;Jupyter Server&lt;/a&gt; project is an attempt at pulling out much of the server architecture from the original Notebook application. It’s a very low-level library that is re-usable across a number of other potential tools. Its presence benefits the whole ecosystem, but because it is so generically useful, it has few dedicated resources to maintian and develop.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="tip admonition"&gt;
&lt;p class="admonition-title"&gt;Example: Accessibility&lt;/p&gt;
&lt;p&gt;This is one of those things that is &lt;em&gt;super&lt;/em&gt; hard to get volunteer support for because it is not sexy and it is hard work. Many organizations care about accessibility for a variety of reasons, and taking the time to give back guidance and development to make core tools more accessible is a huge benefit. On this point in particular, I think it is important that organizations not make accessibility a competetive advantage over open source tools, but instead contribute to the common good so that these tools are more inclusive and available to all.&lt;/p&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="contribute-to-the-documentation"&gt;
&lt;h3&gt;Contribute to the documentation&lt;/h3&gt;
&lt;p&gt;Documentation is crucial to the success of open source, as it is the interface between people and the code. Documentation should be clear, searchable and findable, and should cover all of the functionality in a tool. However, it’s very difficult to properly-document open source software!&lt;/p&gt;
&lt;p&gt;New users are in an extremely good position to point out inconsistencies, missing information, and unclear explanations in the documentation. If someone in your organization is trying to use an open-source tool for the first time, ask them to spend a few moments providing feedback about how the documentation could be improved, or even better, making a PR to the docs.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="work-on-major-features-the-community-has-prioritized"&gt;
&lt;h3&gt;Work on major features the community has prioritized&lt;/h3&gt;
&lt;p&gt;If you’ve got more substantial development time to devote to a project, see what kinds of features people want, and offer to help tackle something that aligns with your own interests. This is much easier if you do so after interacting with the community for a bit, as you will understand its priorities, as well as the underlying codebase, enough to be more efficient and productive.&lt;/p&gt;
&lt;p&gt;Take a look at the issues or roadmap of a project and find ones that you’d also benefit from, chime in and mention that you’d like to try and make these changes to see if others are excited about it. Then, follow-through and engage with the community as you make changes. Don’t be resistant to feedback - remember that you are a part of a broader community with its own norms and expectations around code style, structure, etc.&lt;/p&gt;
&lt;div class="tip admonition"&gt;
&lt;p class="admonition-title"&gt;Example: Look for 👍 in issues&lt;/p&gt;
&lt;p&gt;The Executable Books Project has &lt;a class="reference external" href="https://executablebooks.org/en/latest/feature-vote.html"&gt;a feature voting leaderboard&lt;/a&gt; that it uses to let users vote with a 👍. You can even see this list for &lt;em&gt;any&lt;/em&gt; GitHub repository by &lt;strong&gt;sorting issues by 👍 reactions&lt;/strong&gt;. For example, &lt;a class="reference external" href="https://github.com/jupyterlab/jupyterlab/issues?q=is%3Aissue+is%3Aopen+sort%3Areactions-%2B1-desc"&gt;here are the issues with the most 👍 in JupyterLab&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="provide-core-maintenance-and-support"&gt;
&lt;h3&gt;Provide core maintenance and support&lt;/h3&gt;
&lt;p&gt;If you have spent some time interacting with a community, working through bugs and features, etc, you may consider providing more ongoing core support for a project. This is the holy grail of engagement, as core support and maintenance are one of the scarcest resources. Offer to read through issues and triage on a regular basis, routinely engage in pull requests and provide feedback and advise, spot-check bugs over time that others have brought up, do community work to organize meetings or work plans.&lt;/p&gt;
&lt;p&gt;When I try to figure out who is being helpful in the Jupyter ecosystem, I ask questions like “who is doing the things that nobody else is doing?”. E.g., who is the first person to respond to an issue? who is making documentation improvements, or helping an inexperienced contributor improve their PR? These little “carrying water and chopping wood” tasks are not flashy and exciting, but they are &lt;em&gt;crucial&lt;/em&gt; to keeping the community dynamic, welcoming, and productive.&lt;/p&gt;
&lt;div class="tip admonition"&gt;
&lt;p class="admonition-title"&gt;Example: Contributing guidelines&lt;/p&gt;
&lt;p&gt;Take a look at the &lt;a class="reference external" href="https://jupyterhub-team-compass.readthedocs.io/en/latest/team/skills.html#a-few-general-ways-to-help-out"&gt;JupyterHub Team contributing guidelines&lt;/a&gt; - most of them aren’t strictly technical, they’re about helping others, helping the team in conversations, and generally just being friendly and productive community members.&lt;/p&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="collaborate-with-open-source-projects"&gt;
&lt;h2&gt;Collaborate with open source projects&lt;/h2&gt;
&lt;p&gt;Beyond directly working inside of an open source community, there are also plenty of ways that you engage with them as collaborators and partners. Here are a few concrete ideas.&lt;/p&gt;
&lt;section id="collaborate-on-open-standards-and-apis"&gt;
&lt;h3&gt;Collaborate on open standards and APIs&lt;/h3&gt;
&lt;p&gt;Beyond the open source core, there are often places where you wish to build out your &lt;em&gt;own&lt;/em&gt; functionality. In these cases, it’s important that new APIs and patterns of interaction happen in conversation with the open source community, in order to ensure as much standardization as possible across ecosystems.&lt;/p&gt;
&lt;p&gt;Any time that you’d like to extend functionality beyond what’s already there, and have to make a semi-arbitrary decision of what pattern to expose to users, standardize on something the community already uses so that there isn’t unnecessary duplication and fracturing across ecosystems. If no standard exists, don’t just create one - reach out to the open source community and lead a process that gets others to brainstorm and buy-in to a new standard.&lt;/p&gt;
&lt;div class="tip admonition"&gt;
&lt;p class="admonition-title"&gt;Example: The &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ipynb&lt;/span&gt;&lt;/code&gt; format&lt;/p&gt;
&lt;p&gt;The &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ipynb&lt;/span&gt;&lt;/code&gt; format. One of Jupyter’s core goals is to standardize tools and patterns across the data science community. The &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ipynb&lt;/span&gt;&lt;/code&gt; format is probably the most common example. As more tools build their own notebook functionality and wish to &lt;em&gt;extend&lt;/em&gt; &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ipynb&lt;/span&gt;&lt;/code&gt; to do new things, they should follow metadata standards (or lead processes to create new ones). For example, we don’t want &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ipynb&lt;/span&gt;&lt;/code&gt; files that have platform-specific metadata. Even little stuff like “for cell-level metadata to hide inputs, do we call it &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;hide_input&lt;/span&gt;&lt;/code&gt; or &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;hideInput&lt;/span&gt;&lt;/code&gt;?” This can seem trivial and arbitrary but it is important and in many ways the most important thing that open communities do! When in doubt, ask around and get buy-in from others.&lt;/p&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="advocate-for-open-tools-from-the-community"&gt;
&lt;h3&gt;Advocate for open tools from the community&lt;/h3&gt;
&lt;p&gt;While developing and improving technology is a core part of open source, there is also a great deal of &lt;em&gt;advocacy&lt;/em&gt; needed to expand their use and to get feedback. Organizational partners can be a huge help here by finding ways to support and highlight open source tooling in their stack, and by explicitly highlighting this tooling in tandem with organizational products.&lt;/p&gt;
&lt;p&gt;This can be a bit tricky (competive landscape etc), but the rubric that I shoot for is: use community-led products wherever possible, and if that’s not possible, make sure to highlight and advocate for community-led products in-tandem with your own products.&lt;/p&gt;
&lt;div class="tip admonition"&gt;
&lt;p class="admonition-title"&gt;Example: Workshops and training material&lt;/p&gt;
&lt;p&gt;Many organizations run workshops, demos, and training sessions for their products. They also have sizeable marketing departments for the work they do. In all of these efforts, make it clear when you are relying on an open source tool for support, and highlight the ways in which you are engaging with its community and giving back.&lt;/p&gt;
&lt;p&gt;For example, &lt;a class="reference external" href="https://spacy.io/"&gt;spacy.io&lt;/a&gt; is an NLP framework built by &lt;a class="reference external" href="https://explosion.ai/"&gt;explosion.ai&lt;/a&gt;. As part of their online documentation, they include interactive code sessions powered by &lt;a class="reference external" href="https://mybinder.org"&gt;Binder kernels&lt;/a&gt;. They make sure to include the name “Binder” whenever these kernels are spun-up in order to give credit and thanks to the free mybinder.org service.&lt;/p&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="financially-support-open-source-projects"&gt;
&lt;h3&gt;Financially support open source projects&lt;/h3&gt;
&lt;p&gt;Some open source projects have ways to support them directly through funding. For those that do, an easy way to contribute is to provide some of your own financial resources for these things. Check whether the project, or any major contributors in the project, have a &lt;a class="reference external" href="https://github.com/sponsors"&gt;GitHub Sponsors&lt;/a&gt; or a &lt;a class="reference external" href="https://www.patreon.com/"&gt;Patreon&lt;/a&gt; page. Investigate whether the &lt;a class="reference external" href="https://numfocus.org/donate"&gt;project is fiscally sponsored&lt;/a&gt; and can accept donations. Other projects perform focused fundraising, for example the Jupyter Project has a &lt;a class="reference external" href="https://blog.jupyter.org/the-jupyterhub-and-binder-contributor-in-residence-56708d1e3069"&gt;Jupyter Contributor in Residence&lt;/a&gt; position that it must raise funds for.&lt;/p&gt;
&lt;p&gt;Alternatively, look into whether you can sponsor open-source work via other companies or contractors. Many companies do contract-style work in open source, and welcome funding to “buy out” open source time.  Fundraising can be a time-consuming effort, and offering your resources can help make a quick impact if the project is in a good position to accept them.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="bottom-line"&gt;
&lt;h2&gt;Bottom-line&lt;/h2&gt;
&lt;p&gt;There are many different ways that you can participate in open source communities. Fundamentally, this comes down to being attentive, flexible, and generous. Each community is different, but some combination of the above steps will help you make progress and make an impact in working with many open source communities.&lt;/p&gt;
&lt;p&gt;If I’ve missed something important, please do chime in and suggest other ways that organizations can get involved. I would love to continue updating this list as new ideas come to light.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://chrisholdgraf.com/blog/2020/organizations-help-oss-guide/" rel="alternate"/>
    <summary>Over the years I’ve had a recurring question from people who are in organizations both big and small: how can we participate in open source communities?Whether it is because of altruism or strategic importance, many companies, research groups, non-profits, etc want to be involved in open source projects (particularly large and impactful ones like Jupyter), but getting involved can be an opaque and confusing process if you’re not already familiar with open source. Each community has its own nuances and social dynamics, and approaching from the outside can be a challenge.</summary>
    <category term="opensource" label="open source"/>
    <category term="sustainability" label="sustainability"/>
    <published>2020-11-08T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://chrisholdgraf.com/blog/2021/2021-12-18-hybrid-tutorial-prerecord/</id>
    <title>Serving in two roles at once via pre-recorded tutorials</title>
    <updated>2021-12-17T00:00:00+00:00</updated>
    <content type="html">&lt;section id="serving-in-two-roles-at-once-via-pre-recorded-tutorials"&gt;

&lt;p&gt;At AGU 2021 this year I was asked to give &lt;a class="reference external" href="https://www.youtube.com/watch?v=lZ2FHTkyaMU"&gt;a short tutorial introduction to Jupyter Book&lt;/a&gt;.
The tutorial was 30 minutes long, and the session was fully remote.&lt;/p&gt;
&lt;p&gt;This posed a few challenges:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Tutorials almost &lt;strong&gt;always&lt;/strong&gt; go over time - particularly if you’re taking questions from attendees.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It is tricky to go back and forth between lecture-style talking and going through steps yourself to make sure that you’re not out-pacing the attendees.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;My time working with &lt;a class="reference external" href="https://carpentries.org/"&gt;the Carpentries&lt;/a&gt; taught me that having helpers in a tutorial is extremely useful to keep things on track.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So, I decided to try an expriment this time: I’d pre-record my tutorial via Zoom, and then attend the session as a helper. The rest of this post is about my experience!&lt;/p&gt;
&lt;div class="admonition-if-you-d-like-to-check-out-the-tutorial admonition"&gt;
&lt;p class="admonition-title"&gt;If you’d like to check out the tutorial&lt;/p&gt;
&lt;p&gt;Here’s a video of the tutorial in case you’re interested!&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/lZ2FHTkyaMU" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;section id="an-experiment-record-myself-ahead-of-time"&gt;
&lt;h2&gt;An experiment: record myself ahead of time&lt;/h2&gt;
&lt;p&gt;Here’s what I did:&lt;/p&gt;
&lt;section id="before-the-session"&gt;
&lt;h3&gt;Before the session&lt;/h3&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p&gt;Opened two windows on my screen on top of each other: one window was a Google Slides window with my presentation, the other was a JupyterLab window that I used to demonstrate all of the steps.&lt;/p&gt;
&lt;p&gt;Here’s how it looked:&lt;/p&gt;
&lt;figure class="align-default" id="id1"&gt;
&lt;img alt="https://user-images.githubusercontent.com/1839645/146656769-95e0e430-15ac-4b5e-a0ee-7e77e8f7b9ed.png" src="https://user-images.githubusercontent.com/1839645/146656769-95e0e430-15ac-4b5e-a0ee-7e77e8f7b9ed.png" /&gt;
&lt;figcaption&gt;
&lt;p&gt;&lt;span class="caption-text"&gt;My two-window setup in recording the tutorial.&lt;/span&gt;&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In my slides, I included several prompts with explicit text for people to type into their own terminals and text files. I followed the instructions in these slides and typed them into the JupyterLab window myself.&lt;/p&gt;
&lt;figure class="align-default" id="id2"&gt;
&lt;img alt="https://user-images.githubusercontent.com/1839645/146656866-0236e791-9a16-4c60-aa0b-e1ea99e46dd5.png" src="https://user-images.githubusercontent.com/1839645/146656866-0236e791-9a16-4c60-aa0b-e1ea99e46dd5.png" /&gt;
&lt;figcaption&gt;
&lt;p&gt;&lt;span class="caption-text"&gt;Instructions on the top, real-time results on the bottom.&lt;/span&gt;&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I used Zoom to record myself as I clicked through the slides on the top, and followed along on the bottom as if I were a participant myself.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I split the recording into roughly &lt;strong&gt;5 minute sections&lt;/strong&gt;.
I’d stop the recording briefly for each section, take a quick breather, and then move on to recording the next. This ensured that I had a moment to collect myself and if I messed up a section, I’d only have to re-record 5 minutes instead of 30.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;After the recording, I stitched together each of the sections and did a simple fade-out / fade-in using the built-in &lt;a class="reference external" href="https://support.microsoft.com/en-us/windows/create-films-with-video-editor-94e651f8-a5be-ae03-3c50-e49f013d47f6"&gt;Windows Video Editor&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
&lt;section id="during-the-session"&gt;
&lt;h3&gt;During the session&lt;/h3&gt;
&lt;p&gt;During the tutorial, I played the pre-recorded video as the “presenter”, but spent my time answering questions and addressing issues via the chat box.
Attendees would watch the pre-recorded video, and speak with me in the chat if anything came up.
This meant that I could address questions in real-time but without breaking up the flow of the tutorial.
If there was a really important question that was worth discussing as a group, I could have stopped the video to bring it up with everyone.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
&lt;section id="thoughts"&gt;
&lt;h2&gt;Thoughts&lt;/h2&gt;
&lt;p&gt;In all, this worked really nicely!
The biggest downside is that it took a bit of extra time to pre-record the video before the talk itself.
However, I believe I might have actually &lt;em&gt;saved&lt;/em&gt; time, because pre-recording the talk meant that I didn’t feel the need to tinker with my slides in the hours leading up to the talk.&lt;/p&gt;
&lt;p&gt;Here are some of the benefits that I noticed:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;I could serve as presenter and assistant in one talk - two roles with one person!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It gave me more control over the talk length and pacing, because I &lt;em&gt;knew&lt;/em&gt; how much total time was there.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;By recording it ahead of time, I was “done” with the talk much earlier than I normally am (usually I’m stressing about slides until a few moments before the talk)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;It also meant I had less anxiety before the event itself.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I’ll give this another shot the next time I’m giving a remote tutorial (or maybe an in-person tutorial by myself).
In the meantime, I wanted to write up these thoughts while they were fresh in case this might work for somebody else.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://chrisholdgraf.com/blog/2021/2021-12-18-hybrid-tutorial-prerecord/" rel="alternate"/>
    <summary>At AGU 2021 this year I was asked to give a short tutorial introduction to Jupyter Book.
The tutorial was 30 minutes long, and the session was fully remote.This posed a few challenges:</summary>
    <category term="teaching" label="teaching"/>
    <published>2021-12-17T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://chrisholdgraf.com/blog/2022/cloud-services-academia/</id>
    <title>Ask Twitter: Why don’t academic researchers use cloud services?</title>
    <updated>2022-09-05T00:00:00+00:00</updated>
    <content type="html">&lt;section id="ask-twitter-why-don-t-academic-researchers-use-cloud-services"&gt;

&lt;p&gt;&lt;em&gt;this is an experiment at making my &lt;a class="reference external" href="https://twitter.com/choldgraf"&gt;Twitter conversations&lt;/a&gt; a bit more useful and archivable over time. It’s going to be a bit messy and unpolished, but hopefully that makes it more likely I’ll actually do it :-)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Over the past decade, cloud infrastructure has become increasingly popular in industry.
An ecosystem of modular tools and cloud services (often called &lt;a class="reference external" href="https://future.com/emerging-architectures-modern-data-infrastructure/"&gt;the Modern Data Stack&lt;/a&gt;) has filled many data needs for companies.&lt;/p&gt;
&lt;p&gt;However, academic research and education still largely does not utilize this stack.
Instead, they optimize for local workflows or shared infrastructure that exists on-premise.
If you believe (as I do) that cloud infrastructure has the potential to help people do work more effectively and collaboratively, then it’s important to understand why people don’t use these kinds of tools.&lt;/p&gt;
&lt;p&gt;So, I decided to ask Twitter why academics tend to not utilize cloud infrastructure:&lt;/p&gt;
&lt;div class='social-post-wrapper' style='max-width: 500px; margin: auto;'&gt;
&lt;blockquote class="socialpost twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;
  &lt;a href="https://twitter.com/choldgraf/status/1564614538309390345"&gt;Tweet from @choldgraf&lt;/a&gt;
&lt;/blockquote&gt;
&lt;/div&gt;&lt;p&gt;Below is a brief summary of the major points that several people made.&lt;/p&gt;
&lt;section id="fear-of-high-costs"&gt;
&lt;h2&gt;Fear of high costs&lt;/h2&gt;
&lt;p&gt;The most common challenge is the fear of over-running cloud costs.
With on-prem infrastructure, you pay for allotments of time up-front (or don’t pay at all).
Cloud infrastructure allows you to “pay as you go”, but this sometimes means &lt;em&gt;over-paying&lt;/em&gt; if you used resources you didn’t expect:&lt;/p&gt;
&lt;div class='social-post-wrapper' style='max-width: 500px; margin: auto;'&gt;
&lt;blockquote class="socialpost twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;
  &lt;a href="https://twitter.com/anshulkundaje/status/1551585264262295552"&gt;Tweet from @anshulkundaje&lt;/a&gt;
&lt;/blockquote&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Cost monitoring needs to be a more obvious part of cloud services&lt;/strong&gt;.
Fortunately, most cloud providers have their own budgeting and cost monitoring services to prevent this from happening.
However, these don’t seem to be well-understood or utilized.
That brings us to the next concern:&lt;/p&gt;
&lt;/section&gt;
&lt;section id="a-confusing-landscape-of-tools-and-services"&gt;
&lt;h2&gt;A confusing landscape of tools and services&lt;/h2&gt;
&lt;p&gt;There are hundreds of cloud services for data workflows in existence.
All of them make one thing a little bit easier, but you still need knowledge to:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Choose the right cloud services&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Integrate them together&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class='social-post-wrapper' style='max-width: 500px; margin: auto;'&gt;
&lt;blockquote class="socialpost twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;
  &lt;a href="https://twitter.com/cboettig/status/1564671199547838464"&gt;Tweet from @cboettig&lt;/a&gt;
&lt;/blockquote&gt;
&lt;/div&gt;&lt;p&gt;As a result, many cloud services that &lt;em&gt;might&lt;/em&gt; be useful are effectively not used because they get lost in all the noise out there.&lt;/p&gt;
&lt;p&gt;In short, &lt;strong&gt;researchers need support in navigating this space&lt;/strong&gt;.
They need organizations to understand their workflows and recommend a few specific things to use instead of exposing them to the hundreds of options out there.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="high-start-up-costs-and-no-devops-experience"&gt;
&lt;h2&gt;High start-up costs and no DevOps experience&lt;/h2&gt;
&lt;p&gt;Even if you &lt;em&gt;do&lt;/em&gt; find the set of services that you want, you need some way to expose these services to your collaborators or research group.
You also need to manage this integration over time as things change, break, etc.
University groups often do not have dedicated cloud expertise, and so this lands at the feet of post-docs and graduate students with energy and interest to try things out.&lt;/p&gt;
&lt;div class='social-post-wrapper' style='max-width: 500px; margin: auto;'&gt;
&lt;blockquote class="socialpost twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;
  &lt;a href="https://twitter.com/ixek/status/1565645082275057664"&gt;Tweet from @ixek&lt;/a&gt;
&lt;/blockquote&gt;
&lt;/div&gt;&lt;p&gt;However, asking a student to learn and run your cloud infrastructure is also a risky move.
Students move on, and DevOps skills are in high demand.
What happens if you lose that person, or if your grant runs out?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Researchers need others to manage cloud infrastructure for them&lt;/strong&gt;.
Integrating and using most services still requires expertise similar to a systems administrator (but now with cloud infrastructure as well).
We need more services that manage this complexity for them.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="pain-to-first-compute-is-higher-for-cloud"&gt;
&lt;h2&gt;Pain to first compute is higher for cloud&lt;/h2&gt;
&lt;p&gt;Universities recognize that managed services are useful to research - they just prioritize on-premises infrastructure over everything else.
For example, many people noted that HPC is more heavily used simply because the university puts most of their resources into easing the use of this infrastructure.&lt;/p&gt;
&lt;div class='social-post-wrapper' style='max-width: 500px; margin: auto;'&gt;
&lt;blockquote class="socialpost twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;
  &lt;a href="https://twitter.com/SpectralFilter/status/1564697622660763648"&gt;Tweet from @SpectralFilter&lt;/a&gt;
&lt;/blockquote&gt;
&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Universities need to invest in lowering the energy barrier to cloud services as well as on-prem infrastructure&lt;/strong&gt;. We don’t want universities to divest from all of their on-prem hardware and services, but we should make at least marginal investments in similarly reducing the barriers to using cloud infrastructure. What would it look like if universities made it as easy to set up and pay for cloud infrastructure as they do for HPC? I bet a lot more people would experiment and learn with the cloud.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="continuity-of-service-lock-in-concerns"&gt;
&lt;h2&gt;Continuity of service / lock-in concerns&lt;/h2&gt;
&lt;p&gt;When you’re relying on a service exposed by some other organization, you must hope that the service continues to be useful.
Many academics have been burned when services discontinue.&lt;/p&gt;
&lt;p&gt;This might happen for a number of reasons:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;An &lt;strong&gt;internal service&lt;/strong&gt; discontinues because the organization no-longer has capacity to manage it themselves. This is particularly challenging in the context of research funding, which tends to be “boom or bust”.
You get a grant and are well-funded for 3 years.
After it runs out, maybe you’ve got a few months of a gap without dedicated resources for infrastructure.
What happens if your DevOps person’s salary depends on that grant?&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;An &lt;strong&gt;external service&lt;/strong&gt; discontinues because the organization running it pivoted to a new model or cost structure. This is challenging because many cloud services are designed for enterprise, the research community. They are also not accountible to the research community, and do not give it direct representation or governing power over the direction of the services.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Moreover, when our workflows are not easily portable, it creates extra switching cost and strain on a researcher’s workflow.
Many services (both external and internal) do not properly leverage pre-existing and modular tools to make it easy to switch (and why would they, if they’re optimizing for their own growth over the growth of the ecosystem).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Researchers need cost-sharing mechanisms for cloud infrastructure that is designed for them&lt;/strong&gt;.
This would allow them to pool their resources and ensure continuity and quality of service without relying on boom and bust cycles of single grants.&lt;a class="footnote-reference brackets" href="#funding-ideas" id="id1" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;1&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt;
It would also allow them to support reliable and sustainable services that are designed for the unique problems that the research community has (like being a huge, globally-distributed, heterogeneous community with almost no top-down control and thousands of different workflows).&lt;/p&gt;
&lt;/section&gt;
&lt;section id="wrap-up-we-need-more-cloud-native-services-for-research"&gt;
&lt;h2&gt;Wrap-up: we need more cloud-native services for research&lt;/h2&gt;
&lt;p&gt;Others shared a few examples of successful cloud services.
For example, the &lt;a class="reference external" href="https://twitter.com/astrochunly/status/1564620778443718661"&gt;CyVerse&lt;/a&gt; project was largely seen as helpful to academics, though it depended initially on NSF funding to support it and so did not develop a self-sustaining cost recovery model.
Other projects like &lt;a class="reference external" href="https://pangeo.io"&gt;Pangeo&lt;/a&gt; have shown the value that hosted infrastructure can bring to distributed communities that wish to standardize on similar tools, workflows, and data.&lt;a class="footnote-reference brackets" href="#ithaka" id="id2" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;2&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ultimately, it sounds like what we need are a combination of two things:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;More organizations that are dedicated to serving cloud infrastructure to the research community. These should experiment with various models of service delivery as well as cost recovery to provide stable and reliable services for many stakeholders.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;More bureaucratic innovation at easing cloud workflows in large research organizations. These should reduce the artificial barriers to using and paying for cloud infrastructure, to make it easier for researchers to experiment with the cloud and learn how it can be most useful for their work.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I hope that &lt;a class="reference external" href="https://2i2c.org"&gt;2i2c&lt;/a&gt; can help be a part of the solution here - I think there’s a lot of potential for impact!&lt;/p&gt;
&lt;hr class="footnotes docutils" /&gt;
&lt;aside class="footnote-list brackets"&gt;
&lt;aside class="footnote brackets" id="funding-ideas" role="note"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="#id1"&gt;1&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;A few quick ideas: central funding from universities, multi-year grant allotments from funding agencies, asking users to pay the cost of running the service for them, asking organizations to pay for infrastructure onbehalf of their users, philanthropic gifts to cover costs on behalf of a group of users. Really it’ll need to be a subset of all of these things.&lt;/p&gt;
&lt;/aside&gt;
&lt;aside class="footnote brackets" id="ithaka" role="note"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="#id2"&gt;2&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;Apparently there’s also &lt;a class="reference external" href="https://sr.ithaka.org/publications/big-data-infrastructure-at-the-crossroads/"&gt;a great landscape analysis from Ithaka&lt;/a&gt; that I have yet to read but it looks promising.&lt;/p&gt;
&lt;/aside&gt;
&lt;/aside&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://chrisholdgraf.com/blog/2022/cloud-services-academia/" rel="alternate"/>
    <summary>this is an experiment at making my Twitter conversations a bit more useful and archivable over time. It’s going to be a bit messy and unpolished, but hopefully that makes it more likely I’ll actually do it :-)Over the past decade, cloud infrastructure has become increasingly popular in industry.
An ecosystem of modular tools and cloud services (often called the Modern Data Stack) has filled many data needs for companies.</summary>
    <category term="cloud" label="cloud"/>
    <published>2022-09-05T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://chrisholdgraf.com/blog/2022/sphinx-redirects-folder/</id>
    <title>Automatically redirect folders in Sphinx websites</title>
    <updated>2022-11-19T00:00:00+00:00</updated>
    <content type="html">&lt;section id="automatically-redirect-folders-in-sphinx-websites"&gt;

&lt;p&gt;I spent a bit of time today updating my website after some changes in the MyST-NB and Sphinx Design ecosystems.
Along the way, I decided to redirect &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;/posts/&lt;/span&gt;&lt;/code&gt; to &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;/blog/&lt;/span&gt;&lt;/code&gt;, since it seems &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;/blog/&lt;/span&gt;&lt;/code&gt; is a much more common folder to use for blog posts.&lt;/p&gt;
&lt;p&gt;This posed a problem, because &lt;a class="reference external" href="https://github.com/wpilibsuite/sphinxext-rediraffe"&gt;the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;sphinx-rediraffe&lt;/span&gt;&lt;/code&gt; extension&lt;/a&gt; does not allow you to redirect folders with wildcards.
AKA, you cannot do:&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;rediraffe_redirects&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;posts/**/*.md&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;blog/**/*.md&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;I also didn’t want to have to manually specify every single blog post, since that’d be a very long list.&lt;/p&gt;
&lt;p&gt;Fortunately, I figured out a solution because &lt;em&gt;Sphinx’s configuration is also a Python script&lt;/em&gt;.
This means you can dynamically populate this configuration with &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pathlib&lt;/span&gt;&lt;/code&gt;.
I’ll share the code snippet below in case it’s useful for others:&lt;/p&gt;
&lt;div class="literal-block-wrapper docutils container" id="id1"&gt;
&lt;div class="code-block-caption"&gt;&lt;span class="caption-text"&gt;conf.py&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# These are posts I *want* to manually specify&lt;/span&gt;
&lt;span class="n"&gt;rediraffe_redirects&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;rust-governance.md&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;blog/2018/rust_governance.md&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;# Update the posts/* section of the rediraffe redirects to find all files&lt;/span&gt;
&lt;span class="n"&gt;redirect_folders&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;posts&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;blog&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pathlib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;old&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;redirect_folders&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;newpath&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rglob&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;**/*&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;newpath&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;suffix&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.ipynb&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;.md&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
            &lt;span class="n"&gt;oldpath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;newpath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;blog/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;posts/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;rediraffe_redirects&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;oldpath&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;newpath&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
</content>
    <link href="https://chrisholdgraf.com/blog/2022/sphinx-redirects-folder/" rel="alternate"/>
    <summary>I spent a bit of time today updating my website after some changes in the MyST-NB and Sphinx Design ecosystems.
Along the way, I decided to redirect /posts/ to /blog/, since it seems /blog/ is a much more common folder to use for blog posts.This posed a problem, because the sphinx-rediraffe extension does not allow you to redirect folders with wildcards.
AKA, you cannot do:</summary>
    <published>2022-11-19T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://chrisholdgraf.com/blog/2022/orcid-auto-update/</id>
    <title>Automatically updating my publications page with ORCID and doi.org</title>
    <updated>2022-11-19T00:00:00+00:00</updated>
    <content type="html">&lt;section id="automatically-updating-my-publications-page-with-orcid-and-doi-org"&gt;

&lt;p&gt;For a while I’ve had a hand-crafted &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;.bibtex&lt;/span&gt;&lt;/code&gt; file stored locally for &lt;a class="reference internal" href="../publications/"&gt;&lt;span class="doc std std-doc"&gt;my &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;publications/&lt;/span&gt;&lt;/code&gt; page&lt;/span&gt;&lt;/a&gt;.
However, manually updating local text file is a pain to remember, especially since there are many services out there that automatically track new publications.&lt;/p&gt;
&lt;div class="admonition-update admonition"&gt;
&lt;p class="admonition-title"&gt;Update!&lt;/p&gt;
&lt;p&gt;A &lt;a class="reference external" href="https://twitter.com/temorrell/status/1594749942316208128"&gt;helpful suggestion on Twitter&lt;/a&gt; allowed me to include the full citation information, including lists of authors, using the doi.org API!&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Here’s the workflow I’d prefer:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Treat one online service provider as a &lt;strong&gt;Single Source of Truth&lt;/strong&gt; for my publications list.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use an API to programmatically ask this provider for the &lt;em&gt;latest&lt;/em&gt; data about my publications.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Reshape that data into a form that I can insert into my website.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here’s how I accomplished this:&lt;/p&gt;
&lt;section id="use-orcid-to-grab-a-list-of-dois-for-my-publications"&gt;
&lt;h2&gt;Use ORCID to grab a list of DOIs for my publications&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://info.orcid.org/what-is-orcid/"&gt;ORCID is a service for identifying scholars and their contributions&lt;/a&gt;.
It links various kinds of publications and activities to a unique account for each person.
It doesn’t cover &lt;em&gt;all&lt;/em&gt; kinds of outputs (like talks, posters, etc), but it seems to cover the most important ones.&lt;/p&gt;
&lt;p&gt;👉 Here is my ORCID ID and page: &lt;a class="reference external" href="https://orcid.org/0000-0002-2391-0678"&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;https://orcid.org/0000-0002-2391-0678&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;ORCID has &lt;a class="reference external" href="https://info.orcid.org/documentation/features/public-api/"&gt;a public-facing API&lt;/a&gt; that allows you to automatically query information about an ORCID ID.
Following &lt;a class="reference external" href="https://github.com/Project-TAPIR/pidgraph-notebooks/blob/main/person-works/orcid_get_works_by_person.ipynb"&gt;an example notebook shared from the TAPIR project&lt;/a&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="use-the-doi-org-api-to-grab-citation-information"&gt;
&lt;h2&gt;Use the doi.org API to grab citation information&lt;/h2&gt;
&lt;p&gt;While the ORCID API has a lot of useful information in it, there were some important pieces missing, like &lt;strong&gt;co-author information&lt;/strong&gt;.
Fortunately, I learned &lt;a class="reference external" href="https://twitter.com/temorrell/status/1594749942316208128"&gt;from a suggestion on Twitter&lt;/a&gt; that &lt;a class="reference external" href="https://doi.org"&gt;doi.org&lt;/a&gt; is accessible via an API call!&lt;/p&gt;
&lt;p&gt;You can ask &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;doi.org&lt;/span&gt;&lt;/code&gt; for the reference, bibtex file, or a JSON structure of reference data by adding a header to a doi.org URL, like so:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;curl&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;H&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Accept:text/x-bibliography; style=apa&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;H&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;User-Agent: mailto:youremail@email.com&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;dx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;doi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;10.1371&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;journal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pcbi&lt;/span&gt;&lt;span class="mf"&gt;.1009651&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This returns a fully-resolved reference like so:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;DuPre&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;E&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Holdgraf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Karakuzu&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Tetrel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Bellec&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;P&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Stikov&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;Poline&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;J&lt;/span&gt;&lt;span class="o"&gt;.-&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2022&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Beyond&lt;/span&gt; &lt;span class="n"&gt;advertising&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;New&lt;/span&gt; &lt;span class="n"&gt;infrastructures&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;publishing&lt;/span&gt; &lt;span class="n"&gt;integrated&lt;/span&gt; &lt;span class="n"&gt;research&lt;/span&gt; &lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;PLOS&lt;/span&gt; &lt;span class="n"&gt;Computational&lt;/span&gt; &lt;span class="n"&gt;Biology&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;e1009651&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;doi&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;org&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;10.1371&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;journal&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pcbi&lt;/span&gt;&lt;span class="mf"&gt;.1009651&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;The &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;-H&lt;/span&gt; &lt;span class="pre"&gt;&amp;quot;User-Agent:&lt;/span&gt; &lt;span class="pre"&gt;mailto:youremail&amp;#64;email.com&amp;quot;&lt;/span&gt;&lt;/code&gt; is a way to identify yourself to the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;doi.org&lt;/span&gt;&lt;/code&gt; API, which reduces the likelihood that you will have your access revoked.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;In Python, the same call looks like this:&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get&lt;/span&gt;
&lt;span class="n"&gt;doi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;10.1371/journal.pcbi.1009651&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://dx.doi.org/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;doi&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;header&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;accept&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;text/x-bibliography; style=apa&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;User-Agent&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;mailto:youremail@email.com&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;You can also use other kinds of header configuration, like:&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# A citeproc-styled JSON structure&lt;/span&gt;
&lt;span class="n"&gt;header&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;accept&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;citeproc+json&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;# A bibtex entry&lt;/span&gt;
&lt;span class="n"&gt;header&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;accept&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;bibtex&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The citeproc JSON structure has a ton of information in it, including information about all of the co-authors (and an extra bonus - a link to their ORCID pages!).
This is all the information I needed for my website.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="a-script-to-do-this-all-at-once"&gt;
&lt;h2&gt;A script to do this all at once&lt;/h2&gt;
&lt;p&gt;I wrote a little script that runs each time my Sphinx site is built.
It generates a markdown snippet that is then inserted into my &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;publications.md&lt;/span&gt;&lt;/code&gt; page.&lt;/p&gt;
&lt;details class="sd-sphinx-override sd-dropdown sd-card sd-mb-3"&gt;
&lt;summary class="sd-summary-title sd-card-header"&gt;
Python snippet to download ORCID data&lt;div class="sd-summary-down docutils"&gt;
&lt;svg version="1.1" width="1.5em" height="1.5em" class="sd-octicon sd-octicon-chevron-down" viewBox="0 0 24 24" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M5.22 8.72a.75.75 0 000 1.06l6.25 6.25a.75.75 0 001.06 0l6.25-6.25a.75.75 0 00-1.06-1.06L12 14.44 6.28 8.72a.75.75 0 00-1.06 0z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/div&gt;
&lt;div class="sd-summary-up docutils"&gt;
&lt;svg version="1.1" width="1.5em" height="1.5em" class="sd-octicon sd-octicon-chevron-up" viewBox="0 0 24 24" aria-hidden="true"&gt;&lt;path fill-rule="evenodd" d="M18.78 15.28a.75.75 0 000-1.06l-6.25-6.25a.75.75 0 00-1.06 0l-6.25 6.25a.75.75 0 101.06 1.06L12 9.56l5.72 5.72a.75.75 0 001.06 0z"&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/div&gt;
&lt;/summary&gt;&lt;div class="sd-summary-content sd-card-body docutils"&gt;
&lt;p class="sd-card-text"&gt;&lt;em&gt;Note that the below is &lt;a class="reference external" href="https://jupytext.readthedocs.io/en/latest/install.html"&gt;a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;jupytext&lt;/span&gt;&lt;/code&gt; document&lt;/a&gt; which is why there’s extra metadata at the top&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# ---&lt;/span&gt;
&lt;span class="c1"&gt;# jupyter:&lt;/span&gt;
&lt;span class="c1"&gt;#   jupytext:&lt;/span&gt;
&lt;span class="c1"&gt;#     formats: py:light&lt;/span&gt;
&lt;span class="c1"&gt;#     text_representation:&lt;/span&gt;
&lt;span class="c1"&gt;#       extension: .py&lt;/span&gt;
&lt;span class="c1"&gt;#       format_name: light&lt;/span&gt;
&lt;span class="c1"&gt;#       format_version: &amp;#39;1.5&amp;#39;&lt;/span&gt;
&lt;span class="c1"&gt;#       jupytext_version: 1.14.1&lt;/span&gt;
&lt;span class="c1"&gt;#   kernelspec:&lt;/span&gt;
&lt;span class="c1"&gt;#     display_name: Python 3 (ipykernel)&lt;/span&gt;
&lt;span class="c1"&gt;#     language: python&lt;/span&gt;
&lt;span class="c1"&gt;#     name: python3&lt;/span&gt;
&lt;span class="c1"&gt;# ---&lt;/span&gt;

&lt;span class="c1"&gt;# +&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;IPython.display&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Markdown&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;JSON&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pathlib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rich&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;progress&lt;/span&gt;

&lt;span class="c1"&gt;# My ORCID&lt;/span&gt;
&lt;span class="n"&gt;orcid_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;0000-0002-2391-0678&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;ORCID_RECORD_API&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;https://pub.orcid.org/v3.0/&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# Download all of my ORCID records&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Retrieving ORCID entries from API...&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;utils&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;requote_uri&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ORCID_RECORD_API&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;orcid_id&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Accept&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;application/json&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raise_for_status&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;orcid_record&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# +&lt;/span&gt;
&lt;span class="c1"&gt;# Just to visualize in a notebook if need be&lt;/span&gt;
&lt;span class="c1"&gt;# JSON(orcid_record)&lt;/span&gt;

&lt;span class="c1"&gt;# +&lt;/span&gt;

&lt;span class="c1"&gt;###&lt;/span&gt;
&lt;span class="c1"&gt;# Resolve my DOIs from ORCID as references&lt;/span&gt;
&lt;span class="c1"&gt;# Shamelessly copied from:&lt;/span&gt;
&lt;span class="c1"&gt;# https://gist.github.com/brews/8d3b3ede15d120a86a6bd6fc43859c5e&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fetchmeta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;doi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;reference&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Fetch metadata for a given DOI.&lt;/span&gt;

&lt;span class="sd"&gt;    Parameters&lt;/span&gt;
&lt;span class="sd"&gt;    ----------&lt;/span&gt;
&lt;span class="sd"&gt;    doi : str&lt;/span&gt;
&lt;span class="sd"&gt;    fmt : str, optional&lt;/span&gt;
&lt;span class="sd"&gt;        Desired metadata format. Can be &amp;#39;dict&amp;#39; or &amp;#39;bibtex&amp;#39;.&lt;/span&gt;
&lt;span class="sd"&gt;        Default is &amp;#39;dict&amp;#39;.&lt;/span&gt;
&lt;span class="sd"&gt;    **kwargs :&lt;/span&gt;
&lt;span class="sd"&gt;        Additional keyword arguments are passed to `json.loads()` if `fmt`&lt;/span&gt;
&lt;span class="sd"&gt;        is &amp;#39;dict&amp;#39; and you&amp;#39;re a big JSON nerd.&lt;/span&gt;

&lt;span class="sd"&gt;    Returns&lt;/span&gt;
&lt;span class="sd"&gt;    -------&lt;/span&gt;
&lt;span class="sd"&gt;    out : str or dict or None&lt;/span&gt;
&lt;span class="sd"&gt;        `None` is returned if the server gives unhappy response. Usually&lt;/span&gt;
&lt;span class="sd"&gt;        this means the DOI is bad.&lt;/span&gt;

&lt;span class="sd"&gt;    Examples&lt;/span&gt;
&lt;span class="sd"&gt;    --------&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; fetchmeta(&amp;#39;10.1016/j.dendro.2018.02.005&amp;#39;)&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;gt;&amp;gt;&amp;gt; fetchmeta(&amp;#39;10.1016/j.dendro.2018.02.005&amp;#39;, &amp;#39;bibtex&amp;#39;)&lt;/span&gt;

&lt;span class="sd"&gt;    References&lt;/span&gt;
&lt;span class="sd"&gt;    ----------&lt;/span&gt;
&lt;span class="sd"&gt;    https://www.doi.org/hb.html&lt;/span&gt;
&lt;span class="sd"&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="c1"&gt;# Parse args and setup the server response we want.&lt;/span&gt;
    &lt;span class="n"&gt;accept_type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;application/&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;dict&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;accept_type&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;citeproc+json&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;bibtex&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;accept_type&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;x-bibtex&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;reference&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;accept_type&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;text/x-bibliography; style=apa&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Unrecognized `fmt`: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Request data from server.&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;https://dx.doi.org/&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;doi&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;header&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;accept&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;accept_type&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;headers&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Format metadata if server response is good.&lt;/span&gt;
    &lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;status_code&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;dict&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loads&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt;


&lt;span class="c1"&gt;# -&lt;/span&gt;

&lt;span class="c1"&gt;# Extract metadata for each entry&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;iwork&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;progress&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;track&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;orcid_record&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;activities-summary&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;works&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;group&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Fetching reference data...&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;isummary&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;iwork&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;work-summary&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="c1"&gt;# Extract the DOI&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;ii&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;isummary&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;external-ids&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;external-id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;ii&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;external-id-type&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;doi&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;doi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ii&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;external-id-value&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;

    &lt;span class="n"&gt;meta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fetchmeta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;doi&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;dict&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;doi_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;URL&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;references_count&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;references-count&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;year&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;issued&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;date-parts&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;URL&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="c1"&gt;# Create authors list with links to their ORCIDs&lt;/span&gt;
    &lt;span class="n"&gt;authors&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;author&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;autht&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;authors&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;family&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;given&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;holdgraf&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;family&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;**&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;**&amp;quot;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ORCID&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;autht&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;[&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;](&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ORCID&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;autht&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;autht&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;, &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;autht&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;journal&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;meta&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;publisher&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="n"&gt;url_doi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;//&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;reference&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;autht&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; (&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;). **&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;**. &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;journal&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;. [&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;url_doi&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;](&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;)&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;year&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;reference&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;reference&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Convert into a markdown string&lt;/span&gt;
&lt;span class="n"&gt;md&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groupby&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;year&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;md&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;## &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iterrows&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;md&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;reference&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="n"&gt;md&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;md&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;mds&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;md&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# +&lt;/span&gt;
&lt;span class="c1"&gt;# Uncomment to preview in a notebook&lt;/span&gt;
&lt;span class="c1"&gt;# Markdown(mds)&lt;/span&gt;
&lt;span class="c1"&gt;# -&lt;/span&gt;

&lt;span class="c1"&gt;# This will only work if this is run as a script&lt;/span&gt;
&lt;span class="n"&gt;path_out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__file__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;_static/publications.txt&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;path_out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write_text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mds&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Finished updating ORCID entries at: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;path_out&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/details&gt;&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://chrisholdgraf.com/blog/2022/orcid-auto-update/" rel="alternate"/>
    <summary>For a while I’ve had a hand-crafted .bibtex file stored locally for my publications/ page.
However, manually updating local text file is a pain to remember, especially since there are many services out there that automatically track new publications.A helpful suggestion on Twitter allowed me to include the full citation information, including lists of authors, using the doi.org API!</summary>
    <category term="doi" label="doi"/>
    <category term="orcid" label="orcid"/>
    <category term="scholarship" label="scholarship"/>
    <published>2022-11-19T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://chrisholdgraf.com/blog/2022/sphinx-custom-crossrefs/</id>
    <title>Custom roles and domains in Sphinx with one line</title>
    <updated>2022-11-21T00:00:00+00:00</updated>
    <content type="html">&lt;section id="custom-roles-and-domains-in-sphinx-with-one-line"&gt;

&lt;p&gt;I was working on &lt;a class="reference external" href="https://compass.2i2c.org"&gt;the roles and structure section of the 2i2c Team Compass&lt;/a&gt; and found a nifty feature in Sphinx that I hadn’t known before.&lt;/p&gt;
&lt;p&gt;You can currently add labels to any section with the following MyST Markdown structure:&lt;/p&gt;
&lt;div class="highlight-md notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(mylabel)=
&lt;span class="gu"&gt;## My header&lt;/span&gt;

And now I [&lt;span class="nt"&gt;reference it&lt;/span&gt;](&lt;span class="na"&gt;mylabel&lt;/span&gt;).
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;However, there are no &lt;strong&gt;semantics&lt;/strong&gt; attached to this label.
Instead I’d like to be able to specify what &lt;em&gt;kind&lt;/em&gt; of a label this is.
In my case, it’s because I wanted to define a &lt;strong&gt;group of labels attached to our organization’s roles&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Fortunately this is pretty easy to do!
Just not well-documented.&lt;/p&gt;
&lt;p&gt;Here’s how to &lt;strong&gt;define a custom role and reference it in Sphinx&lt;/strong&gt;:&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Register your new role group&lt;/strong&gt;. In your &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;conf.py&lt;/span&gt;&lt;/code&gt; configuration, use &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;app.add_crossref_type&lt;/span&gt;&lt;/code&gt; like so:&lt;/p&gt;
&lt;div class="literal-block-wrapper docutils container" id="id1"&gt;
&lt;div class="code-block-caption"&gt;&lt;span class="caption-text"&gt;conf.py&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_crossref_type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;labelmygroup&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;mygrp&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The first argument &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;labelmygroup&lt;/span&gt;&lt;/code&gt; is the name of a &lt;strong&gt;directive&lt;/strong&gt; that you’ll now be able to use to attach a section of your documentation to this role group.&lt;/p&gt;
&lt;p&gt;The second argument &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;mygrp&lt;/span&gt;&lt;/code&gt; is the name of a &lt;strong&gt;role&lt;/strong&gt; that you can now use to refer to an group that was labeled with &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;labelmygroup&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Add a group label to a section with a directive&lt;/strong&gt;. You can do this like so:&lt;/p&gt;
&lt;div class="highlight-md notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;```{labelmygroup} Some name
```
&lt;span class="gu"&gt;## Group description&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Reference the label with a role&lt;/strong&gt;. You can now reference the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Some&lt;/span&gt; &lt;span class="pre"&gt;name&lt;/span&gt;&lt;/code&gt; group with a role, like so: &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Here&lt;/span&gt; &lt;span class="pre"&gt;is&lt;/span&gt; &lt;span class="pre"&gt;{mygrp}`Some&lt;/span&gt; &lt;span class="pre"&gt;name`&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This is a nice way to have semantic references throughout your docs (like &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;{role}`Executive&lt;/span&gt; &lt;span class="pre"&gt;Director`&lt;/span&gt;&lt;/code&gt;) rather than generic ones.&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://www.sphinx-doc.org/en/master/extdev/appapi.html#sphinx.application.Sphinx.add_crossref_type"&gt;the Sphinx Documentation on this&lt;/a&gt; for more details.&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="https://chrisholdgraf.com/blog/2022/sphinx-custom-crossrefs/" rel="alternate"/>
    <summary>I was working on the roles and structure section of the 2i2c Team Compass and found a nifty feature in Sphinx that I hadn’t known before.You can currently add labels to any section with the following MyST Markdown structure:</summary>
    <category term="myst" label="myst"/>
    <category term="scholarship" label="scholarship"/>
    <category term="sphinx" label="sphinx"/>
    <published>2022-11-21T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://chrisholdgraf.com/blog/2022/phantom-workflows-pull-requests/</id>
    <title>Fix phantom GitHub workflows in your ci-cd with protected branch rules</title>
    <updated>2022-11-27T00:00:00+00:00</updated>
    <content type="html">&lt;section id="fix-phantom-github-workflows-in-your-ci-cd-with-protected-branch-rules"&gt;

&lt;p&gt;Have you ever had a GitHub pull request show “phantom” workflows that never pass?
This looks like one or more workflows that are in a constant &lt;strong&gt;waiting state&lt;/strong&gt;, with a yellow status indicator, and that never complete.&lt;/p&gt;
&lt;p&gt;It looks something like this:&lt;/p&gt;
&lt;img alt="https://user-images.githubusercontent.com/1839645/204134864-da2541f0-ff4f-4d9f-8c80-aa8c4437d8a0.png" src="https://user-images.githubusercontent.com/1839645/204134864-da2541f0-ff4f-4d9f-8c80-aa8c4437d8a0.png" /&gt;
&lt;p&gt;If you run into this, it may be because of &lt;a class="reference external" href="https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/defining-the-mergeability-of-pull-requests/about-protected-branches"&gt;branch protection rules&lt;/a&gt; in their repository.
These allow you to ensure that certain conditions are met before a pull request can be merged.&lt;/p&gt;
&lt;p&gt;In particular, a common step is to &lt;strong&gt;ensure that a certain GitHub Workflow passes before you can merge&lt;/strong&gt;.
This is often the source of the phantom workflows that never complete.
This is configured via &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;settings&lt;/span&gt;&lt;/code&gt; -&amp;gt; &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;branches&lt;/span&gt;&lt;/code&gt; -&amp;gt; &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;branch&lt;/span&gt; &lt;span class="pre"&gt;protection&lt;/span&gt; &lt;span class="pre"&gt;rules&lt;/span&gt;&lt;/code&gt;, like so:&lt;/p&gt;
&lt;img alt="https://user-images.githubusercontent.com/1839645/204134952-fb5b8aa5-f8bb-4bd9-92ec-c66bf653387a.png" src="https://user-images.githubusercontent.com/1839645/204134952-fb5b8aa5-f8bb-4bd9-92ec-c66bf653387a.png" /&gt;
&lt;p&gt;If you &lt;strong&gt;specify a test here, and then delete it in your &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;YAML&lt;/span&gt;&lt;/code&gt; configuration file, this will cause phantom workflows in your Pull Requests&lt;/strong&gt;.
GitHub will wait for the test to finish, because it is specified in your repository settings, but it will never finish because the test isn’t configured in your workflow configuration.&lt;/p&gt;
&lt;p&gt;So, to fix it, you simply &lt;strong&gt;delete the entry in your protected branch rules associated with that test&lt;/strong&gt;.
As a result, GitHub will no longer wait for that test to complete, and you can merge away.&lt;/p&gt;
&lt;p&gt;This one has bitten me several times, and so I decided to just document it here for future reference.
&lt;a class="reference external" href="https://jacobtomlinson.dev/"&gt;Jacob Tomlinson&lt;/a&gt; was the one that first told me about this fix!&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="https://chrisholdgraf.com/blog/2022/phantom-workflows-pull-requests/" rel="alternate"/>
    <summary>Have you ever had a GitHub pull request show “phantom” workflows that never pass?
This looks like one or more workflows that are in a constant waiting state, with a yellow status indicator, and that never complete.It looks something like this:</summary>
    <category term="cicd" label="cicd"/>
    <category term="githubactions" label="github actions"/>
    <published>2022-11-27T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://chrisholdgraf.com/blog/2022/shell-split/</id>
    <title>subprocess.run can execute shell commands directly</title>
    <updated>2022-11-29T00:00:00+00:00</updated>
    <content type="html">&lt;section id="subprocess-run-can-execute-shell-commands-directly"&gt;

&lt;p&gt;I often run shell commands in Python via the &lt;a class="reference external" href="https://docs.python.org/3/library/subprocess.html#subprocess.run"&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;subprocess.run&lt;/span&gt;&lt;/code&gt; command&lt;/a&gt;.
One thing that has always bugged me is that this required you to split commands into a list before it’d work properly.
For example, you’d have to do:&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;shlex&lt;/span&gt;

&lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;shlex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ls -l&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Today I discovered that you don’t have to do this!
There’s a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;shell=&lt;/span&gt;&lt;/code&gt; keyword that can be used to tell subprocess to simply run the command directly in the shell.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt;
&lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ls -l&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Apparently there are some &lt;a class="reference external" href="https://docs.python.org/3/library/subprocess.html#security-considerations"&gt;security considerations&lt;/a&gt; but this seems like a big papercut saver to me.&lt;/p&gt;
&lt;/section&gt;
</content>
    <link href="https://chrisholdgraf.com/blog/2022/shell-split/" rel="alternate"/>
    <summary>I often run shell commands in Python via the subprocess.run command.
One thing that has always bugged me is that this required you to split commands into a list before it’d work properly.
For example, you’d have to do:Today I discovered that you don’t have to do this!
There’s a shell= keyword that can be used to tell subprocess to simply run the command directly in the shell.</summary>
    <category term="python" label="python"/>
    <category term="shell" label="shell"/>
    <published>2022-11-29T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://chrisholdgraf.com/blog/2022/precommit-autoupdate/</id>
    <title>Automatically update pre-commit hook versions</title>
    <updated>2022-12-03T00:00:00+00:00</updated>
    <content type="html">&lt;section id="automatically-update-pre-commit-hook-versions"&gt;

&lt;p&gt;I figured out a way to automatically update all of the git &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pre-commit&lt;/span&gt;&lt;/code&gt; hook versions at once!&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://pre-commit.com/"&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pre-commit&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; is a useful command line tool for running simple commands before every &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;git&lt;/span&gt;&lt;/code&gt; commit.
I use it to enforce things like &lt;a class="reference external" href="https://flake8.pycqa.org/"&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;flake8&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/psf/black"&gt;&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;black&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; in many of my projects.&lt;/p&gt;
&lt;p&gt;However, I find it really annoying to keep manually updating my &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pre-commit&lt;/span&gt;&lt;/code&gt; hooks with new versions, particularly because &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pre-commit&lt;/span&gt;&lt;/code&gt; doesn’t let you specify wild-cards.&lt;/p&gt;
&lt;p&gt;Fortunately, I recently came across &lt;a class="reference external" href="https://pre-commit.com/#updating-hooks-automatically"&gt;the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pre-commit&lt;/span&gt; &lt;span class="pre"&gt;autoupdate&lt;/span&gt;&lt;/code&gt; documentation&lt;/a&gt;.
This lets you automatically update to the latest released versions of all-precommit hooks.
Simply run:&lt;/p&gt;
&lt;div class="highlight-bash notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pre-commit&lt;span class="w"&gt; &lt;/span&gt;autoupdate
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;And it will update your &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;.pre-commit-config.yaml&lt;/span&gt;&lt;/code&gt; file with the latest versions.
This feels like the easiest way to keep these configurations updated, at least until &lt;a class="reference external" href="https://github.com/dependabot/dependabot-core/issues/1524"&gt;GitHub adds &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;dependabot&lt;/span&gt;&lt;/code&gt; support for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pre-commit&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;section id="automate-the-above-with-pre-commit-ci"&gt;
&lt;h2&gt;Automate the above with &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pre-commit.ci&lt;/span&gt;&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: A few folks mentioned that you can actually &lt;strong&gt;automate this whole process&lt;/strong&gt; by using &lt;a class="reference external" href="https://pre-commit.ci/"&gt;pre-commit.ci&lt;/a&gt;, a service for using &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pre-commit&lt;/span&gt;&lt;/code&gt;’s functionality with automated jobs.&lt;/p&gt;
&lt;p&gt;That service will both automatically run &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pre-commit&lt;/span&gt;&lt;/code&gt; on your Pull Requests, and will also update your &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pre-commit&lt;/span&gt;&lt;/code&gt; dependencies on the fly.&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://chrisholdgraf.com/blog/2022/precommit-autoupdate/" rel="alternate"/>
    <summary>I figured out a way to automatically update all of the git pre-commit hook versions at once!pre-commit is a useful command line tool for running simple commands before every git commit.
I use it to enforce things like flake8 and black in many of my projects.</summary>
    <category term="git" label="git"/>
    <category term="python" label="python"/>
    <published>2022-12-03T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://chrisholdgraf.com/blog/2022/sphinx-update-config/</id>
    <title>How to update Sphinx configuration and theme options during the build</title>
    <updated>2022-12-05T00:00:00+00:00</updated>
    <content type="html">&lt;section id="how-to-update-sphinx-configuration-and-theme-options-during-the-build"&gt;

&lt;p&gt;As part of &lt;a class="reference external" href="https://github.com/pydata/pydata-sphinx-theme/pull/1075"&gt;the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pydata-sphinx-theme&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; we have a few settings that auto-enable extensions and configure them on behalf of the user.
It has always been mysterious to me how to do this properly &lt;strong&gt;during the Sphinx build&lt;/strong&gt;.
It’s easy to configure things with &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;conf.py&lt;/span&gt;&lt;/code&gt; ahead of time, but what if you want to manually set a value during the build?&lt;/p&gt;
&lt;p&gt;I finally figured it out, so documenting the process here.&lt;/p&gt;
&lt;section id="use-the-builder-inited-event"&gt;
&lt;h2&gt;Use the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;builder-inited&lt;/span&gt;&lt;/code&gt; event&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Define a Sphinx event for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;builder-inited&lt;/span&gt;&lt;/code&gt;&lt;/strong&gt;. This will trigger after the builder has been selected, but before the environent is finalized for the build.
This should be a function that takes a single &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;(app)&lt;/span&gt;&lt;/code&gt; parameter.&lt;/p&gt;
&lt;div class="admonition seealso"&gt;
&lt;p class="admonition-title"&gt;See also&lt;/p&gt;
&lt;p&gt;See &lt;a class="reference external" href="https://www.sphinx-doc.org/en/master/extdev/appapi.html#sphinx-core-events"&gt;the Sphinx Core Events documentation&lt;/a&gt; for more information about Sphinx’s events system.&lt;/p&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="use-app-raw-config-to-find-the-user-provided-config"&gt;
&lt;h2&gt;Use &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;app._raw_config&lt;/span&gt;&lt;/code&gt; to find the user-provided config&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Use the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;app._raw_config&lt;/span&gt;&lt;/code&gt; object to detect user-given config&lt;/strong&gt;. &lt;a class="reference external" href="https://github.com/sphinx-doc/sphinx/blob/ba080286b06cb9e0cadec59a6cf1f96aa11aef5a/sphinx/config.py#L151-L155"&gt;This is first written when Sphinx is initialized&lt;/a&gt; and should be a good indication of what the user provided.&lt;/p&gt;
&lt;p&gt;This is useful if you only want to over-ride something if the &lt;em&gt;user didn’t set it themselves&lt;/em&gt;.
However, the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;app.config&lt;/span&gt;&lt;/code&gt; object will have &lt;em&gt;all&lt;/em&gt; of the config options, including defaults.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="update-configuration-options-with-the-config-values-object"&gt;
&lt;h2&gt;Update configuration options with the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;config.values&lt;/span&gt;&lt;/code&gt; object&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Update &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;app.config.values&lt;/span&gt;&lt;/code&gt;&lt;/strong&gt;.
You can access the config values at &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;app.config.valuename&lt;/span&gt;&lt;/code&gt;, but you can’t &lt;em&gt;set&lt;/em&gt; them there.
&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;app.config.values&lt;/span&gt;&lt;/code&gt; contains the actual key/value pairs in the config.
So, to set a value, use &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;app.config.values[&amp;quot;key&amp;quot;]&lt;/span&gt; &lt;span class="pre"&gt;=&lt;/span&gt; &lt;span class="pre"&gt;&amp;quot;value&amp;quot;&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Running &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;config[&amp;quot;key&amp;quot;]&lt;/span&gt;&lt;/code&gt; actually corresponds to &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;config.values[&amp;quot;key&amp;quot;]&lt;/span&gt;&lt;/code&gt;.
If you directly set a value like &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;config.foo&lt;/span&gt; &lt;span class="pre"&gt;=&lt;/span&gt; &lt;span class="pre"&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;&lt;/code&gt;, then nothing happens because &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;config.values&lt;/span&gt;&lt;/code&gt; is not updated.&lt;/p&gt;
&lt;p&gt;This seems to mirror &lt;a class="reference external" href="https://github.com/sphinx-doc/sphinx/blob/b1ca6b3e120d83c9bb64fdea310574afb9897c1a/sphinx/config.py#L186-L195"&gt;how Sphinx sets up the config internally&lt;/a&gt;, and leads to the behavior I want.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="update-html-theme-options-with-app-builder-theme-options"&gt;
&lt;h2&gt;Update HTML theme options with &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;app.builder.theme_options&lt;/span&gt;&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Update &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;app.builder.theme_options&lt;/span&gt;&lt;/code&gt;&lt;/strong&gt;.
Many people (including myself) incorrectly try to update &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;app.config.html_theme_options&lt;/span&gt;&lt;/code&gt; during a build event.
But this doesn’t do anything because the’ve already been copied over to &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;app.builder.theme_options&lt;/span&gt;&lt;/code&gt; early in the build process.
Annoyingly, the copied dictionary in &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;app.builder.theme_options&lt;/span&gt;&lt;/code&gt; does not point to the same points in memory as &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;app.config.html_theme_options&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This &lt;a class="reference external" href="https://github.com/sphinx-doc/sphinx/blob/ba080286b06cb9e0cadec59a6cf1f96aa11aef5a/sphinx/builders/html/__init__.py#L301-L307"&gt;copy action is done here&lt;/a&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="an-example"&gt;
&lt;h2&gt;An example&lt;/h2&gt;
&lt;p&gt;Here’s an example of the whole process in action:&lt;/p&gt;
&lt;div class="highlight-python notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# This function will update a single configuration value&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;update_config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
   &lt;span class="c1"&gt;# Check if a value was provided by the user&lt;/span&gt;
   &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_raw_values&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
      &lt;span class="c1"&gt;# Update a config value&lt;/span&gt;
      &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;bar&amp;quot;&lt;/span&gt;

   &lt;span class="c1"&gt;# Update an HTML theme value&lt;/span&gt;
   &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;builder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;theme_options&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;foo2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;bar2&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# Register the above function to be called during the builder-inited phase&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;builder-inited&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;update_config&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://chrisholdgraf.com/blog/2022/sphinx-update-config/" rel="alternate"/>
    <summary>As part of the pydata-sphinx-theme we have a few settings that auto-enable extensions and configure them on behalf of the user.
It has always been mysterious to me how to do this properly during the Sphinx build.
It’s easy to configure things with conf.py ahead of time, but what if you want to manually set a value during the build?I finally figured it out, so documenting the process here.</summary>
    <category term="sphinx" label="sphinx"/>
    <published>2022-12-05T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://chrisholdgraf.com/blog/2022/matplotlib-remote-font/</id>
    <title>Load and plot a remote font with Matplotlib</title>
    <updated>2022-12-06T00:00:00+00:00</updated>
    <content type="html">&lt;section id="load-and-plot-a-remote-font-with-matplotlib"&gt;

&lt;p&gt;As part of &lt;a class="reference external" href="https://github.com/choldgraf/sphinx-social-previews"&gt;my &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;sphinx-social-previews&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; prototype, I wanted to be able to use the &lt;a class="reference external" href="https://fonts.google.com/specimen/Roboto"&gt;Roboto Font from Google&lt;/a&gt; in image previews.
However, Roboto is often not loaded on your local filesystem, so it took some digging to figure out how to make it possible to load via &lt;a class="reference external" href="https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.text.html"&gt;Matplotlib’s text plotting functionality&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here’s the solution that finally worked for me, inspired &lt;a class="reference external" href="https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.text.html"&gt;from this Tweet with a similar implementation&lt;/a&gt; from &lt;a class="reference external" href="https://github.com/whitead/dmol-book/blob/master/package/dmol/__init__.py"&gt;the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;dmol&lt;/span&gt;&lt;/code&gt; book&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Below I’ll use &lt;a class="reference external" href="http://mozilla.github.io/Fira/"&gt;the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Fira&lt;/span&gt; &lt;span class="pre"&gt;Code&lt;/span&gt;&lt;/code&gt; font from Mozilla&lt;/a&gt; but you could do this with any open font that you have the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;.ttf&lt;/span&gt;&lt;/code&gt; file for.&lt;/p&gt;
&lt;section id="create-a-temporary-folder-and-download-the-font-file"&gt;
&lt;h2&gt;Create a temporary folder and download the font file&lt;/h2&gt;
&lt;p&gt;I’ll show how to do this with a local folder, so it’ll re-download each time you run the code.
Alternatively you could download the font locally and just register the path instead of downloading it:&lt;/p&gt;
&lt;p&gt;First, &lt;strong&gt;download the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;.ttf&lt;/span&gt;&lt;/code&gt; of the font locally&lt;/strong&gt; via &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;urlretrieve&lt;/span&gt;&lt;/code&gt;.
For example, the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Fira&lt;/span&gt; &lt;span class="pre"&gt;Code&lt;/span&gt;&lt;/code&gt; font from Mozilla is located &lt;a class="reference external" href="https://github.com/google/fonts/raw/main/ofl/firacode/FiraCode%5Bwght%5D.ttf"&gt;at this URL&lt;/a&gt;.
To download it locally into a &lt;strong&gt;temporary folder&lt;/strong&gt; using &lt;a class="reference external" href="https://docs.python.org/3/library/tempfile.html#tempfile.mkdtemp"&gt;the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;tempfile.mkdtemp&lt;/span&gt;&lt;/code&gt; function&lt;/a&gt;, run this code:&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;tempfile&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pathlib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;urllib&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;rich&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nb"&gt;print&lt;/span&gt;

&lt;span class="c1"&gt;# Create a temporary directory for the font file&lt;/span&gt;
&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tempfile&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mkdtemp&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

&lt;span class="c1"&gt;# URL and downloaded path of the font&lt;/span&gt;
&lt;span class="n"&gt;url_font&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;https://github.com/google/fonts/raw/main/ofl/firacode/FiraCode%5Bwght%5D.ttf&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;path_font&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Fira-Code.ttf&amp;quot;&lt;/span&gt;


&lt;span class="c1"&gt;# Download the font to our temporary directory&lt;/span&gt;
&lt;span class="n"&gt;urllib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urlretrieve&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url_font&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path_font&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;div class="output text_plain highlight-myst-ansi notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(PosixPath(&amp;#39;/tmp/tmpq9id6a1q/Fira-Code.ttf&amp;#39;),
 &amp;lt;http.client.HTTPMessage at 0x7f44405510f0&amp;gt;)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="link-the-font-with-the-font-manager-api"&gt;
&lt;h2&gt;Link the font with the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;font_manager&lt;/span&gt;&lt;/code&gt; API&lt;/h2&gt;
&lt;p&gt;Now that the file is loaded, we can link it using &lt;a class="reference external" href="https://matplotlib.org/stable/api/font_manager_api.html"&gt;Matplotlib’s &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;font_manager&lt;/span&gt;&lt;/code&gt; API&lt;/a&gt;.
This allows you to &lt;strong&gt;register fonts that Matplotlib knows how to use&lt;/strong&gt;.&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;matplotlib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;font_manager&lt;/span&gt;

&lt;span class="c1"&gt;# Create a Matplotlib Font object from our `.ttf` file&lt;/span&gt;
&lt;span class="n"&gt;font&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;font_manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FontEntry&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path_font&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Fira-Downloaded&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Register this object with Matplotlib&amp;#39;s ttf list&lt;/span&gt;
&lt;span class="n"&gt;font_manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fontManager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ttflist&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;font&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# Print the last few items to see what they look like&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;font_manager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fontManager&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ttflist&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;div class="output text_html"&gt;&lt;pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"&gt;&lt;span style="font-weight: bold"&gt;[&lt;/span&gt;
    &lt;span style="color: #800080; text-decoration-color: #800080; font-weight: bold"&gt;FontEntry&lt;/span&gt;&lt;span style="font-weight: bold"&gt;(&lt;/span&gt;
        &lt;span style="color: #808000; text-decoration-color: #808000"&gt;fname&lt;/span&gt;=&lt;span style="color: #008000; text-decoration-color: #008000"&gt;'/usr/share/fonts/truetype/liberation/LiberationSans-BoldItalic.ttf'&lt;/span&gt;,
        &lt;span style="color: #808000; text-decoration-color: #808000"&gt;name&lt;/span&gt;=&lt;span style="color: #008000; text-decoration-color: #008000"&gt;'Liberation Sans'&lt;/span&gt;,
        &lt;span style="color: #808000; text-decoration-color: #808000"&gt;style&lt;/span&gt;=&lt;span style="color: #008000; text-decoration-color: #008000"&gt;'italic'&lt;/span&gt;,
        &lt;span style="color: #808000; text-decoration-color: #808000"&gt;variant&lt;/span&gt;=&lt;span style="color: #008000; text-decoration-color: #008000"&gt;'normal'&lt;/span&gt;,
        &lt;span style="color: #808000; text-decoration-color: #808000"&gt;weight&lt;/span&gt;=&lt;span style="color: #008080; text-decoration-color: #008080; font-weight: bold"&gt;700&lt;/span&gt;,
        &lt;span style="color: #808000; text-decoration-color: #808000"&gt;stretch&lt;/span&gt;=&lt;span style="color: #008000; text-decoration-color: #008000"&gt;'normal'&lt;/span&gt;,
        &lt;span style="color: #808000; text-decoration-color: #808000"&gt;size&lt;/span&gt;=&lt;span style="color: #008000; text-decoration-color: #008000"&gt;'scalable'&lt;/span&gt;
    &lt;span style="font-weight: bold"&gt;)&lt;/span&gt;,
    &lt;span style="color: #800080; text-decoration-color: #800080; font-weight: bold"&gt;FontEntry&lt;/span&gt;&lt;span style="font-weight: bold"&gt;(&lt;/span&gt;
        &lt;span style="color: #808000; text-decoration-color: #808000"&gt;fname&lt;/span&gt;=&lt;span style="color: #008000; text-decoration-color: #008000"&gt;'/usr/share/fonts/truetype/dejavu/DejaVuSerifCondensed-BoldItalic.ttf'&lt;/span&gt;,
        &lt;span style="color: #808000; text-decoration-color: #808000"&gt;name&lt;/span&gt;=&lt;span style="color: #008000; text-decoration-color: #008000"&gt;'DejaVu Serif'&lt;/span&gt;,
        &lt;span style="color: #808000; text-decoration-color: #808000"&gt;style&lt;/span&gt;=&lt;span style="color: #008000; text-decoration-color: #008000"&gt;'italic'&lt;/span&gt;,
        &lt;span style="color: #808000; text-decoration-color: #808000"&gt;variant&lt;/span&gt;=&lt;span style="color: #008000; text-decoration-color: #008000"&gt;'normal'&lt;/span&gt;,
        &lt;span style="color: #808000; text-decoration-color: #808000"&gt;weight&lt;/span&gt;=&lt;span style="color: #008080; text-decoration-color: #008080; font-weight: bold"&gt;700&lt;/span&gt;,
        &lt;span style="color: #808000; text-decoration-color: #808000"&gt;stretch&lt;/span&gt;=&lt;span style="color: #008000; text-decoration-color: #008000"&gt;'condensed'&lt;/span&gt;,
        &lt;span style="color: #808000; text-decoration-color: #808000"&gt;size&lt;/span&gt;=&lt;span style="color: #008000; text-decoration-color: #008000"&gt;'scalable'&lt;/span&gt;
    &lt;span style="font-weight: bold"&gt;)&lt;/span&gt;,
    &lt;span style="color: #800080; text-decoration-color: #800080; font-weight: bold"&gt;FontEntry&lt;/span&gt;&lt;span style="font-weight: bold"&gt;(&lt;/span&gt;
        &lt;span style="color: #808000; text-decoration-color: #808000"&gt;fname&lt;/span&gt;=&lt;span style="color: #008000; text-decoration-color: #008000"&gt;'/tmp/tmpq9id6a1q/Fira-Code.ttf'&lt;/span&gt;,
        &lt;span style="color: #808000; text-decoration-color: #808000"&gt;name&lt;/span&gt;=&lt;span style="color: #008000; text-decoration-color: #008000"&gt;'Fira-Downloaded'&lt;/span&gt;,
        &lt;span style="color: #808000; text-decoration-color: #808000"&gt;style&lt;/span&gt;=&lt;span style="color: #008000; text-decoration-color: #008000"&gt;'normal'&lt;/span&gt;,
        &lt;span style="color: #808000; text-decoration-color: #808000"&gt;variant&lt;/span&gt;=&lt;span style="color: #008000; text-decoration-color: #008000"&gt;'normal'&lt;/span&gt;,
        &lt;span style="color: #808000; text-decoration-color: #808000"&gt;weight&lt;/span&gt;=&lt;span style="color: #008000; text-decoration-color: #008000"&gt;'normal'&lt;/span&gt;,
        &lt;span style="color: #808000; text-decoration-color: #808000"&gt;stretch&lt;/span&gt;=&lt;span style="color: #008000; text-decoration-color: #008000"&gt;'normal'&lt;/span&gt;,
        &lt;span style="color: #808000; text-decoration-color: #808000"&gt;size&lt;/span&gt;=&lt;span style="color: #008000; text-decoration-color: #008000"&gt;'medium'&lt;/span&gt;
    &lt;span style="font-weight: bold"&gt;)&lt;/span&gt;
&lt;span style="font-weight: bold"&gt;]&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="admonition tip"&gt;
&lt;p class="admonition-title"&gt;Tip&lt;/p&gt;
&lt;p&gt;To list all of the fonts that Matplotlib knows how to plot, inspect the list &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;matplotlib.font_manager.fontManager.ttflist&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="make-a-plot-with-this-font"&gt;
&lt;h2&gt;Make a plot with this font&lt;/h2&gt;
&lt;p&gt;Now that we’ve registered the font, we can plot it with &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;ax.text&lt;/span&gt;&lt;/code&gt;.
To do so, use the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;plt.rc_context&lt;/span&gt;&lt;/code&gt; context manager to temporarily update our default font:&lt;/p&gt;
&lt;div class="cell docutils container"&gt;
&lt;div class="cell_input docutils container"&gt;
&lt;div class="highlight-ipython3 notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;plt&lt;/span&gt;

&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;axs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplots&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;figsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;# This will now render as a `Roboto Flex` font&lt;/span&gt;
&lt;span class="n"&gt;axs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;The default font!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fontdict&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;fontsize&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="n"&gt;axs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;A Matplotlib font&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fontdict&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;fontsize&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;family&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;cmmi10&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="n"&gt;axs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;The Fira Code font!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fontdict&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;fontsize&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;family&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;font&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;axs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_axis_off&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell_output docutils container"&gt;
&lt;img alt="../_images/d8380871415134fa7c598109cbe5ff83bf4a51bd6708b80e5d0434f48b95d674.png" src="../_images/d8380871415134fa7c598109cbe5ff83bf4a51bd6708b80e5d0434f48b95d674.png" /&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;And that’s it!&lt;/p&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://chrisholdgraf.com/blog/2022/matplotlib-remote-font/" rel="alternate"/>
    <summary>As part of my sphinx-social-previews prototype, I wanted to be able to use the Roboto Font from Google in image previews.
However, Roboto is often not loaded on your local filesystem, so it took some digging to figure out how to make it possible to load via Matplotlib’s text plotting functionality.Here’s the solution that finally worked for me, inspired from this Tweet with a similar implementation from the dmol book.</summary>
    <category term="matplotlib" label="matplotlib"/>
    <published>2022-12-06T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://chrisholdgraf.com/blog/2022/jupyterlite-workshop/</id>
    <title>Report from the JupyterLite workshop: WebAssembly is pretty cool</title>
    <updated>2022-12-10T00:00:00+00:00</updated>
    <content type="html">&lt;section id="report-from-the-jupyterlite-workshop-webassembly-is-pretty-cool"&gt;

&lt;p&gt;I recently attended &lt;a class="reference external" href="https://blog.jupyter.org/community-workshop-jupyterlite-e992c61f5d7f?source=collection_home---6------6-----------------------"&gt;the JupyterLite community workshop in Paris&lt;/a&gt;, here are some quick thoughts from the three-day event&lt;a class="footnote-reference brackets" href="#ack" id="id1" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;1&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For those without any background, JupyterLite is a distribution of Jupyter’s user interfaces and a Python kernel that runs &lt;strong&gt;entirely in the browser&lt;/strong&gt;.
Its goal is to provide a low-overhead and accessible way to use a Jupyter interface via the browser.
See &lt;a class="reference external" href="https://jupyterlite.readthedocs.io/"&gt;the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;jupyterlite&lt;/span&gt;&lt;/code&gt; documentation for more information&lt;/a&gt;.&lt;/p&gt;
&lt;section id="capytale-shows-that-webassembly-and-jupyterlite-can-boost-accessibility-to-interactive-computation"&gt;
&lt;h2&gt;Capytale shows that WebAssembly and JupyterLite can boost accessibility to interactive computation&lt;/h2&gt;
&lt;p&gt;We had a demonstration of &lt;a class="reference external" href="https://www.ac-paris.fr/capytale-un-service-web-pour-creer-et-partager-des-activites-pedagogiques-de-codage-121816"&gt;the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;capytale&lt;/span&gt;&lt;/code&gt; platform&lt;/a&gt;, a project run by the French educational system to provide remote access to &lt;strong&gt;fully in-browser learning environments&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Capytale provides a number of learning modules.
Many of them are JavaScript-based, but they also needed to provide Python as well.
Initially, they tried to run a server that launched Python sessions for every person that used their service, but found this to be unscalable.&lt;a class="footnote-reference brackets" href="#fr" id="id2" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;2&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Instead, the began to use &lt;a class="reference external" href="https://basthon.fr/"&gt;the notebook platform &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;basthon.fr&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;.
This re-uses the Classic Jupyter Notebook interface and connects to &lt;a class="reference external" href="https://pyodide.org/"&gt;a pyodide kernel&lt;/a&gt;.
This means that &lt;strong&gt;all of the learner’s work is done in their own browser&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;As a result, they are able to run &lt;strong&gt;nearly 60,000 notebook sessions a week&lt;/strong&gt;, while running only a very lightweight server.
Because the computation is done purely in the browser, they only need to run a server for authentication and for sending files to the user sessions (files for learning modules are stored in a shared database that they manage).&lt;/p&gt;
&lt;p&gt;This was a really inspiring example to me, because it’s clear that for basic and introductory learning, WebAssembly can significantly reduce the barrier to learning and the overhead of managing shared infrastructure for learning.
I hope to see more experiments like this in the future, and would love to find ways that we can build WebAssembly workflows into JupyterHub and Binder.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="jupyterlite-should-fit-on-a-usb-stick-for-low-internet-communities"&gt;
&lt;h2&gt;JupyterLite should fit on a USB stick for low-internet communities&lt;/h2&gt;
&lt;p&gt;One problem with the WebAssembly / JupyterLite approach is that it requires you to download a pretty big bundle the first time you access some content (something like &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;16mb&lt;/span&gt;&lt;/code&gt; at the smallest).
This isn’t too bad, but it’s still pretty large if you live in a part of the world with really bad internet.&lt;/p&gt;
&lt;p&gt;I had a quick chat with Jeremy about this, and we had an idea to &lt;em&gt;bundle JupyterLite in a USB stick&lt;/em&gt;.
In many parts of the world, it might be less work to put JupyterLite on a USB and mail it to them than to ask them to download it themselves.
I &lt;a class="reference external" href="https://discourse.jupyter.org/t/idea-jupyterlite-in-a-usb-stick/17177"&gt;opened up an idea post in the community forum to share and discuss&lt;/a&gt;.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="webassembly-and-jupyterlite-is-coming-to-jupyter-book"&gt;
&lt;h2&gt;WebAssembly and JupyterLite is coming to Jupyter Book&lt;/h2&gt;
&lt;p&gt;We made progress on a bunch of places where Jupyter Book can leverage the WebAssembly / JupyterLite ecosystem.
In particular, Steve has been doing &lt;a class="reference external" href="https://github.com/executablebooks/thebe/tree/feat/integrate-thebe-core"&gt;great work on &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;thebe-lite&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;, which will allow Thebe to launch interactive kernels via JupyterLite.
This means you’ll be able to make code cells on a static webpage interactive &lt;strong&gt;purely in the browser&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;I also re-discovered &lt;a class="reference external" href="https://jupyterlite-sphinx.readthedocs.io/en/latest/"&gt;the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;jupyterlite-sphinx&lt;/span&gt;&lt;/code&gt; extension&lt;/a&gt;, which (relatively) easily packages JupyterLite for sharing with a Sphinx site.&lt;/p&gt;
&lt;p&gt;There are many things to improve here, but I think we’re making good progress.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="webassembly-still-can-t-work-for-many-workflows"&gt;
&lt;h2&gt;WebAssembly still can’t work for many workflows&lt;/h2&gt;
&lt;p&gt;One final thing that I noted is that WebAssembly still trips over itself in many somewhat common situations in computation.
I had a number of conversations with teachers that mentioned there are basic things you &lt;em&gt;want&lt;/em&gt; to teach, but cannot with pyodide.
For example, things like using the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;input&lt;/span&gt;&lt;/code&gt; or the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;sleep&lt;/span&gt;&lt;/code&gt; modules in Python, or downloading files from the web.&lt;/p&gt;
&lt;p&gt;While I suspect that most teachers will be able to work around this, and that the pyodide ecosystem will continue to patch over these paper cuts, it seems like for the forseeable future, there will be a subset of use-cases where you simply need a live Python server.
I think our challenge as technologists will be to figure out the right User Experience around moving between an in-browser pyodide workflow, a cloud-based python server workflow, and a local installation workflow.
Learnings will need to use all of these approaches (particularly as they move beyond introductory courses), and we need to make sure that we have a similar set of technology and servies that can meet each need without requiring a whole new workflow.&lt;/p&gt;
&lt;hr class="footnotes docutils" /&gt;
&lt;aside class="footnote-list brackets"&gt;
&lt;aside class="footnote brackets" id="ack" role="note"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="#id1"&gt;1&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;Many thanks to the &lt;a class="reference external" href="http://quantstack.com/"&gt;QuantStack&lt;/a&gt; team for organizing this event, and to &lt;a class="reference external" href="https://www.ovhcloud.com/en/"&gt;OVHCloud&lt;/a&gt; for providing a physical space for everyone.&lt;/p&gt;
&lt;/aside&gt;
&lt;aside class="footnote brackets" id="fr" role="note"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="#id2"&gt;2&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;As an aside, I am continually impressed with France’s innovation around technology for teaching and learning. There seems to be a lot of experimentation and trying things out with open technology and services, and lots of clever ideas come out of this. It’s exciting to see people experimenting in this way instead of using vendored SaaS products (though I’m sure there’s plenty of that too).&lt;/p&gt;
&lt;/aside&gt;
&lt;/aside&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://chrisholdgraf.com/blog/2022/jupyterlite-workshop/" rel="alternate"/>
    <summary>I recently attended the JupyterLite community workshop in Paris, here are some quick thoughts from the three-day event1.For those without any background, JupyterLite is a distribution of Jupyter’s user interfaces and a Python kernel that runs entirely in the browser.
Its goal is to provide a low-overhead and accessible way to use a Jupyter interface via the browser.
See the jupyterlite documentation for more information.</summary>
    <category term="jupyter" label="jupyter"/>
    <category term="webassembly" label="webassembly"/>
    <published>2022-12-10T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://chrisholdgraf.com/blog/2022/install-github-from-pyproject/</id>
    <title>Install dependencies from GitHub with pyproject.toml or requirements.txt</title>
    <updated>2022-12-31T00:00:00+00:00</updated>
    <content type="html">&lt;section id="install-dependencies-from-github-with-pyproject-toml-or-requirements-txt"&gt;

&lt;p&gt;This is a short post to demonstrate how to install packages directly from GitHub with &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pyprojects.toml&lt;/span&gt;&lt;/code&gt; or &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;requirementst.txt&lt;/span&gt;&lt;/code&gt;, including custom branches and commits.
It will focus on &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pyprojects.toml&lt;/span&gt;&lt;/code&gt; because this is newer and there’s less information about it, but the general pattern holds for &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;requirements.txt&lt;/span&gt;&lt;/code&gt; as well.&lt;/p&gt;
&lt;p&gt;In &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pyproject.toml&lt;/span&gt;&lt;/code&gt;, you can specify dependencies for a project via the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;dependencies&lt;/span&gt;&lt;/code&gt; field.
For example, to specify &lt;a class="reference external" href="https://sphinx-doc.org"&gt;Sphinx&lt;/a&gt; as a dependency:&lt;/p&gt;
&lt;div class="literal-block-wrapper docutils container" id="id2"&gt;
&lt;div class="code-block-caption"&gt;&lt;span class="caption-text"&gt;pyproject.toml&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight-toml notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;dependencies&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;sphinx&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;However, this will install the version that is published to [&lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;PyPI&lt;/span&gt;&lt;/code&gt;](Here’s how to install a specific branch in &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;pyproject.toml&lt;/span&gt;&lt;/code&gt;:
).
What if you want to install from &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;&amp;#64;main&lt;/span&gt;&lt;/code&gt;, or from a specific commit or branch?&lt;/p&gt;
&lt;p&gt;To do so, use a pattern like this:&lt;/p&gt;
&lt;div class="literal-block-wrapper docutils container" id="id3"&gt;
&lt;div class="code-block-caption"&gt;&lt;span class="caption-text"&gt;pyproject.toml&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight-toml notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;dependencies&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;lt;packagename&amp;gt;@git+&amp;lt;url-to-repo&amp;gt;#egg=&amp;lt;branch or hash&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Here are a few recipes for doing this:&lt;/p&gt;
&lt;section id="install-directly-from-github"&gt;
&lt;h2&gt;Install directly from GitHub&lt;/h2&gt;
&lt;div class="literal-block-wrapper docutils container" id="id4"&gt;
&lt;div class="code-block-caption"&gt;&lt;span class="caption-text"&gt;pyproject.toml&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight-toml notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;dependencies&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;sphinx@git+https://github.com/sphinx-doc/sphinx&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="install-from-a-specific-branch"&gt;
&lt;h2&gt;Install from a specific branch&lt;/h2&gt;
&lt;div class="literal-block-wrapper docutils container" id="id5"&gt;
&lt;div class="code-block-caption"&gt;&lt;span class="caption-text"&gt;pyproject.toml&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight-toml notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;dependencies&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;sphinx@git+https://github.com/sphinx-doc/sphinx#egg=branchname&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="with-requirements-txt"&gt;
&lt;h2&gt;With &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;requirements.txt&lt;/span&gt;&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Using these patterns with &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;requirements.txt&lt;/span&gt;&lt;/code&gt; is nearly the same, but it’s a bit simpler.&lt;a class="footnote-reference brackets" href="#thanks" id="id1" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;1&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt;
You don’t need to specify the &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;packagename&amp;#64;&lt;/span&gt;&lt;/code&gt; pattern used above.
You can simply add a line that points to git like this:&lt;/p&gt;
&lt;div class="literal-block-wrapper docutils container" id="id6"&gt;
&lt;div class="code-block-caption"&gt;&lt;span class="caption-text"&gt;requirements.txt&lt;/span&gt;&lt;/div&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;requirement1&lt;/span&gt;
&lt;span class="n"&gt;requirement2&lt;/span&gt;
&lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pydata&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;pydata&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;sphinx&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;theme&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This will install from the default branch.
You can also specify specific branches or eggs in the same way as above.&lt;/p&gt;
&lt;hr class="footnotes docutils" /&gt;
&lt;aside class="footnote-list brackets"&gt;
&lt;aside class="footnote brackets" id="thanks" role="note"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="#id1"&gt;1&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;Thanks to &lt;a class="reference external" href="https://twitter.com/HEPfeickert/status/1609280067225681920"&gt;Matthew Feickhart for reminding me of this&lt;/a&gt;.&lt;/p&gt;
&lt;/aside&gt;
&lt;/aside&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://chrisholdgraf.com/blog/2022/install-github-from-pyproject/" rel="alternate"/>
    <summary>This is a short post to demonstrate how to install packages directly from GitHub with pyprojects.toml or requirementst.txt, including custom branches and commits.
It will focus on pyprojects.toml because this is newer and there’s less information about it, but the general pattern holds for requirements.txt as well.In pyproject.toml, you can specify dependencies for a project via the dependencies field.
For example, to specify Sphinx as a dependency:</summary>
    <category term="softwaredevelopment" label="software development"/>
    <published>2022-12-31T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://chrisholdgraf.com/blog/2023/fosdem/</id>
    <title>Report from FOSDEM23: beautiful chaos in a conference</title>
    <updated>2023-02-06T00:00:00+00:00</updated>
    <content type="html">&lt;section id="report-from-fosdem23-beautiful-chaos-in-a-conference"&gt;

&lt;p&gt;I recently attended &lt;a class="reference external" href="https://fosdem.org/2023/"&gt;FOSDEM 2023&lt;/a&gt;, my first FOSDEM!
I had heard of the conference before, but hadn’t really looked into it too much.
Fortunately, after some urging from friends and social media, I took a deeper look and decided I should join to see what all the fuss was about.&lt;/p&gt;
&lt;p&gt;Here are a few things that I noticed while I was there.&lt;/p&gt;
&lt;section id="fosdem-is-beautiful-chaos"&gt;
&lt;h2&gt;FOSDEM is beautiful chaos&lt;/h2&gt;
&lt;p&gt;I feel like FOSDEM tries to bring the “beautiful chaos” of open source communities into a conference setting.
There’s no registration, and little “conference infrastructure” compared to other conferences of its size and scope.
People who attended for the first time seemed to be overwhelmed in a similar way to when they navigate a large open source community for the first time.&lt;/p&gt;
&lt;p&gt;The conference relies heavily on volunteer labor, and only has a few roles and responsibilities where they deploy paid resources and equipment.
Generally speaking, this seemed to work surprisingly well!
The conference is &lt;strong&gt;very big&lt;/strong&gt;, and the fact that thousands of people can swarm a university in Brussels and largely have a productive time is a testament to FOSDEM’s ability to self-organize.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="but-yes-it-is-very-chaotic"&gt;
&lt;h2&gt;But yes, it is very chaotic 🙃&lt;/h2&gt;
&lt;p&gt;That said, the chaos occasionally gets in the way of having a good conference experience.
I probably spent 20% of my time being confused about how to find the talk I was trying to attend, and it didn’t help that the &lt;a class="reference external" href="https://www.ulb.be/en"&gt;ULB Campus&lt;/a&gt; is large and hard to navigate.&lt;/p&gt;
&lt;p&gt;There was also a lack of organization-wide policy and enforcement for a few high-level things.
For example, there didn’t seem to be any kind of official policy towards COVID and masking procedures.
The general vibe seemed to be “if you’re feeling sick you should probably wear a mask or stay home”, but there was no mechanism to enforce this.
Some sessions had facilitators with stronger opinions on this, some had less-strong opinions, but your experience depended a lot on the specific groups you were hanging around with.&lt;/p&gt;
&lt;p&gt;I suspect that this makes FOSDEM less accessible.
Without a strong policy for community behavior in certain key areas, people will not know what to expect when they arrive.
With enough uncertainty over important topics (e.g. if a person who really needs to avoid COVID), some people will simply filter themselves out.
I bet this is one place where FOSDEM suffers from its lack of structure or resources - something like setting and enforcing a COVID policy takes a &lt;em&gt;lot&lt;/em&gt; of work and resources.
It reminds me of the community policing and policy-setting parts of open communities that are often under-apprciated, very stressful, and very complex.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="it-is-huge-as-is-the-open-source-community"&gt;
&lt;h2&gt;It is HUGE, as is the open source community&lt;/h2&gt;
&lt;p&gt;FOSDEM reminded me just how gigantic the open source community is.
I tend to spend my time in the scientific python and open research space (there was an &lt;a class="reference external" href="https://fosdem.org/2023/schedule/track/open_research_tools_and_technology/"&gt;Open Research Tools and Technology devroom&lt;/a&gt;), but this was just a &lt;em&gt;tiny&lt;/em&gt; part of the FOSDEM conference.&lt;/p&gt;
&lt;p&gt;I often think of &lt;a class="reference external" href="https://jupyter.org"&gt;Project Jupyter&lt;/a&gt; as a “large” open source project, but you really get a feel for how tiny it is when see how many people show up representing &lt;a class="reference external" href="https://getfedora.org/"&gt;Fedora Linux&lt;/a&gt;.
There are large and complex communities out there, with their own stakeholder dynamics and focus areas.
A place like FOSDEM is an opportunity to cross community boundaries and learn about the problems others have, and how they’re trying to solve them.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="all-of-our-communities-have-the-same-problems"&gt;
&lt;h2&gt;All of our communities have the same problems&lt;/h2&gt;
&lt;p&gt;And on that note, every community seems to have the same problems.
I spoke with a number of folks from adjacent communities, and many of the stories were the same:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;We want to give sub-communities the freedom to do what they want, but find that it becomes hard to get everybody moving in the same direction.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We have a few large stakeholders that employ people to work directly on the project, and this gives them a level of power that many are not comfortable with.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We have a hard time attracting new core contributors unless they end up working at a specific subset of companies.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We are worried about company XXX building a similar tool that competes with our open source project because they didn’t want to abide by our community governance.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We systemically under-resource community guidance, management, and strategy efforts.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;We are worried about our increasing reliance on a software and services that are controlled by a few giant tech companies.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The list goes on.
In some ways, this was reassuring, the problems in all of my communities are certainly not unique.
In other ways, it was discouraging that so many of these projects have the same problems and yet none have really managed to solve them.
Maybe that’s because solving these problems can’t happen with a single action, but more like a series of mini-solutoins and continued improvements over time.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="it-is-really-a-bunch-of-mini-conferences-all-strung-together"&gt;
&lt;h2&gt;It is really a bunch of mini-conferences all strung together&lt;/h2&gt;
&lt;p&gt;As a result of a general lack of structure, FOSDEM really felt like a bunch of little conferences all strung together.
The main “unit” of the conference is a &lt;a class="reference external" href="https://submission.fosdem.org/submission/devroom"&gt;&lt;strong&gt;devroom&lt;/strong&gt;&lt;/a&gt;, which is a way to organize talks and people around a particular subject.&lt;/p&gt;
&lt;p&gt;Many people seemed to pick a single devroom and stick with it the whole time.
You could also tell that there was a lot of cultural correlation between people in the same devroom, so you could have more consistent behavioal norms within each one.
Devrooms were places where colleagues were more likely too meet up with each other, and the way to ensure you’re meeting other people with similar interests.
You heard statements like “I’m going to spend the day hanging out in the security devroom.”
Some of the devrooms even provided their own baked goods and snacks for those who attended!&lt;/p&gt;
&lt;p&gt;If I go to FOSDEM again, I’ll pay more attention to the devrooms and pick one to three where I should hang out and learn.
This seems like a better strategy than cherry-picking each talk.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="the-community-devroom-is-pretty-great"&gt;
&lt;h2&gt;The community devroom is pretty great&lt;/h2&gt;
&lt;p&gt;The devroom where I spent the most time was &lt;a class="reference external" href="https://fosdem.org/2023/schedule/event/welcome_community/"&gt;the community devroom&lt;/a&gt;.
Perhaps unsurprisingly, I really enjoyed the talks that I heard, and felt that most people there came with a similar perspective to myself.
I was happy to see that there was so much emphasis on the human and community aspects of open source, especially in light of recent &lt;a class="reference external" href="https://arstechnica.com/gadgets/2021/04/free-software-foundation-and-rms-issue-statements-on-stallmans-return/"&gt;cultural tensions in the “Free Software Foundation” world&lt;/a&gt;.
It was worried that there would be a “it’s just code, don’t bother me with human problems like diversity and inclusion” vibe, but for the spaces that I participated in, this was not a huge issue (I suspect it would have been different in other devrooms).&lt;/p&gt;
&lt;/section&gt;
&lt;section id="we-don-t-do-that-here-is-a-nice-tool-for-policing-behavior"&gt;
&lt;h2&gt;“We don’t do that here” is a nice tool for policing behavior&lt;/h2&gt;
&lt;p&gt;One thing that stood out to me was the following phrase&lt;a class="footnote-reference brackets" href="#thx" id="id1" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;1&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div&gt;&lt;p&gt;We don’t do that here.&lt;/p&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;This described a way to politely but firmly tell somebody that their behavior wasn’t acceptible in a community.
It is a way of making expectations clear without opening the floor up for debate about the cultural expectations themselves (there’s a time and a place for this, but the middle of a violation of that culture is not the moment to debate it).
I’ll spend more time thinking about this and how I can practice it in my own work.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="people-were-more-explicit-about-their-open-source-and-employer-hats"&gt;
&lt;h2&gt;People were more explicit about their open-source and employer hats&lt;/h2&gt;
&lt;p&gt;One thing that I felt in almost all of the devrooms was a tension between “corporate” and “non-corporate” tech.
On the one hand, you have those driven by ideals and values who believe in “Free as in speech” open source and see corporations as inherently mis-aligned with those ideals.
On the other hand, there’s representation from a &lt;em&gt;lot&lt;/em&gt; of big tech companies at the conference and they clearly see it as a strategically important conference to attend.
This is something that I’ve felt in basically every tech conference, but especially felt it at FOSDEM&lt;a class="footnote-reference brackets" href="#other-conferences" id="id2" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;2&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;One way that this became clear is the fact that more people spoke about “hats” at this conference than I usually notice.
I heard several stories of people intentionally not attending their company’s booth because they explicitly wanted to attend via their affiliation to an open source project.
In some cases I heard of people not reimbursing their expenses because they didn’t want to feel beholden to their employer’s strategy at the conference.
I thought that was pretty cool, as I’m a big fan of recognizing that employers and open source communities have distinct missions and goals.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="more-conferences-need-to-be-free"&gt;
&lt;h2&gt;More conferences need to be free&lt;/h2&gt;
&lt;p&gt;Finally, it really stood out to me that FOSDEM was free for &lt;strong&gt;anybody to attend&lt;/strong&gt;.
I had many conversations with people who noted that they wouldn’t have attended if they had to pay a significant cost to do so (travel and hotels is already expensive enough!), and the extra effort of requiring “applications for financial aid” is both off-putting and a burden (why should people have to do extra work to attend just because they don’t make as much money?).&lt;/p&gt;
&lt;p&gt;I wish that more conferences found a way to make attendence &lt;strong&gt;free with zero extra effort from attendees&lt;/strong&gt;.
For example, I &lt;a class="reference external" href="https://source.opennews.org/articles/one-easy-way-make-conference-ticket-prices-more-eq/"&gt;really like how Open News prototyped a “pay what you can” model&lt;/a&gt; for their annual conference.
If that means that we need to say in cities and venues with lower cost, and lower our production values a little bit, then I think that is 100% worth it.&lt;/p&gt;
&lt;p&gt;I know that it takes (some financial) resources to run something complex like a conference.
But come on, many of the organizations represented there have market capitalizations in the billions, we should be able to find a way to subsidize many tickets down to zero.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="a-conference-that-reflects-the-open-source-community"&gt;
&lt;h2&gt;A conference that reflects the open source community&lt;/h2&gt;
&lt;p&gt;It really is extraordinary that a conference like FOSDEM exists in the first place.
The fact that thousands of people around the world just…show up in Brussles and arrive at the same place without any official registration is pretty cool.
It reminds me of the ways that many people are surprised when they first learn how open source communities work.&lt;/p&gt;
&lt;p&gt;And just as with open source communities, I suspect that there is &lt;strong&gt;a lot of unpaid and under-appreciated labor&lt;/strong&gt; that goes into organizing FOSDEM.
So a million thanks to the organizers and those who participated.
It is a conference format and a cultural phenomenon that shows off the power of open community models (as well as some of its challenges).
Maybe I’ll see you in a devroom next time!&lt;/p&gt;
&lt;hr class="footnotes docutils" /&gt;
&lt;aside class="footnote-list brackets"&gt;
&lt;aside class="footnote brackets" id="thx" role="note"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="#id1"&gt;1&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;This was originally &lt;a class="reference external" href="https://thagomizer.com/blog/2017/09/29/we-don-t-do-that-here.html"&gt;written about in this blog post from Aja Hammerly&lt;/a&gt; and described at the conference in &lt;a class="reference external" href="https://floord.github.io/"&gt;a talk by Floor’d&lt;/a&gt; for teaching me about it in their talk.&lt;/p&gt;
&lt;/aside&gt;
&lt;aside class="footnote brackets" id="other-conferences" role="note"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="#id2"&gt;2&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;Perhaps that is because the corporate side of tech has largely won the battle in many other tech conferences that have become expensive and inaccessible to many people who refuse to join the corporate secetor.&lt;/p&gt;
&lt;/aside&gt;
&lt;/aside&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://chrisholdgraf.com/blog/2023/fosdem/" rel="alternate"/>
    <summary>I recently attended FOSDEM 2023, my first FOSDEM!
I had heard of the conference before, but hadn’t really looked into it too much.
Fortunately, after some urging from friends and social media, I took a deeper look and decided I should join to see what all the fuss was about.Here are a few things that I noticed while I was there.</summary>
    <category term="cloud" label="cloud"/>
    <published>2023-02-06T00:00:00+00:00</published>
  </entry>
  <entry>
    <id>https://chrisholdgraf.com/blog/2023/social-directive/</id>
    <title>A Sphinx directive for social media embeds</title>
    <updated>2023-02-15T00:00:00+00:00</updated>
    <content type="html">&lt;section id="a-sphinx-directive-for-social-media-embeds"&gt;

&lt;p&gt;I often want to link to social and other types of web-based media in my Sphinx documentation and blog.
Rather than embedding it all in custom HTML code, I decided to write a little wrapper to turn it into a directive.&lt;/p&gt;
&lt;p&gt;It’s called &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;{socialpost}&lt;/span&gt;&lt;/code&gt;, and it works with Twitter, Mastodon, and YouTube links.&lt;/p&gt;
&lt;section id="examples"&gt;
&lt;h2&gt;Examples&lt;/h2&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class="sd-container-fluid sd-sphinx-override sd-mt-0 sd-mb-2 sd-ml-0 sd-mr-0 sd-p-0 sd-example docutils"&gt;
&lt;div class="sd-row sd-g-0 sd-g-xs-0 sd-g-sm-0 sd-g-md-0 sd-g-lg-0 docutils"&gt;
&lt;div class="sd-col sd-d-flex-column sd-col-12 sd-col-xs-12 sd-col-sm-12 sd-col-md-12 sd-col-lg-12 sd-example-title docutils"&gt;
&lt;p&gt;Twitter&lt;/p&gt;
&lt;/div&gt;
&lt;div class="sd-col sd-d-flex-column sd-col-12 sd-col-xs-12 sd-col-sm-12 sd-col-md-12 sd-col-lg-12 sd-example-item sd-example-source sd-rounded-top docutils"&gt;
&lt;div class="highlight-markdown notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;```{socialpost} https://twitter.com/choldgraf/status/1564614538309390345
```
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sd-col sd-d-flex-column sd-col-12 sd-col-xs-12 sd-col-sm-12 sd-col-md-12 sd-col-lg-12 sd-example-item p-3 sd-example-result sd-rounded-bottom docutils"&gt;
&lt;div class="result-content docutils"&gt;
&lt;div class='social-post-wrapper' style='max-width: 500px; margin: auto;'&gt;
&lt;blockquote class="socialpost twitter-tweet"&gt;&lt;p lang="en" dir="ltr"&gt;
  &lt;a href="https://twitter.com/choldgraf/status/1564614538309390345"&gt;Tweet from @choldgraf&lt;/a&gt;
&lt;/blockquote&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sd-container-fluid sd-sphinx-override sd-mt-0 sd-mb-2 sd-ml-0 sd-mr-0 sd-p-0 sd-example docutils"&gt;
&lt;div class="sd-row sd-g-0 sd-g-xs-0 sd-g-sm-0 sd-g-md-0 sd-g-lg-0 docutils"&gt;
&lt;div class="sd-col sd-d-flex-column sd-col-12 sd-col-xs-12 sd-col-sm-12 sd-col-md-12 sd-col-lg-12 sd-example-title docutils"&gt;
&lt;p&gt;Mastodon&lt;/p&gt;
&lt;/div&gt;
&lt;div class="sd-col sd-d-flex-column sd-col-12 sd-col-xs-12 sd-col-sm-12 sd-col-md-12 sd-col-lg-12 sd-example-item sd-example-source sd-rounded-top docutils"&gt;
&lt;div class="highlight-markdown notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;```{socialpost} https://hachyderm.io/@choldgraf/109858392098988533
```
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sd-col sd-d-flex-column sd-col-12 sd-col-xs-12 sd-col-sm-12 sd-col-md-12 sd-col-lg-12 sd-example-item p-3 sd-example-result sd-rounded-bottom docutils"&gt;
&lt;div class="result-content docutils"&gt;
&lt;div class='social-post-wrapper' style='max-width: 500px; margin: auto;'&gt;
&lt;iframe src="https://hachyderm.io/@choldgraf/109858392098988533/embed" class="socialpost mastodon-embed" style="width: 100%; border: 0; border-radius: .5rem;" height="500" allowfullscreen="allowfullscreen"&gt;&lt;/iframe&gt;'
&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sd-container-fluid sd-sphinx-override sd-mt-0 sd-mb-2 sd-ml-0 sd-mr-0 sd-p-0 sd-example docutils"&gt;
&lt;div class="sd-row sd-g-0 sd-g-xs-0 sd-g-sm-0 sd-g-md-0 sd-g-lg-0 docutils"&gt;
&lt;div class="sd-col sd-d-flex-column sd-col-12 sd-col-xs-12 sd-col-sm-12 sd-col-md-12 sd-col-lg-12 sd-example-title docutils"&gt;
&lt;p&gt;YouTube&lt;/p&gt;
&lt;/div&gt;
&lt;div class="sd-col sd-d-flex-column sd-col-12 sd-col-xs-12 sd-col-sm-12 sd-col-md-12 sd-col-lg-12 sd-example-item sd-example-source sd-rounded-top docutils"&gt;
&lt;div class="highlight-markdown notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;```{socialpost} https://www.youtube.com/watch?v=lZ2FHTkyaMU
```
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="sd-col sd-d-flex-column sd-col-12 sd-col-xs-12 sd-col-sm-12 sd-col-md-12 sd-col-lg-12 sd-example-item p-3 sd-example-result sd-rounded-bottom docutils"&gt;
&lt;div class="result-content docutils"&gt;
&lt;div class='social-post-wrapper' style='max-width: 500px; margin: auto;'&gt;&lt;iframe width="533" class="socialpost youtube-embed" style="border-radius: .5rem;" height="300" src="https://www.youtube.com/embed/lZ2FHTkyaMU" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;section id="how-it-works"&gt;
&lt;h2&gt;How it works&lt;/h2&gt;
&lt;p&gt;Here’s a brief description of how this directive works:&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p&gt;Parse the directive content (the thing that comes after &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;{socialpost}&lt;/span&gt;&lt;/code&gt;, e.g. &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;https://twitter.com/choldgraf/status/1564614538309390345&lt;/span&gt;&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Do some basic pattern matching to decide if it is Twitter / Mastodon / YouTube&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Parse the URL for the proper unique identifier for the post (e.g. above it is &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;1564614538309390345&lt;/span&gt;&lt;/code&gt;)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use an embed template that embeds this identifier into each service. E.g., for Twitter it is:&lt;/p&gt;
&lt;div class="highlight-html notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;blockquote&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;twitter-tweet&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt; &lt;span class="na"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;en&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;dir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ltr&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://twitter.com/choldgraf/status/1564614538309390345&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Tweet from @choldgraf&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;blockquote&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This is all wrapped up in a &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;Directive&lt;/span&gt;&lt;/code&gt; object that outputs an HTML &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;raw&lt;/span&gt;&lt;/code&gt; node so I can pass through raw HTML.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Load any necessary JS files if this directive is detected on a page.
This is done with an &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;html-page-context&lt;/span&gt;&lt;/code&gt; event.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I then connected them both to Sphinx in my site’s &lt;code class="docutils literal notranslate"&gt;&lt;span class="pre"&gt;conf.py&lt;/span&gt;&lt;/code&gt; setup function.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
&lt;section id="source-code"&gt;
&lt;h2&gt;Source code&lt;/h2&gt;
&lt;p&gt;Here’s the source code if you’d like to see how this works:&lt;/p&gt;
&lt;p&gt;The directive and event code:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Allows us to embed Google Drive videos into our docs.&lt;/span&gt;
&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;docutils.parsers.rst&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Directive&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;docutils&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;nodes&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;docutils.parsers.rst.directives&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;positive_int&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;textwrap&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;dedent&lt;/span&gt;

&lt;span class="c1"&gt;# This is the structure used for tweets&lt;/span&gt;
&lt;span class="c1"&gt;# example: https://publish.twitter.com/?query=https%3A%2F%2Ftwitter.com%2Fcholdgraf%2Fstatus%2F1564614538309390345&amp;amp;widget=Tweet&lt;/span&gt;
&lt;span class="n"&gt;TWITTER_TEMPLATE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;lt;blockquote class=&amp;quot;socialpost twitter-tweet&amp;quot;&amp;gt;&amp;lt;p lang=&amp;quot;en&amp;quot; dir=&amp;quot;ltr&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;  &amp;lt;a href=&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{url}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;gt;Tweet from @&lt;/span&gt;&lt;span class="si"&gt;{author}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;lt;/blockquote&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;MASTODON_TEMPLATE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;lt;iframe src=&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{url}&lt;/span&gt;&lt;span class="s2"&gt;/embed&amp;quot; class=&amp;quot;socialpost mastodon-embed&amp;quot; style=&amp;quot;width: 100%; border: 0; border-radius: .5rem;&amp;quot; height=&amp;quot;500&amp;quot; allowfullscreen=&amp;quot;allowfullscreen&amp;quot;&amp;gt;&amp;lt;/iframe&amp;gt;&amp;#39;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;YOUTUBE_TEMPLATE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;iframe width=&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{width}&lt;/span&gt;&lt;span class="s1"&gt;&amp;quot; class=&amp;quot;socialpost youtube-embed&amp;quot; style=&amp;quot;border-radius: .5rem;&amp;quot; height=&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{height}&lt;/span&gt;&lt;span class="s1"&gt;&amp;quot; src=&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{url}&lt;/span&gt;&lt;span class="s1"&gt;&amp;quot; title=&amp;quot;YouTube video player&amp;quot; frameborder=&amp;quot;0&amp;quot; allow=&amp;quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&amp;quot; allowfullscreen&amp;gt;&amp;lt;/iframe&amp;gt;&amp;#39;&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SocialPost&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Directive&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;arguments&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;final_argument_whitespace&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;
    &lt;span class="n"&gt;has_content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;

    &lt;span class="n"&gt;option_spec&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;width&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;positive_int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;height&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;positive_int&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="c1"&gt;# Video window defaults to a 16:9 ratio&lt;/span&gt;
        &lt;span class="n"&gt;width&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;width&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;533&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;height&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;height&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# Twitter&lt;/span&gt;
        &lt;span class="c1"&gt;# If Twitter link, parse the author and insert into the frame &amp;quot;share&amp;quot; link and insert its UID into an iframe&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;twitter.com&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;author&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;twitter.com/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TWITTER_TEMPLATE&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;author&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;# Mastodon&lt;/span&gt;
        &lt;span class="c1"&gt;# We are making strong assumptions that mastodon links are the only links that have @ in the user field&lt;/span&gt;
        &lt;span class="c1"&gt;# e.g.: https://hachyderm.io/@choldgraf/109858560412115332&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;@&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MASTODON_TEMPLATE&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;# Youtube&lt;/span&gt;
        &lt;span class="c1"&gt;# Link ref: https://www.youtube.com/watch?v=dQw4w9WgXcQ&lt;/span&gt;
        &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;youtube.com&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;uid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;v=&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="c1"&gt;# In case there were other arguments after the video link&lt;/span&gt;
            &lt;span class="n"&gt;uid&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;uid&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;amp;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
            &lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;YOUTUBE_TEMPLATE&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;https://www.youtube.com/embed/&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;uid&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Unidentified social link: &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="c1"&gt;# Embed in a parent div&lt;/span&gt;
        &lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;lt;div class=&amp;#39;social-post-wrapper&amp;#39; style=&amp;#39;max-width: 500px; margin: auto;&amp;#39;&amp;gt;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;lt;/div&amp;gt;&amp;quot;&lt;/span&gt;
        &lt;span class="c1"&gt;# Use a raw pass-through node&lt;/span&gt;
        &lt;span class="n"&gt;para&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raw&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;html&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;class&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;socialpost&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;para&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_social_media_js&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pagename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;templatename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;doctree&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Embed any JS necessary to embed social media posts on a page.&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class="n"&gt;TWITTER_EMBED_SCRIPT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;https://platform.twitter.com/widgets.js&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;doctree&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;rawnode&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;doctree&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;traverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nodes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raw&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;socialpost&amp;quot;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;rawnode&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attributes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;class&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[]):&lt;/span&gt;
            &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_js_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
                &lt;span class="n"&gt;TWITTER_EMBED_SCRIPT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;async&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;async&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;charset&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;break&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Where I connect it to my site:&lt;/p&gt;
&lt;div class="highlight-default notranslate"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_directive&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;socialpost&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SocialPost&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;html-page-context&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;add_social_media_js&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_css_file&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;custom.css&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/section&gt;
&lt;/section&gt;
</content>
    <link href="https://chrisholdgraf.com/blog/2023/social-directive/" rel="alternate"/>
    <summary>I often want to link to social and other types of web-based media in my Sphinx documentation and blog.
Rather than embedding it all in custom HTML code, I decided to write a little wrapper to turn it into a directive.It’s called {socialpost}, and it works with Twitter, Mastodon, and YouTube links.</summary>
    <category term="sphinx" label="sphinx"/>
    <published>2023-02-15T00:00:00+00:00</published>
  </entry>
</feed>
