{"kind":"Notebook","sha256":"afd6c7a229dae72c60b7242468f04e060f8caa35ac8551dac0286e43db29f51b","slug":"blog.2016.2016-07-02-fft-time","location":"/blog/2016/2016-07-02-fft_time.ipynb","dependencies":[],"frontmatter":{"title":"The beauty of computational efficiency","tags":["python","programming","computation","efficiency","fft"],"date":"2016-07-02","kernelspec":{"name":"python3","display_name":"Python 3","language":"python"},"github":"https://github.com/choldgraf/choldgraf.github.io","exports":[{"format":"ipynb","filename":"2016-07-02-fft_time.ipynb","url":"/build/2016-07-02-fft_time-e2ca24bacc8eea4c0606a589b7a0bada.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","children":[{"type":"heading","depth":2,"position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"children":[{"type":"text","value":"The beauty of computational efficiency and the FFT","position":{"start":{"line":29,"column":1},"end":{"line":29,"column":1}},"key":"GNevcP04Ru"}],"identifier":"the-beauty-of-computational-efficiency-and-the-fft","label":"The beauty of computational efficiency and the FFT","html_id":"the-beauty-of-computational-efficiency-and-the-fft","implicit":true,"key":"dsmWr3spN4"},{"type":"paragraph","position":{"start":{"line":31,"column":1},"end":{"line":31,"column":1}},"children":[{"type":"text","value":"When we discuss “computational efficiency”, you often hear people throw around phrases like ","position":{"start":{"line":31,"column":1},"end":{"line":31,"column":1}},"key":"QlG1VkPr0d"},{"type":"inlineMath","value":"O(n^2)","position":{"start":{"line":31,"column":1},"end":{"line":31,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>","key":"UyljtohaWS"},{"type":"text","value":" or ","position":{"start":{"line":31,"column":1},"end":{"line":31,"column":1}},"key":"FTfgYKf4vc"},{"type":"inlineMath","value":"O(nlogn)","position":{"start":{"line":31,"column":1},"end":{"line":31,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlogn)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>","key":"xDmR80lXmj"},{"type":"text","value":". We talk about them in the abstract, and it can be hard to appreciate what these distinctions mean and how important they are. So let’s take a quick look at what computational efficiency looks like in the context of a very famous algorithm: The Fourier Transform.","position":{"start":{"line":31,"column":1},"end":{"line":31,"column":1}},"key":"GH7X21MJSi"}],"key":"tfxUOzoMVn"},{"type":"heading","depth":3,"position":{"start":{"line":33,"column":1},"end":{"line":33,"column":1}},"children":[{"type":"text","value":"A short primer on the Fourier Transform","position":{"start":{"line":33,"column":1},"end":{"line":33,"column":1}},"key":"NupEFmzPkg"}],"identifier":"a-short-primer-on-the-fourier-transform","label":"A short primer on the Fourier Transform","html_id":"a-short-primer-on-the-fourier-transform","implicit":true,"key":"o8YNEKrd2C"},{"type":"paragraph","position":{"start":{"line":34,"column":1},"end":{"line":34,"column":1}},"children":[{"type":"text","value":"Briefly, A Fourier Transform is used for uncovering the spectral information that is present in a signal. AKA, it tells us about oscillatory components in the signal, and has ","position":{"start":{"line":34,"column":1},"end":{"line":34,"column":1}},"key":"Mmu6ikQyg7"},{"type":"link","url":"http://dsp.stackexchange.com/questions/69/why-is-the-fourier-transform-so-important","position":{"start":{"line":34,"column":1},"end":{"line":34,"column":1}},"children":[{"type":"text","value":"a wide range","position":{"start":{"line":34,"column":1},"end":{"line":34,"column":1}},"key":"zZf6qfBVYk"}],"urlSource":"http://dsp.stackexchange.com/questions/69/why-is-the-fourier-transform-so-important","key":"UsEIXxhn6x"},{"type":"text","value":" of uses in communications, signal processing, and even neuroscience analysis.","position":{"start":{"line":34,"column":1},"end":{"line":34,"column":1}},"key":"vlPHsAwtzF"}],"key":"AvnbkVpLdE"},{"type":"paragraph","position":{"start":{"line":36,"column":1},"end":{"line":36,"column":1}},"children":[{"type":"text","value":"Here’s a ","position":{"start":{"line":36,"column":1},"end":{"line":36,"column":1}},"key":"Nz3yhR0gea"},{"type":"link","url":"https://www.quora.com/What-is-an-intuitive-way-of-explaining-how-the-Fourier-transform-works","position":{"start":{"line":36,"column":1},"end":{"line":36,"column":1}},"children":[{"type":"text","value":"Quora post","position":{"start":{"line":36,"column":1},"end":{"line":36,"column":1}},"key":"qsaFr33dss"}],"urlSource":"https://www.quora.com/What-is-an-intuitive-way-of-explaining-how-the-Fourier-transform-works","key":"e44F0Y8BLO"},{"type":"text","value":" that discusses Fourier Transforms more generally. The first explanation is fantastic and full of history and detail.","position":{"start":{"line":36,"column":1},"end":{"line":36,"column":1}},"key":"AKfbXEDigL"}],"key":"PIEoA4jSQM"},{"type":"paragraph","position":{"start":{"line":38,"column":1},"end":{"line":38,"column":1}},"children":[{"type":"text","value":"The challenge with the Fourier Transform is that it can take a really long time to compute. If you h ave a signal of length ","position":{"start":{"line":38,"column":1},"end":{"line":38,"column":1}},"key":"Mj1qVFlnSY"},{"type":"inlineMath","value":"n","position":{"start":{"line":38,"column":1},"end":{"line":38,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>","key":"HqKerZ9WZh"},{"type":"text","value":", then you’re calculating ","position":{"start":{"line":38,"column":1},"end":{"line":38,"column":1}},"key":"jB4fCtzshk"},{"type":"inlineMath","value":"n","position":{"start":{"line":38,"column":1},"end":{"line":38,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>","key":"H8lUP7g7ee"},{"type":"text","value":" Fourier components for each point in the (length ","position":{"start":{"line":38,"column":1},"end":{"line":38,"column":1}},"key":"fF1ZWBU4E1"},{"type":"inlineMath","value":"n","position":{"start":{"line":38,"column":1},"end":{"line":38,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>","key":"yVDMTBuGSG"},{"type":"text","value":") signal. This means that the number of operations required to calculate a fourier transform is ","position":{"start":{"line":38,"column":1},"end":{"line":38,"column":1}},"key":"wRAbRP8MrE"},{"type":"inlineMath","value":"n * n","position":{"start":{"line":38,"column":1},"end":{"line":38,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>∗</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n * n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4653em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>","key":"Jyc3qylzBK"},{"type":"text","value":" or ","position":{"start":{"line":38,"column":1},"end":{"line":38,"column":1}},"key":"rHZguKgIlR"},{"type":"inlineMath","value":"O(n^2)","position":{"start":{"line":38,"column":1},"end":{"line":38,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>","key":"pJ0S2XoDiH"},{"type":"text","value":".","position":{"start":{"line":38,"column":1},"end":{"line":38,"column":1}},"key":"MBYI7KW7AH"}],"key":"OxLKNqavdH"},{"type":"paragraph","position":{"start":{"line":40,"column":1},"end":{"line":40,"column":1}},"children":[{"type":"text","value":"For a quick intuition into what a difference this makes. Consider two signals, one of length 10, and the other of length 100. Since the Fourier Transform is ","position":{"start":{"line":40,"column":1},"end":{"line":40,"column":1}},"key":"SYaUJmsThe"},{"type":"inlineMath","value":"O(n^2)","position":{"start":{"line":40,"column":1},"end":{"line":40,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>","key":"QnnUA7VFCb"},{"type":"text","value":", the length 100 signal will take ","position":{"start":{"line":40,"column":1},"end":{"line":40,"column":1}},"key":"tDIlWWmYuA"},{"type":"emphasis","position":{"start":{"line":40,"column":1},"end":{"line":40,"column":1}},"children":[{"type":"text","value":"2 orders of magnitude","position":{"start":{"line":40,"column":1},"end":{"line":40,"column":1}},"key":"vMOtDr3Oow"}],"key":"YarB8H44ey"},{"type":"text","value":" longer to compute, even though it is only ","position":{"start":{"line":40,"column":1},"end":{"line":40,"column":1}},"key":"jA1cLejUDT"},{"type":"emphasis","position":{"start":{"line":40,"column":1},"end":{"line":40,"column":1}},"children":[{"type":"text","value":"1 order of magnitude longer in length","position":{"start":{"line":40,"column":1},"end":{"line":40,"column":1}},"key":"sRXNc64leR"}],"key":"Iwwk2qgqPM"},{"type":"text","value":".","position":{"start":{"line":40,"column":1},"end":{"line":40,"column":1}},"key":"yck94iYVFr"}],"key":"Dv7x1Fos7R"},{"type":"paragraph","position":{"start":{"line":42,"column":1},"end":{"line":42,"column":1}},"children":[{"type":"text","value":"Think this isn’t a big deal? Let’s see what happens when the signal gets longer. First off, a very short signal:","position":{"start":{"line":42,"column":1},"end":{"line":42,"column":1}},"key":"UiFfRSJgPx"}],"key":"BXIks6iC6I"}],"key":"PtPXlCy48A"},{"type":"block","kind":"notebook-code","data":{"collapsed":false,"jupyter":{"outputs_hidden":false}},"children":[{"type":"code","lang":"python","executable":true,"value":"# We can use the `time` and the `numpy` module to time how long it takes to do an FFT\nfrom time import time\nimport numpy as np\nimport seaborn as sns\nsns.set_style('white')\n\n# For a signal of length ~1000. Say, 100ms of a 10KHz audio sample.\nsignal = np.random.randn(1009)\nstart = time()\n_ = np.fft.fft(signal)\nstop = time()\nprint('It takes {} seconds to do the FFT'.format(stop-start))","key":"tSkHL0kooo"},{"type":"output","id":"2QxE0yHcbUZXA8M5oRQU5","data":[],"key":"dwNPZmdgJh"}],"key":"R3tRqV7fp7"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"That’s not too bad - ~.003 seconds is pretty fast. But here’s where the ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"qmEJvenffk"},{"type":"inlineMath","value":"O(n^2)","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>","key":"cwLy21wh8n"},{"type":"text","value":" thing really gets us...","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"mXwhfVQuhq"}],"key":"RPOI3a8Cut"}],"key":"OUmUh9Aqyt"},{"type":"block","kind":"notebook-code","data":{"collapsed":true,"jupyter":{"outputs_hidden":true}},"children":[{"type":"code","lang":"python","executable":true,"value":"# We'll test out how long the FFT takes for a few lengths\ntest_primes = [11, 101, 1009, 10009, 100019]","key":"A5eOwjB87P"},{"type":"output","id":"K-_lBVjJjgn36E7zpOakm","data":[],"key":"dMsg3mi48i"}],"key":"XB9HYtVNWi"},{"type":"block","kind":"notebook-code","data":{"collapsed":false,"jupyter":{"outputs_hidden":false}},"children":[{"type":"code","lang":"python","executable":true,"value":"# Let's try a few slightly longer signals\nfor i_length in test_primes:\n    # Calculate the number of factors for this length (we'll see why later)\n    factors = [ii for ii in range(1, 1000) if i_length % ii == 0]\n    # Generate a random signal w/ this length\n    signal = np.random.randn(i_length)\n    # Now time the FFT\n    start = time()\n    _ = np.fft.fft(signal)\n    stop = time()\n    print('With data of length {} ({} factors), it takes {} seconds to do the FFT'.format(\n            i_length, len(factors), stop-start))","key":"QHq3HV2OsK"},{"type":"output","id":"7zlQXmHlNekuX30dQTdfK","data":[],"key":"S7PaXhXh7p"}],"key":"vLa2jsMsXL"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Whoah wait a sec, that last one took way longer than everything else. We increased the length of the data by a factor of 10, but the time it took went up by a factor of 100. Not good. That means that if we want to perform an FFT on a signal that was 10 times longer, it’d take us about 42 minutes. 100 times longer? That’d take ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Qw4pCcxsuB"},{"type":"emphasis","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"~3 days.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"nAGOB7pWMp"}],"key":"I9PNk0puLR"}],"key":"MVBFO8p8lQ"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Given how important the Fourier Transform is, it’d be great if we could speed it up somehow.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"XJHRLs5rhq"}],"key":"Tra41mOH9z"},{"type":"blockquote","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"emphasis","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"You’ll notice that I chose a very particular set of numbers above. Specifically, I chose numbers that were primes (or nearly primes) meaning that they couldn’t be broken down into products of smaller numbers. That turns out to be really important in allowing the FFT to do its magic. When your signal length is a prime number, then you don’t gain any speedup from the FFT, as I’ll show below.","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"dUvguwpg6s"}],"key":"lkHMLMAIqo"}],"key":"tBq4B46Y6o"}],"key":"Xmu4E7L3uk"},{"type":"heading","depth":3,"position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"Enter the Fast Fourier Transform","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"Lym9RHznRx"}],"identifier":"enter-the-fast-fourier-transform","label":"Enter the Fast Fourier Transform","html_id":"enter-the-fast-fourier-transform","implicit":true,"key":"iip8AcUvzk"},{"type":"paragraph","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"The Fast Fourier Transform (FFT) is one of the most important algorithms to come out of the last century because it drastically speeds up the performance of the Fourier Transform. It accomplishes this by breaking down all those ","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"LxUHJjwXlI"},{"type":"inlineMath","value":"n^2","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"html":"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>n</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">n^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span>","key":"E7MOyprdfT"},{"type":"text","value":" computations into a smaller number of computations, and then putting them together at the end to get the same result. This is called ","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"ppPQPDbcRR"},{"type":"strong","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"children":[{"type":"text","value":"factorizing","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"RZtXUmWylm"}],"key":"j67pduSetY"},{"type":"text","value":".","position":{"start":{"line":8,"column":1},"end":{"line":8,"column":1}},"key":"NRchMDIIeL"}],"key":"lK9d1s6ta0"},{"type":"paragraph","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"children":[{"type":"text","value":"You can think of factorizing like trying to move a bunch of groceries from your car to your fridge. Say you have 20 items in your car. One way to do this is to individually take each item, pull it from the car, walk to the house, place it in the fridge. It’d take you 20 trips to do this. Factorizing is like putting your 20 items into 2 grocery bags. Now you only need to make 2 trips to the house - one for each grocery bag. The first approach requires 20 trips to the house, and the second requires 2 trips. You’ve just reduced the number of trips by an order of magnitude!","position":{"start":{"line":10,"column":1},"end":{"line":10,"column":1}},"key":"rkN5DCPxC4"}],"key":"VraeBUk416"},{"type":"paragraph","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"text","value":"The FFT accomplishes its factorization by recognizing that signals of a certain length can be broken down (factorized) into smaller signals. How many smaller signals? Well, that depends on the length of the original signal. If a number has many ","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"efW5IEdiJb"},{"type":"emphasis","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"children":[{"type":"text","value":"factors","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"VkRByL6l5R"}],"key":"JtzRhPPaIj"},{"type":"text","value":", it means that it can be broken down into a product of many different, smaller, signals.","position":{"start":{"line":12,"column":1},"end":{"line":12,"column":1}},"key":"tRM4LooNLZ"}],"key":"kbGLz1zdUM"},{"type":"paragraph","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"children":[{"type":"text","value":"In practice, this means that if the input to an FFT has a lot of factors, then you gain a bigger speedup from the FFT algorithm. On one end, a signal with a length == a power of two will have a ton of factors, and yield the greatest speedups. A signal with length == a prime number will be the slowest because it has no factors. Below is a quick simulation to see how much of a difference this makes.","position":{"start":{"line":14,"column":1},"end":{"line":14,"column":1}},"key":"NyTKp2pZJz"}],"key":"xZ7mdyAcb2"},{"type":"blockquote","position":{"start":{"line":16,"column":1},"end":{"line":19,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"children":[{"type":"text","value":"Here are some useful links explaining Fourier Transforms, as well as the FFT:","position":{"start":{"line":16,"column":1},"end":{"line":16,"column":1}},"key":"S13WbQzRif"}],"key":"oAp6SJbpkd"},{"type":"list","ordered":false,"spread":false,"position":{"start":{"line":17,"column":1},"end":{"line":19,"column":1}},"children":[{"type":"listItem","spread":true,"position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"children":[{"type":"link","url":"https://www.quora.com/What-is-an-intuitive-explanation-of-the-FFT-algorithm","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"children":[{"type":"text","value":"A Quora post","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"key":"IoD5cC718a"}],"urlSource":"https://www.quora.com/What-is-an-intuitive-explanation-of-the-FFT-algorithm","key":"FynLd6pLWd"},{"type":"text","value":" with some great answers on the intuition behind the Fast Fourier Transform.","position":{"start":{"line":17,"column":1},"end":{"line":17,"column":1}},"key":"ZGtpqDfeqs"}],"key":"do71Ec2jlu"},{"type":"listItem","spread":true,"position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"children":[{"type":"link","url":"https://en.wikipedia.org/wiki/Fast_Fourier_transform","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"children":[{"type":"text","value":"The wikipedia entry","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"lHS7t2IWxL"}],"urlSource":"https://en.wikipedia.org/wiki/Fast_Fourier_transform","data":{"page":"Fast_Fourier_transform","wiki":"https://en.wikipedia.org/","lang":"en"},"internal":false,"protocol":"wiki","key":"CKnIJK1EkQ"},{"type":"text","value":" for FFTs also has some nice links.","position":{"start":{"line":18,"column":1},"end":{"line":18,"column":1}},"key":"qLflYidRj6"}],"key":"DU0cQlc49L"},{"type":"listItem","spread":true,"position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"children":[{"type":"link","url":"https://jakevdp.github.io/blog/2013/08/28/understanding-the-fft/","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"children":[{"type":"text","value":"A post on the FFT","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"key":"zmA7n4psHr"}],"urlSource":"https://jakevdp.github.io/blog/2013/08/28/understanding-the-fft/","key":"SchDNRu8Sc"},{"type":"text","value":" from Jake Vanderplas is also a great explanation of how it works.","position":{"start":{"line":19,"column":1},"end":{"line":19,"column":1}},"key":"MmVt9tOVgm"}],"key":"MXPsuQfmaw"}],"key":"DXNvtHdKXd"}],"key":"ckhTdRQcps"}],"key":"Y64ZOr4W9P"},{"type":"block","kind":"notebook-code","data":{"collapsed":false,"jupyter":{"outputs_hidden":false}},"children":[{"type":"code","lang":"python","executable":true,"value":"import pandas as pd\nfrom sklearn import linear_model\nfrom matplotlib import pyplot as plt\n%matplotlib inline","key":"Bxf4zfPcxp"},{"type":"output","id":"A1olbSmxDwcyuSjGrwB1x","data":[],"key":"RyLmTyhVul"}],"key":"OUMQJsFMIo"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"The beautiful efficiency of the FFT","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"JKlJultI9X"}],"identifier":"the-beautiful-efficiency-of-the-fft","label":"The beautiful efficiency of the FFT","html_id":"the-beautiful-efficiency-of-the-fft","implicit":true,"key":"y9nxMAYJVF"},{"type":"paragraph","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"children":[{"type":"text","value":"To see what the FFT’s efficiency looks like, we’ll simulate data of different lengths and see how long it takes to compute the FFT at each length. We’ll create a random vector of gaussian noise ranging from length 1 to 10,000. For each vector, we’ll compute the FFT, and time how long it took to compute. I’ve already taken the liberty of doing this (repeated 3 times, and then averaged together). Those times are stored in fft_times.csv.","position":{"start":{"line":2,"column":1},"end":{"line":2,"column":1}},"key":"Nf4gmlReWm"}],"key":"Ft6UyEFvC6"}],"key":"JJ9ZP7uQF9"},{"type":"block","kind":"notebook-code","data":{"collapsed":false,"jupyter":{"outputs_hidden":false}},"children":[{"type":"code","lang":"python","executable":true,"value":"# Let's read in the data and see how it looks\ndf = pd.read_csv('../data/fft_times.csv', index_col=0)\ndf = df.apply(pd.to_numeric)\ndf = df.mean(0).to_frame('time')\ndf.index = df.index.astype(int)\ndf['length'] = df.index.values","key":"CAtJjGHhgl"},{"type":"output","id":"7xtqONsahbLw39tDlOhI7","data":[],"key":"Z8FAexlTue"}],"key":"TYbqZFKzE9"},{"type":"block","kind":"notebook-code","data":{"collapsed":false,"jupyter":{"outputs_hidden":false}},"children":[{"type":"code","lang":"python","executable":true,"value":"# First off, it's clear that computation time grows nonlinearly with signal length\ndf.plot('length', 'time', figsize=(10, 5))","key":"kSNyJSgKBQ"},{"type":"output","id":"WshoCM8WNtZaX31VRpjIG","data":[{"output_type":"execute_result","execution_count":27,"metadata":{},"data":{}},{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"dd7fcfa07484d180f1d5a9644f57618f","path":"/build/dd7fcfa07484d180f1d5a9644f57618f.png"}}}],"key":"XQHPeJDwVn"}],"key":"rmCubhrjtg"},{"type":"block","kind":"notebook-code","data":{"collapsed":false,"jupyter":{"outputs_hidden":false}},"children":[{"type":"code","lang":"python","executable":true,"value":"# However, upon closer inspection, it's clear that there's much variability\nwinsize = 500\ni = 0\nj = i + winsize\ndf.iloc[i:j]['time'].plot(figsize=(10, 5))","key":"GV9qmG684A"},{"type":"output","id":"WNmMQX2XDFThJaQrUi2wH","data":[{"output_type":"execute_result","execution_count":28,"metadata":{},"data":{}},{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"ab69d424d93ac78b89c178315319af35","path":"/build/ab69d424d93ac78b89c178315319af35.png"}}}],"key":"tptktiEjYc"}],"key":"Cf7JOnv8SL"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"As you can see, there appear to be multiple trends in the data. There seems to be a “most inefficient” line of growth in the data, as well as a “more efficient” and a “most efficient” trend. These correspond to lengths that are particularly good for an FFT.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"g4wwyHeNlu"}],"key":"v52M13wqxg"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"We can use regression to find the “linear” relationship between length of signal and time of FFT. However, if there are any trends in the data that are ","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"lOeOcycbj5"},{"type":"strong","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"nonlinear","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"uiQiJ3DsXx"}],"key":"lRgYfMcJP1"},{"type":"text","value":", then they should show up as errors in the regression model. Let’s see if that happens...","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"yrxOYs2WrN"}],"key":"XGNxps9EZT"}],"key":"derevNrWP3"},{"type":"block","kind":"notebook-code","data":{"collapsed":false,"jupyter":{"outputs_hidden":false}},"children":[{"type":"code","lang":"python","executable":true,"value":"# We'll use a regression model to try and fit how length predicts time\nmod = linear_model.LinearRegression()\nxfit = df['length']\nxfit = np.vstack([xfit, xfit**2, xfit**3, xfit**4]).T\nyfit = df['time'].reshape([-1, 1])","key":"hzHHPqxTxL"},{"type":"output","id":"TnGhnRgMtB76FSweJen-O","data":[],"key":"rtBXV2KJo4"}],"key":"q1WniNBuoS"},{"type":"block","kind":"notebook-code","data":{"collapsed":false,"jupyter":{"outputs_hidden":false}},"children":[{"type":"code","lang":"python","executable":true,"value":"# Now fit to our data, and calculate the error for each datapoint\nmod.fit(xfit, yfit)\ndf['ypred'] = mod.predict(xfit)\ndf['diff'] = df['time'] - df.ypred","key":"o5mHF1hFQk"},{"type":"output","id":"E6VX-jDsPs8W7sLAC4O9S","data":[],"key":"HV4zeeKPA1"}],"key":"owfqe12OEZ"},{"type":"block","kind":"notebook-code","data":{"collapsed":false,"jupyter":{"outputs_hidden":false}},"children":[{"type":"code","lang":"python","executable":true,"value":"# As the length grows, the trends in the data begin to diverge more and more\nax = df.plot('length', 'diff', kind='scatter',\n             style='.', alpha=.5, figsize=(10, 5))\nax.set_ylim([0, .05])\nax.set_title('Error of linear fit for varying signal lengths')","key":"krCQGrAccX"},{"type":"output","id":"mKQN7yADLwmiasBp4Asxt","data":[{"output_type":"execute_result","execution_count":31,"metadata":{},"data":{}},{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"544c606f954f39d303d7bc6fc53bad45","path":"/build/544c606f954f39d303d7bc6fc53bad45.png"}}}],"key":"e3Ln1TTPRV"}],"key":"o2wsNWC8Wo"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"It looks like there are some clear components of the data that ","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"AFecuoegGx"},{"type":"emphasis","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"don’t","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"inkMBrldxN"}],"key":"KqbqErplsk"},{"type":"text","value":" follow a linear relationship. Moreover, this seems to be systematic. We clearly see several separate traces in the error plot, which means that there are patterns in the data that follow different non-linear trends.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"VcaWRCw8M8"}],"key":"xdCrYiOwCH"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"But we already know that the FFT efficiency will differ depending on the number of factors of the signal’s length. Let’s see if that’s related to the plot above...","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"VSU3XGu9Q6"}],"key":"VVsP9nonFR"}],"key":"DeyxnM0GJk"},{"type":"block","kind":"notebook-code","data":{"collapsed":false,"jupyter":{"outputs_hidden":false}},"children":[{"type":"code","lang":"python","executable":true,"value":"# We'll write a helper function that shows how many (<100) factors each length has\nfind_n_factors = lambda n: len([i for i in range(1, min(100, n-1)) if n % i == 0])\n\n# This tells us the number of factors for all lengths we tried\ndf['n_factors'] = df['length'].map(find_n_factors)\n\n# We now have a column that tells us how many factors each iteration had\ndf.tail()","key":"B8hQBbHy2R"},{"type":"output","id":"pABtQ4v0bx75Vhjnwl8Ns","data":[{"output_type":"execute_result","execution_count":32,"metadata":{},"data":{"text/html":{"content":"<div>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>time</th>\n      <th>length</th>\n      <th>ypred</th>\n      <th>diff</th>\n      <th>n_factors</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>9995</th>\n      <td>0.031189</td>\n      <td>9995</td>\n      <td>0.035864</td>\n      <td>-0.004675</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>9996</th>\n      <td>0.000974</td>\n      <td>9996</td>\n      <td>0.035873</td>\n      <td>-0.034899</td>\n      <td>18</td>\n    </tr>\n    <tr>\n      <th>9997</th>\n      <td>0.012076</td>\n      <td>9997</td>\n      <td>0.035881</td>\n      <td>-0.023805</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>9998</th>\n      <td>0.080163</td>\n      <td>9998</td>\n      <td>0.035889</td>\n      <td>0.044274</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>9999</th>\n      <td>0.002135</td>\n      <td>9999</td>\n      <td>0.035897</td>\n      <td>-0.033763</td>\n      <td>6</td>\n    </tr>\n  </tbody>\n</table>\n</div>","content_type":"text/html"},"text/plain":{"content":"          time  length     ypred      diff  n_factors\n9995  0.031189    9995  0.035864 -0.004675          2\n9996  0.000974    9996  0.035873 -0.034899         18\n9997  0.012076    9997  0.035881 -0.023805          2\n9998  0.080163    9998  0.035889  0.044274          2\n9999  0.002135    9999  0.035897 -0.033763          6","content_type":"text/plain"}}}],"key":"IfmHEwerK8"}],"key":"GBvxuBP3kj"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Finally, we can plot time to compue the FFT as a function of the number of factors for that signal length.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"EHKmtyKDRL"}],"key":"h4iRVJ4jKF"}],"key":"I2xMJrpWbO"},{"type":"block","kind":"notebook-code","data":{"collapsed":false,"jupyter":{"outputs_hidden":false}},"children":[{"type":"code","lang":"python","executable":true,"value":"# As we can see, the FFT time drops quickly as a function of the number of factors\nax = df.plot('n_factors', 'time', style=['.'], figsize=(10, 5), alpha=.1)\nax.set_xlim([0, 15])\nax.set_ylabel('Time for FFT (s)')\nax.set_title('Time of FFT for varying numbers of factors')","key":"lFybCUd8f6"},{"type":"output","id":"ZFabUoGkCupaTEwxcsjNm","data":[{"output_type":"execute_result","execution_count":33,"metadata":{},"data":{}},{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"ef862789d3f5d2b2ba22f1792a762463","path":"/build/ef862789d3f5d2b2ba22f1792a762463.png"}}}],"key":"JAKiDzJRuu"}],"key":"Ww17m6GuvP"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"The fewer factors in the length of the signal, the longer the FFT takes.","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"FvMXoQG8fT"}],"key":"uZ2RDWbiHD"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Finally, we can show how the length of computation time changes for each group of factors. We’ll plot the signal length along with the time to compute the FFT, this time colored by the number of factors for each point.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"jjnoh4UYTl"}],"key":"oHMr1OwZ0g"}],"key":"CPZK8Vp7iX"},{"type":"block","kind":"notebook-code","data":{"collapsed":false,"jupyter":{"outputs_hidden":false}},"children":[{"type":"code","lang":"python","executable":true,"value":"# We'll plot two zoom levels to see the detail\nf, axs = plt.subplots(2, 1, figsize=(10, 5))\nvmin, vmax = 1, 18\nfor ax in axs:\n    ax = df.plot.scatter('length', 'time', c='n_factors', lw=0, cmap=plt.cm.get_cmap('RdYlBu', vmax),\n                                           figsize=(10, 10), vmin=vmin, vmax=vmax, ax=ax, alpha=.5)\n    ax.set_xlabel('Length of signal (samples)')\n    ax.set_ylabel('Time to complete FFT (s)')\n    ax.set_title('Time to compute the FFT, colored by n_factors')\n_ = plt.setp(axs, xlim=[0, df['length'].max()])\n_ = plt.setp(axs[0], ylim=[0, .2])\n_ = plt.setp(axs[1], ylim=[0, .005])\nplt.tight_layout()","key":"S8BJiWJ0fT"},{"type":"output","id":"sakR3IG6DeO8FNuaCns2T","data":[{"output_type":"display_data","metadata":{},"data":{"image/png":{"content_type":"image/png","hash":"ace444efc0674da3499ed0e12a3fc1d2","path":"/build/ace444efc0674da3499ed0e12a3fc1d2.png"}}}],"key":"KxmQttDSRx"}],"key":"tWrcC8qoco"},{"type":"block","kind":"notebook-content","data":{},"children":[{"type":"paragraph","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Each of those colored traces spreading upwards represents a particular strategy that the FFT uses for that number of factors. As you can see, the FFT will take a lot longer (and scales exponentially) with fewer factors (see the red lines). It takes much less time (and scales more linearly) with more factors (see the blue lines).","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"XPRJXUGQXQ"}],"key":"GbcdCir3JK"},{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"And that right there is the beauty of methods like the FFT. They leverage the structure of mathematics to take a computation that goes on for days, and figure out how to do it in seconds.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"pgqjADlPMw"}],"key":"cPYDdx0Cw9"}],"key":"LCxCa6iG25"}],"key":"xBzW7Um94n"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Combining dates with analysis visualization in python","url":"/blog/2017/2017-11-02-dates-multiple-plots","group":"2017"},"next":{"title":"Could Brexit have happened by chance?","url":"/blog/2016/2016-07-08-voting-randomness","group":"2016"}}},"domain":"http://localhost:3000"}